// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package flyio

import (
	"context"
	"reflect"

	"errors"
	"github.com/lukeshay/pulumi-flyio/sdk/go/flyio/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Fly.io WireGuard token for authenticating WireGuard peers.
type WireGuardToken struct {
	pulumi.CustomResourceState

	// The name of the WireGuard token.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// The organization the WireGuard token belongs to.
	Org pulumi.StringOutput `pulumi:"org"`
	// The WireGuard token value.
	Token pulumi.StringOutput `pulumi:"token"`
}

// NewWireGuardToken registers a new resource with the given unique name, arguments, and options.
func NewWireGuardToken(ctx *pulumi.Context,
	name string, args *WireGuardTokenArgs, opts ...pulumi.ResourceOption) (*WireGuardToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Org == nil {
		return nil, errors.New("invalid value for required argument 'Org'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WireGuardToken
	err := ctx.RegisterResource("flyio:index:WireGuardToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWireGuardToken gets an existing WireGuardToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWireGuardToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WireGuardTokenState, opts ...pulumi.ResourceOption) (*WireGuardToken, error) {
	var resource WireGuardToken
	err := ctx.ReadResource("flyio:index:WireGuardToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WireGuardToken resources.
type wireGuardTokenState struct {
}

type WireGuardTokenState struct {
}

func (WireGuardTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*wireGuardTokenState)(nil)).Elem()
}

type wireGuardTokenArgs struct {
	// The name of the WireGuard token.
	Name *string `pulumi:"name"`
	// The organization to create the WireGuard token in.
	Org string `pulumi:"org"`
}

// The set of arguments for constructing a WireGuardToken resource.
type WireGuardTokenArgs struct {
	// The name of the WireGuard token.
	Name pulumi.StringPtrInput
	// The organization to create the WireGuard token in.
	Org pulumi.StringInput
}

func (WireGuardTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wireGuardTokenArgs)(nil)).Elem()
}

type WireGuardTokenInput interface {
	pulumi.Input

	ToWireGuardTokenOutput() WireGuardTokenOutput
	ToWireGuardTokenOutputWithContext(ctx context.Context) WireGuardTokenOutput
}

func (*WireGuardToken) ElementType() reflect.Type {
	return reflect.TypeOf((**WireGuardToken)(nil)).Elem()
}

func (i *WireGuardToken) ToWireGuardTokenOutput() WireGuardTokenOutput {
	return i.ToWireGuardTokenOutputWithContext(context.Background())
}

func (i *WireGuardToken) ToWireGuardTokenOutputWithContext(ctx context.Context) WireGuardTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WireGuardTokenOutput)
}

// WireGuardTokenArrayInput is an input type that accepts WireGuardTokenArray and WireGuardTokenArrayOutput values.
// You can construct a concrete instance of `WireGuardTokenArrayInput` via:
//
//	WireGuardTokenArray{ WireGuardTokenArgs{...} }
type WireGuardTokenArrayInput interface {
	pulumi.Input

	ToWireGuardTokenArrayOutput() WireGuardTokenArrayOutput
	ToWireGuardTokenArrayOutputWithContext(context.Context) WireGuardTokenArrayOutput
}

type WireGuardTokenArray []WireGuardTokenInput

func (WireGuardTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WireGuardToken)(nil)).Elem()
}

func (i WireGuardTokenArray) ToWireGuardTokenArrayOutput() WireGuardTokenArrayOutput {
	return i.ToWireGuardTokenArrayOutputWithContext(context.Background())
}

func (i WireGuardTokenArray) ToWireGuardTokenArrayOutputWithContext(ctx context.Context) WireGuardTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WireGuardTokenArrayOutput)
}

// WireGuardTokenMapInput is an input type that accepts WireGuardTokenMap and WireGuardTokenMapOutput values.
// You can construct a concrete instance of `WireGuardTokenMapInput` via:
//
//	WireGuardTokenMap{ "key": WireGuardTokenArgs{...} }
type WireGuardTokenMapInput interface {
	pulumi.Input

	ToWireGuardTokenMapOutput() WireGuardTokenMapOutput
	ToWireGuardTokenMapOutputWithContext(context.Context) WireGuardTokenMapOutput
}

type WireGuardTokenMap map[string]WireGuardTokenInput

func (WireGuardTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WireGuardToken)(nil)).Elem()
}

func (i WireGuardTokenMap) ToWireGuardTokenMapOutput() WireGuardTokenMapOutput {
	return i.ToWireGuardTokenMapOutputWithContext(context.Background())
}

func (i WireGuardTokenMap) ToWireGuardTokenMapOutputWithContext(ctx context.Context) WireGuardTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WireGuardTokenMapOutput)
}

type WireGuardTokenOutput struct{ *pulumi.OutputState }

func (WireGuardTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WireGuardToken)(nil)).Elem()
}

func (o WireGuardTokenOutput) ToWireGuardTokenOutput() WireGuardTokenOutput {
	return o
}

func (o WireGuardTokenOutput) ToWireGuardTokenOutputWithContext(ctx context.Context) WireGuardTokenOutput {
	return o
}

// The name of the WireGuard token.
func (o WireGuardTokenOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WireGuardToken) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

// The organization the WireGuard token belongs to.
func (o WireGuardTokenOutput) Org() pulumi.StringOutput {
	return o.ApplyT(func(v *WireGuardToken) pulumi.StringOutput { return v.Org }).(pulumi.StringOutput)
}

// The WireGuard token value.
func (o WireGuardTokenOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *WireGuardToken) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

type WireGuardTokenArrayOutput struct{ *pulumi.OutputState }

func (WireGuardTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WireGuardToken)(nil)).Elem()
}

func (o WireGuardTokenArrayOutput) ToWireGuardTokenArrayOutput() WireGuardTokenArrayOutput {
	return o
}

func (o WireGuardTokenArrayOutput) ToWireGuardTokenArrayOutputWithContext(ctx context.Context) WireGuardTokenArrayOutput {
	return o
}

func (o WireGuardTokenArrayOutput) Index(i pulumi.IntInput) WireGuardTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WireGuardToken {
		return vs[0].([]*WireGuardToken)[vs[1].(int)]
	}).(WireGuardTokenOutput)
}

type WireGuardTokenMapOutput struct{ *pulumi.OutputState }

func (WireGuardTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WireGuardToken)(nil)).Elem()
}

func (o WireGuardTokenMapOutput) ToWireGuardTokenMapOutput() WireGuardTokenMapOutput {
	return o
}

func (o WireGuardTokenMapOutput) ToWireGuardTokenMapOutputWithContext(ctx context.Context) WireGuardTokenMapOutput {
	return o
}

func (o WireGuardTokenMapOutput) MapIndex(k pulumi.StringInput) WireGuardTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WireGuardToken {
		return vs[0].(map[string]*WireGuardToken)[vs[1].(string)]
	}).(WireGuardTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WireGuardTokenInput)(nil)).Elem(), &WireGuardToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*WireGuardTokenArrayInput)(nil)).Elem(), WireGuardTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WireGuardTokenMapInput)(nil)).Elem(), WireGuardTokenMap{})
	pulumi.RegisterOutputType(WireGuardTokenOutput{})
	pulumi.RegisterOutputType(WireGuardTokenArrayOutput{})
	pulumi.RegisterOutputType(WireGuardTokenMapOutput{})
}
