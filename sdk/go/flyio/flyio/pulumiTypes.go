// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package flyio

import (
	"context"
	"reflect"

	"github.com/lukeshay/pulumi-flyio/sdk/go/flyio/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CheckStatus struct {
	Name      *string `pulumi:"name"`
	Output    *string `pulumi:"output"`
	Status    *string `pulumi:"status"`
	UpdatedAt *string `pulumi:"updatedAt"`
}

type CheckStatusOutput struct{ *pulumi.OutputState }

func (CheckStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckStatus)(nil)).Elem()
}

func (o CheckStatusOutput) ToCheckStatusOutput() CheckStatusOutput {
	return o
}

func (o CheckStatusOutput) ToCheckStatusOutputWithContext(ctx context.Context) CheckStatusOutput {
	return o
}

func (o CheckStatusOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckStatus) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o CheckStatusOutput) Output() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckStatus) *string { return v.Output }).(pulumi.StringPtrOutput)
}

func (o CheckStatusOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckStatus) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func (o CheckStatusOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckStatus) *string { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

type CheckStatusArrayOutput struct{ *pulumi.OutputState }

func (CheckStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckStatus)(nil)).Elem()
}

func (o CheckStatusArrayOutput) ToCheckStatusArrayOutput() CheckStatusArrayOutput {
	return o
}

func (o CheckStatusArrayOutput) ToCheckStatusArrayOutputWithContext(ctx context.Context) CheckStatusArrayOutput {
	return o
}

func (o CheckStatusArrayOutput) Index(i pulumi.IntInput) CheckStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckStatus {
		return vs[0].([]CheckStatus)[vs[1].(int)]
	}).(CheckStatusOutput)
}

type FlyContainerConfig struct {
	Cmd          []string                  `pulumi:"cmd"`
	DependsOn    []FlyContainerDependency  `pulumi:"dependsOn"`
	Entrypoint   []string                  `pulumi:"entrypoint"`
	Env          map[string]string         `pulumi:"env"`
	EnvFrom      []FlyEnvFrom              `pulumi:"envFrom"`
	Exec         []string                  `pulumi:"exec"`
	Files        []FlyFile                 `pulumi:"files"`
	Healthchecks []FlyContainerHealthcheck `pulumi:"healthchecks"`
	Image        *string                   `pulumi:"image"`
	Mounts       []FlyContainerMount       `pulumi:"mounts"`
	Name         *string                   `pulumi:"name"`
	Restart      *FlyMachineRestart        `pulumi:"restart"`
	Secrets      []FlyMachineSecret        `pulumi:"secrets"`
	Stop         *FlyStopConfig            `pulumi:"stop"`
	User         *string                   `pulumi:"user"`
}

// FlyContainerConfigInput is an input type that accepts FlyContainerConfigArgs and FlyContainerConfigOutput values.
// You can construct a concrete instance of `FlyContainerConfigInput` via:
//
//	FlyContainerConfigArgs{...}
type FlyContainerConfigInput interface {
	pulumi.Input

	ToFlyContainerConfigOutput() FlyContainerConfigOutput
	ToFlyContainerConfigOutputWithContext(context.Context) FlyContainerConfigOutput
}

type FlyContainerConfigArgs struct {
	Cmd          pulumi.StringArrayInput           `pulumi:"cmd"`
	DependsOn    FlyContainerDependencyArrayInput  `pulumi:"dependsOn"`
	Entrypoint   pulumi.StringArrayInput           `pulumi:"entrypoint"`
	Env          pulumi.StringMapInput             `pulumi:"env"`
	EnvFrom      FlyEnvFromArrayInput              `pulumi:"envFrom"`
	Exec         pulumi.StringArrayInput           `pulumi:"exec"`
	Files        FlyFileArrayInput                 `pulumi:"files"`
	Healthchecks FlyContainerHealthcheckArrayInput `pulumi:"healthchecks"`
	Image        pulumi.StringPtrInput             `pulumi:"image"`
	Mounts       FlyContainerMountArrayInput       `pulumi:"mounts"`
	Name         pulumi.StringPtrInput             `pulumi:"name"`
	Restart      FlyMachineRestartPtrInput         `pulumi:"restart"`
	Secrets      FlyMachineSecretArrayInput        `pulumi:"secrets"`
	Stop         FlyStopConfigPtrInput             `pulumi:"stop"`
	User         pulumi.StringPtrInput             `pulumi:"user"`
}

func (FlyContainerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyContainerConfig)(nil)).Elem()
}

func (i FlyContainerConfigArgs) ToFlyContainerConfigOutput() FlyContainerConfigOutput {
	return i.ToFlyContainerConfigOutputWithContext(context.Background())
}

func (i FlyContainerConfigArgs) ToFlyContainerConfigOutputWithContext(ctx context.Context) FlyContainerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyContainerConfigOutput)
}

// FlyContainerConfigArrayInput is an input type that accepts FlyContainerConfigArray and FlyContainerConfigArrayOutput values.
// You can construct a concrete instance of `FlyContainerConfigArrayInput` via:
//
//	FlyContainerConfigArray{ FlyContainerConfigArgs{...} }
type FlyContainerConfigArrayInput interface {
	pulumi.Input

	ToFlyContainerConfigArrayOutput() FlyContainerConfigArrayOutput
	ToFlyContainerConfigArrayOutputWithContext(context.Context) FlyContainerConfigArrayOutput
}

type FlyContainerConfigArray []FlyContainerConfigInput

func (FlyContainerConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyContainerConfig)(nil)).Elem()
}

func (i FlyContainerConfigArray) ToFlyContainerConfigArrayOutput() FlyContainerConfigArrayOutput {
	return i.ToFlyContainerConfigArrayOutputWithContext(context.Background())
}

func (i FlyContainerConfigArray) ToFlyContainerConfigArrayOutputWithContext(ctx context.Context) FlyContainerConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyContainerConfigArrayOutput)
}

type FlyContainerConfigOutput struct{ *pulumi.OutputState }

func (FlyContainerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyContainerConfig)(nil)).Elem()
}

func (o FlyContainerConfigOutput) ToFlyContainerConfigOutput() FlyContainerConfigOutput {
	return o
}

func (o FlyContainerConfigOutput) ToFlyContainerConfigOutputWithContext(ctx context.Context) FlyContainerConfigOutput {
	return o
}

func (o FlyContainerConfigOutput) Cmd() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlyContainerConfig) []string { return v.Cmd }).(pulumi.StringArrayOutput)
}

func (o FlyContainerConfigOutput) DependsOn() FlyContainerDependencyArrayOutput {
	return o.ApplyT(func(v FlyContainerConfig) []FlyContainerDependency { return v.DependsOn }).(FlyContainerDependencyArrayOutput)
}

func (o FlyContainerConfigOutput) Entrypoint() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlyContainerConfig) []string { return v.Entrypoint }).(pulumi.StringArrayOutput)
}

func (o FlyContainerConfigOutput) Env() pulumi.StringMapOutput {
	return o.ApplyT(func(v FlyContainerConfig) map[string]string { return v.Env }).(pulumi.StringMapOutput)
}

func (o FlyContainerConfigOutput) EnvFrom() FlyEnvFromArrayOutput {
	return o.ApplyT(func(v FlyContainerConfig) []FlyEnvFrom { return v.EnvFrom }).(FlyEnvFromArrayOutput)
}

func (o FlyContainerConfigOutput) Exec() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlyContainerConfig) []string { return v.Exec }).(pulumi.StringArrayOutput)
}

func (o FlyContainerConfigOutput) Files() FlyFileArrayOutput {
	return o.ApplyT(func(v FlyContainerConfig) []FlyFile { return v.Files }).(FlyFileArrayOutput)
}

func (o FlyContainerConfigOutput) Healthchecks() FlyContainerHealthcheckArrayOutput {
	return o.ApplyT(func(v FlyContainerConfig) []FlyContainerHealthcheck { return v.Healthchecks }).(FlyContainerHealthcheckArrayOutput)
}

func (o FlyContainerConfigOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyContainerConfig) *string { return v.Image }).(pulumi.StringPtrOutput)
}

func (o FlyContainerConfigOutput) Mounts() FlyContainerMountArrayOutput {
	return o.ApplyT(func(v FlyContainerConfig) []FlyContainerMount { return v.Mounts }).(FlyContainerMountArrayOutput)
}

func (o FlyContainerConfigOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyContainerConfig) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o FlyContainerConfigOutput) Restart() FlyMachineRestartPtrOutput {
	return o.ApplyT(func(v FlyContainerConfig) *FlyMachineRestart { return v.Restart }).(FlyMachineRestartPtrOutput)
}

func (o FlyContainerConfigOutput) Secrets() FlyMachineSecretArrayOutput {
	return o.ApplyT(func(v FlyContainerConfig) []FlyMachineSecret { return v.Secrets }).(FlyMachineSecretArrayOutput)
}

func (o FlyContainerConfigOutput) Stop() FlyStopConfigPtrOutput {
	return o.ApplyT(func(v FlyContainerConfig) *FlyStopConfig { return v.Stop }).(FlyStopConfigPtrOutput)
}

func (o FlyContainerConfigOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyContainerConfig) *string { return v.User }).(pulumi.StringPtrOutput)
}

type FlyContainerConfigArrayOutput struct{ *pulumi.OutputState }

func (FlyContainerConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyContainerConfig)(nil)).Elem()
}

func (o FlyContainerConfigArrayOutput) ToFlyContainerConfigArrayOutput() FlyContainerConfigArrayOutput {
	return o
}

func (o FlyContainerConfigArrayOutput) ToFlyContainerConfigArrayOutputWithContext(ctx context.Context) FlyContainerConfigArrayOutput {
	return o
}

func (o FlyContainerConfigArrayOutput) Index(i pulumi.IntInput) FlyContainerConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlyContainerConfig {
		return vs[0].([]FlyContainerConfig)[vs[1].(int)]
	}).(FlyContainerConfigOutput)
}

type FlyContainerDependency struct {
	Condition *string `pulumi:"condition"`
	Name      *string `pulumi:"name"`
}

// FlyContainerDependencyInput is an input type that accepts FlyContainerDependencyArgs and FlyContainerDependencyOutput values.
// You can construct a concrete instance of `FlyContainerDependencyInput` via:
//
//	FlyContainerDependencyArgs{...}
type FlyContainerDependencyInput interface {
	pulumi.Input

	ToFlyContainerDependencyOutput() FlyContainerDependencyOutput
	ToFlyContainerDependencyOutputWithContext(context.Context) FlyContainerDependencyOutput
}

type FlyContainerDependencyArgs struct {
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	Name      pulumi.StringPtrInput `pulumi:"name"`
}

func (FlyContainerDependencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyContainerDependency)(nil)).Elem()
}

func (i FlyContainerDependencyArgs) ToFlyContainerDependencyOutput() FlyContainerDependencyOutput {
	return i.ToFlyContainerDependencyOutputWithContext(context.Background())
}

func (i FlyContainerDependencyArgs) ToFlyContainerDependencyOutputWithContext(ctx context.Context) FlyContainerDependencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyContainerDependencyOutput)
}

// FlyContainerDependencyArrayInput is an input type that accepts FlyContainerDependencyArray and FlyContainerDependencyArrayOutput values.
// You can construct a concrete instance of `FlyContainerDependencyArrayInput` via:
//
//	FlyContainerDependencyArray{ FlyContainerDependencyArgs{...} }
type FlyContainerDependencyArrayInput interface {
	pulumi.Input

	ToFlyContainerDependencyArrayOutput() FlyContainerDependencyArrayOutput
	ToFlyContainerDependencyArrayOutputWithContext(context.Context) FlyContainerDependencyArrayOutput
}

type FlyContainerDependencyArray []FlyContainerDependencyInput

func (FlyContainerDependencyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyContainerDependency)(nil)).Elem()
}

func (i FlyContainerDependencyArray) ToFlyContainerDependencyArrayOutput() FlyContainerDependencyArrayOutput {
	return i.ToFlyContainerDependencyArrayOutputWithContext(context.Background())
}

func (i FlyContainerDependencyArray) ToFlyContainerDependencyArrayOutputWithContext(ctx context.Context) FlyContainerDependencyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyContainerDependencyArrayOutput)
}

type FlyContainerDependencyOutput struct{ *pulumi.OutputState }

func (FlyContainerDependencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyContainerDependency)(nil)).Elem()
}

func (o FlyContainerDependencyOutput) ToFlyContainerDependencyOutput() FlyContainerDependencyOutput {
	return o
}

func (o FlyContainerDependencyOutput) ToFlyContainerDependencyOutputWithContext(ctx context.Context) FlyContainerDependencyOutput {
	return o
}

func (o FlyContainerDependencyOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyContainerDependency) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

func (o FlyContainerDependencyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyContainerDependency) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type FlyContainerDependencyArrayOutput struct{ *pulumi.OutputState }

func (FlyContainerDependencyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyContainerDependency)(nil)).Elem()
}

func (o FlyContainerDependencyArrayOutput) ToFlyContainerDependencyArrayOutput() FlyContainerDependencyArrayOutput {
	return o
}

func (o FlyContainerDependencyArrayOutput) ToFlyContainerDependencyArrayOutputWithContext(ctx context.Context) FlyContainerDependencyArrayOutput {
	return o
}

func (o FlyContainerDependencyArrayOutput) Index(i pulumi.IntInput) FlyContainerDependencyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlyContainerDependency {
		return vs[0].([]FlyContainerDependency)[vs[1].(int)]
	}).(FlyContainerDependencyOutput)
}

type FlyContainerHealthcheck struct {
	Exec             *FlyExecHealthcheck `pulumi:"exec"`
	FailureThreshold *int                `pulumi:"failureThreshold"`
	GracePeriod      *int                `pulumi:"gracePeriod"`
	Http             *FlyHTTPHealthcheck `pulumi:"http"`
	Interval         *int                `pulumi:"interval"`
	Kind             *string             `pulumi:"kind"`
	Name             *string             `pulumi:"name"`
	SuccessThreshold *int                `pulumi:"successThreshold"`
	Tcp              *FlyTCPHealthcheck  `pulumi:"tcp"`
	Timeout          *int                `pulumi:"timeout"`
	Unhealthy        *string             `pulumi:"unhealthy"`
}

// FlyContainerHealthcheckInput is an input type that accepts FlyContainerHealthcheckArgs and FlyContainerHealthcheckOutput values.
// You can construct a concrete instance of `FlyContainerHealthcheckInput` via:
//
//	FlyContainerHealthcheckArgs{...}
type FlyContainerHealthcheckInput interface {
	pulumi.Input

	ToFlyContainerHealthcheckOutput() FlyContainerHealthcheckOutput
	ToFlyContainerHealthcheckOutputWithContext(context.Context) FlyContainerHealthcheckOutput
}

type FlyContainerHealthcheckArgs struct {
	Exec             FlyExecHealthcheckPtrInput `pulumi:"exec"`
	FailureThreshold pulumi.IntPtrInput         `pulumi:"failureThreshold"`
	GracePeriod      pulumi.IntPtrInput         `pulumi:"gracePeriod"`
	Http             FlyHTTPHealthcheckPtrInput `pulumi:"http"`
	Interval         pulumi.IntPtrInput         `pulumi:"interval"`
	Kind             pulumi.StringPtrInput      `pulumi:"kind"`
	Name             pulumi.StringPtrInput      `pulumi:"name"`
	SuccessThreshold pulumi.IntPtrInput         `pulumi:"successThreshold"`
	Tcp              FlyTCPHealthcheckPtrInput  `pulumi:"tcp"`
	Timeout          pulumi.IntPtrInput         `pulumi:"timeout"`
	Unhealthy        pulumi.StringPtrInput      `pulumi:"unhealthy"`
}

func (FlyContainerHealthcheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyContainerHealthcheck)(nil)).Elem()
}

func (i FlyContainerHealthcheckArgs) ToFlyContainerHealthcheckOutput() FlyContainerHealthcheckOutput {
	return i.ToFlyContainerHealthcheckOutputWithContext(context.Background())
}

func (i FlyContainerHealthcheckArgs) ToFlyContainerHealthcheckOutputWithContext(ctx context.Context) FlyContainerHealthcheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyContainerHealthcheckOutput)
}

// FlyContainerHealthcheckArrayInput is an input type that accepts FlyContainerHealthcheckArray and FlyContainerHealthcheckArrayOutput values.
// You can construct a concrete instance of `FlyContainerHealthcheckArrayInput` via:
//
//	FlyContainerHealthcheckArray{ FlyContainerHealthcheckArgs{...} }
type FlyContainerHealthcheckArrayInput interface {
	pulumi.Input

	ToFlyContainerHealthcheckArrayOutput() FlyContainerHealthcheckArrayOutput
	ToFlyContainerHealthcheckArrayOutputWithContext(context.Context) FlyContainerHealthcheckArrayOutput
}

type FlyContainerHealthcheckArray []FlyContainerHealthcheckInput

func (FlyContainerHealthcheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyContainerHealthcheck)(nil)).Elem()
}

func (i FlyContainerHealthcheckArray) ToFlyContainerHealthcheckArrayOutput() FlyContainerHealthcheckArrayOutput {
	return i.ToFlyContainerHealthcheckArrayOutputWithContext(context.Background())
}

func (i FlyContainerHealthcheckArray) ToFlyContainerHealthcheckArrayOutputWithContext(ctx context.Context) FlyContainerHealthcheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyContainerHealthcheckArrayOutput)
}

type FlyContainerHealthcheckOutput struct{ *pulumi.OutputState }

func (FlyContainerHealthcheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyContainerHealthcheck)(nil)).Elem()
}

func (o FlyContainerHealthcheckOutput) ToFlyContainerHealthcheckOutput() FlyContainerHealthcheckOutput {
	return o
}

func (o FlyContainerHealthcheckOutput) ToFlyContainerHealthcheckOutputWithContext(ctx context.Context) FlyContainerHealthcheckOutput {
	return o
}

func (o FlyContainerHealthcheckOutput) Exec() FlyExecHealthcheckPtrOutput {
	return o.ApplyT(func(v FlyContainerHealthcheck) *FlyExecHealthcheck { return v.Exec }).(FlyExecHealthcheckPtrOutput)
}

func (o FlyContainerHealthcheckOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyContainerHealthcheck) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

func (o FlyContainerHealthcheckOutput) GracePeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyContainerHealthcheck) *int { return v.GracePeriod }).(pulumi.IntPtrOutput)
}

func (o FlyContainerHealthcheckOutput) Http() FlyHTTPHealthcheckPtrOutput {
	return o.ApplyT(func(v FlyContainerHealthcheck) *FlyHTTPHealthcheck { return v.Http }).(FlyHTTPHealthcheckPtrOutput)
}

func (o FlyContainerHealthcheckOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyContainerHealthcheck) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

func (o FlyContainerHealthcheckOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyContainerHealthcheck) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o FlyContainerHealthcheckOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyContainerHealthcheck) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o FlyContainerHealthcheckOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyContainerHealthcheck) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

func (o FlyContainerHealthcheckOutput) Tcp() FlyTCPHealthcheckPtrOutput {
	return o.ApplyT(func(v FlyContainerHealthcheck) *FlyTCPHealthcheck { return v.Tcp }).(FlyTCPHealthcheckPtrOutput)
}

func (o FlyContainerHealthcheckOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyContainerHealthcheck) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

func (o FlyContainerHealthcheckOutput) Unhealthy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyContainerHealthcheck) *string { return v.Unhealthy }).(pulumi.StringPtrOutput)
}

type FlyContainerHealthcheckArrayOutput struct{ *pulumi.OutputState }

func (FlyContainerHealthcheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyContainerHealthcheck)(nil)).Elem()
}

func (o FlyContainerHealthcheckArrayOutput) ToFlyContainerHealthcheckArrayOutput() FlyContainerHealthcheckArrayOutput {
	return o
}

func (o FlyContainerHealthcheckArrayOutput) ToFlyContainerHealthcheckArrayOutputWithContext(ctx context.Context) FlyContainerHealthcheckArrayOutput {
	return o
}

func (o FlyContainerHealthcheckArrayOutput) Index(i pulumi.IntInput) FlyContainerHealthcheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlyContainerHealthcheck {
		return vs[0].([]FlyContainerHealthcheck)[vs[1].(int)]
	}).(FlyContainerHealthcheckOutput)
}

type FlyContainerMount struct {
	Name *string `pulumi:"name"`
	Path *string `pulumi:"path"`
}

// FlyContainerMountInput is an input type that accepts FlyContainerMountArgs and FlyContainerMountOutput values.
// You can construct a concrete instance of `FlyContainerMountInput` via:
//
//	FlyContainerMountArgs{...}
type FlyContainerMountInput interface {
	pulumi.Input

	ToFlyContainerMountOutput() FlyContainerMountOutput
	ToFlyContainerMountOutputWithContext(context.Context) FlyContainerMountOutput
}

type FlyContainerMountArgs struct {
	Name pulumi.StringPtrInput `pulumi:"name"`
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (FlyContainerMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyContainerMount)(nil)).Elem()
}

func (i FlyContainerMountArgs) ToFlyContainerMountOutput() FlyContainerMountOutput {
	return i.ToFlyContainerMountOutputWithContext(context.Background())
}

func (i FlyContainerMountArgs) ToFlyContainerMountOutputWithContext(ctx context.Context) FlyContainerMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyContainerMountOutput)
}

// FlyContainerMountArrayInput is an input type that accepts FlyContainerMountArray and FlyContainerMountArrayOutput values.
// You can construct a concrete instance of `FlyContainerMountArrayInput` via:
//
//	FlyContainerMountArray{ FlyContainerMountArgs{...} }
type FlyContainerMountArrayInput interface {
	pulumi.Input

	ToFlyContainerMountArrayOutput() FlyContainerMountArrayOutput
	ToFlyContainerMountArrayOutputWithContext(context.Context) FlyContainerMountArrayOutput
}

type FlyContainerMountArray []FlyContainerMountInput

func (FlyContainerMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyContainerMount)(nil)).Elem()
}

func (i FlyContainerMountArray) ToFlyContainerMountArrayOutput() FlyContainerMountArrayOutput {
	return i.ToFlyContainerMountArrayOutputWithContext(context.Background())
}

func (i FlyContainerMountArray) ToFlyContainerMountArrayOutputWithContext(ctx context.Context) FlyContainerMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyContainerMountArrayOutput)
}

type FlyContainerMountOutput struct{ *pulumi.OutputState }

func (FlyContainerMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyContainerMount)(nil)).Elem()
}

func (o FlyContainerMountOutput) ToFlyContainerMountOutput() FlyContainerMountOutput {
	return o
}

func (o FlyContainerMountOutput) ToFlyContainerMountOutputWithContext(ctx context.Context) FlyContainerMountOutput {
	return o
}

func (o FlyContainerMountOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyContainerMount) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o FlyContainerMountOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyContainerMount) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type FlyContainerMountArrayOutput struct{ *pulumi.OutputState }

func (FlyContainerMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyContainerMount)(nil)).Elem()
}

func (o FlyContainerMountArrayOutput) ToFlyContainerMountArrayOutput() FlyContainerMountArrayOutput {
	return o
}

func (o FlyContainerMountArrayOutput) ToFlyContainerMountArrayOutputWithContext(ctx context.Context) FlyContainerMountArrayOutput {
	return o
}

func (o FlyContainerMountArrayOutput) Index(i pulumi.IntInput) FlyContainerMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlyContainerMount {
		return vs[0].([]FlyContainerMount)[vs[1].(int)]
	}).(FlyContainerMountOutput)
}

type FlyDNSConfig struct {
	DnsForwardRules  []FlyDnsForwardRule `pulumi:"dnsForwardRules"`
	Hostname         *string             `pulumi:"hostname"`
	HostnameFqdn     *string             `pulumi:"hostnameFqdn"`
	Nameservers      []string            `pulumi:"nameservers"`
	Options          []FlyDnsOption      `pulumi:"options"`
	Searches         []string            `pulumi:"searches"`
	SkipRegistration *bool               `pulumi:"skipRegistration"`
}

// FlyDNSConfigInput is an input type that accepts FlyDNSConfigArgs and FlyDNSConfigOutput values.
// You can construct a concrete instance of `FlyDNSConfigInput` via:
//
//	FlyDNSConfigArgs{...}
type FlyDNSConfigInput interface {
	pulumi.Input

	ToFlyDNSConfigOutput() FlyDNSConfigOutput
	ToFlyDNSConfigOutputWithContext(context.Context) FlyDNSConfigOutput
}

type FlyDNSConfigArgs struct {
	DnsForwardRules  FlyDnsForwardRuleArrayInput `pulumi:"dnsForwardRules"`
	Hostname         pulumi.StringPtrInput       `pulumi:"hostname"`
	HostnameFqdn     pulumi.StringPtrInput       `pulumi:"hostnameFqdn"`
	Nameservers      pulumi.StringArrayInput     `pulumi:"nameservers"`
	Options          FlyDnsOptionArrayInput      `pulumi:"options"`
	Searches         pulumi.StringArrayInput     `pulumi:"searches"`
	SkipRegistration pulumi.BoolPtrInput         `pulumi:"skipRegistration"`
}

func (FlyDNSConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyDNSConfig)(nil)).Elem()
}

func (i FlyDNSConfigArgs) ToFlyDNSConfigOutput() FlyDNSConfigOutput {
	return i.ToFlyDNSConfigOutputWithContext(context.Background())
}

func (i FlyDNSConfigArgs) ToFlyDNSConfigOutputWithContext(ctx context.Context) FlyDNSConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyDNSConfigOutput)
}

func (i FlyDNSConfigArgs) ToFlyDNSConfigPtrOutput() FlyDNSConfigPtrOutput {
	return i.ToFlyDNSConfigPtrOutputWithContext(context.Background())
}

func (i FlyDNSConfigArgs) ToFlyDNSConfigPtrOutputWithContext(ctx context.Context) FlyDNSConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyDNSConfigOutput).ToFlyDNSConfigPtrOutputWithContext(ctx)
}

// FlyDNSConfigPtrInput is an input type that accepts FlyDNSConfigArgs, FlyDNSConfigPtr and FlyDNSConfigPtrOutput values.
// You can construct a concrete instance of `FlyDNSConfigPtrInput` via:
//
//	        FlyDNSConfigArgs{...}
//
//	or:
//
//	        nil
type FlyDNSConfigPtrInput interface {
	pulumi.Input

	ToFlyDNSConfigPtrOutput() FlyDNSConfigPtrOutput
	ToFlyDNSConfigPtrOutputWithContext(context.Context) FlyDNSConfigPtrOutput
}

type flyDNSConfigPtrType FlyDNSConfigArgs

func FlyDNSConfigPtr(v *FlyDNSConfigArgs) FlyDNSConfigPtrInput {
	return (*flyDNSConfigPtrType)(v)
}

func (*flyDNSConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyDNSConfig)(nil)).Elem()
}

func (i *flyDNSConfigPtrType) ToFlyDNSConfigPtrOutput() FlyDNSConfigPtrOutput {
	return i.ToFlyDNSConfigPtrOutputWithContext(context.Background())
}

func (i *flyDNSConfigPtrType) ToFlyDNSConfigPtrOutputWithContext(ctx context.Context) FlyDNSConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyDNSConfigPtrOutput)
}

type FlyDNSConfigOutput struct{ *pulumi.OutputState }

func (FlyDNSConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyDNSConfig)(nil)).Elem()
}

func (o FlyDNSConfigOutput) ToFlyDNSConfigOutput() FlyDNSConfigOutput {
	return o
}

func (o FlyDNSConfigOutput) ToFlyDNSConfigOutputWithContext(ctx context.Context) FlyDNSConfigOutput {
	return o
}

func (o FlyDNSConfigOutput) ToFlyDNSConfigPtrOutput() FlyDNSConfigPtrOutput {
	return o.ToFlyDNSConfigPtrOutputWithContext(context.Background())
}

func (o FlyDNSConfigOutput) ToFlyDNSConfigPtrOutputWithContext(ctx context.Context) FlyDNSConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlyDNSConfig) *FlyDNSConfig {
		return &v
	}).(FlyDNSConfigPtrOutput)
}

func (o FlyDNSConfigOutput) DnsForwardRules() FlyDnsForwardRuleArrayOutput {
	return o.ApplyT(func(v FlyDNSConfig) []FlyDnsForwardRule { return v.DnsForwardRules }).(FlyDnsForwardRuleArrayOutput)
}

func (o FlyDNSConfigOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyDNSConfig) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

func (o FlyDNSConfigOutput) HostnameFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyDNSConfig) *string { return v.HostnameFqdn }).(pulumi.StringPtrOutput)
}

func (o FlyDNSConfigOutput) Nameservers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlyDNSConfig) []string { return v.Nameservers }).(pulumi.StringArrayOutput)
}

func (o FlyDNSConfigOutput) Options() FlyDnsOptionArrayOutput {
	return o.ApplyT(func(v FlyDNSConfig) []FlyDnsOption { return v.Options }).(FlyDnsOptionArrayOutput)
}

func (o FlyDNSConfigOutput) Searches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlyDNSConfig) []string { return v.Searches }).(pulumi.StringArrayOutput)
}

func (o FlyDNSConfigOutput) SkipRegistration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FlyDNSConfig) *bool { return v.SkipRegistration }).(pulumi.BoolPtrOutput)
}

type FlyDNSConfigPtrOutput struct{ *pulumi.OutputState }

func (FlyDNSConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyDNSConfig)(nil)).Elem()
}

func (o FlyDNSConfigPtrOutput) ToFlyDNSConfigPtrOutput() FlyDNSConfigPtrOutput {
	return o
}

func (o FlyDNSConfigPtrOutput) ToFlyDNSConfigPtrOutputWithContext(ctx context.Context) FlyDNSConfigPtrOutput {
	return o
}

func (o FlyDNSConfigPtrOutput) Elem() FlyDNSConfigOutput {
	return o.ApplyT(func(v *FlyDNSConfig) FlyDNSConfig {
		if v != nil {
			return *v
		}
		var ret FlyDNSConfig
		return ret
	}).(FlyDNSConfigOutput)
}

func (o FlyDNSConfigPtrOutput) DnsForwardRules() FlyDnsForwardRuleArrayOutput {
	return o.ApplyT(func(v *FlyDNSConfig) []FlyDnsForwardRule {
		if v == nil {
			return nil
		}
		return v.DnsForwardRules
	}).(FlyDnsForwardRuleArrayOutput)
}

func (o FlyDNSConfigPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlyDNSConfig) *string {
		if v == nil {
			return nil
		}
		return v.Hostname
	}).(pulumi.StringPtrOutput)
}

func (o FlyDNSConfigPtrOutput) HostnameFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlyDNSConfig) *string {
		if v == nil {
			return nil
		}
		return v.HostnameFqdn
	}).(pulumi.StringPtrOutput)
}

func (o FlyDNSConfigPtrOutput) Nameservers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FlyDNSConfig) []string {
		if v == nil {
			return nil
		}
		return v.Nameservers
	}).(pulumi.StringArrayOutput)
}

func (o FlyDNSConfigPtrOutput) Options() FlyDnsOptionArrayOutput {
	return o.ApplyT(func(v *FlyDNSConfig) []FlyDnsOption {
		if v == nil {
			return nil
		}
		return v.Options
	}).(FlyDnsOptionArrayOutput)
}

func (o FlyDNSConfigPtrOutput) Searches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FlyDNSConfig) []string {
		if v == nil {
			return nil
		}
		return v.Searches
	}).(pulumi.StringArrayOutput)
}

func (o FlyDNSConfigPtrOutput) SkipRegistration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FlyDNSConfig) *bool {
		if v == nil {
			return nil
		}
		return v.SkipRegistration
	}).(pulumi.BoolPtrOutput)
}

type FlyDnsForwardRule struct {
	Addr     *string `pulumi:"addr"`
	Basename *string `pulumi:"basename"`
}

// FlyDnsForwardRuleInput is an input type that accepts FlyDnsForwardRuleArgs and FlyDnsForwardRuleOutput values.
// You can construct a concrete instance of `FlyDnsForwardRuleInput` via:
//
//	FlyDnsForwardRuleArgs{...}
type FlyDnsForwardRuleInput interface {
	pulumi.Input

	ToFlyDnsForwardRuleOutput() FlyDnsForwardRuleOutput
	ToFlyDnsForwardRuleOutputWithContext(context.Context) FlyDnsForwardRuleOutput
}

type FlyDnsForwardRuleArgs struct {
	Addr     pulumi.StringPtrInput `pulumi:"addr"`
	Basename pulumi.StringPtrInput `pulumi:"basename"`
}

func (FlyDnsForwardRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyDnsForwardRule)(nil)).Elem()
}

func (i FlyDnsForwardRuleArgs) ToFlyDnsForwardRuleOutput() FlyDnsForwardRuleOutput {
	return i.ToFlyDnsForwardRuleOutputWithContext(context.Background())
}

func (i FlyDnsForwardRuleArgs) ToFlyDnsForwardRuleOutputWithContext(ctx context.Context) FlyDnsForwardRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyDnsForwardRuleOutput)
}

// FlyDnsForwardRuleArrayInput is an input type that accepts FlyDnsForwardRuleArray and FlyDnsForwardRuleArrayOutput values.
// You can construct a concrete instance of `FlyDnsForwardRuleArrayInput` via:
//
//	FlyDnsForwardRuleArray{ FlyDnsForwardRuleArgs{...} }
type FlyDnsForwardRuleArrayInput interface {
	pulumi.Input

	ToFlyDnsForwardRuleArrayOutput() FlyDnsForwardRuleArrayOutput
	ToFlyDnsForwardRuleArrayOutputWithContext(context.Context) FlyDnsForwardRuleArrayOutput
}

type FlyDnsForwardRuleArray []FlyDnsForwardRuleInput

func (FlyDnsForwardRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyDnsForwardRule)(nil)).Elem()
}

func (i FlyDnsForwardRuleArray) ToFlyDnsForwardRuleArrayOutput() FlyDnsForwardRuleArrayOutput {
	return i.ToFlyDnsForwardRuleArrayOutputWithContext(context.Background())
}

func (i FlyDnsForwardRuleArray) ToFlyDnsForwardRuleArrayOutputWithContext(ctx context.Context) FlyDnsForwardRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyDnsForwardRuleArrayOutput)
}

type FlyDnsForwardRuleOutput struct{ *pulumi.OutputState }

func (FlyDnsForwardRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyDnsForwardRule)(nil)).Elem()
}

func (o FlyDnsForwardRuleOutput) ToFlyDnsForwardRuleOutput() FlyDnsForwardRuleOutput {
	return o
}

func (o FlyDnsForwardRuleOutput) ToFlyDnsForwardRuleOutputWithContext(ctx context.Context) FlyDnsForwardRuleOutput {
	return o
}

func (o FlyDnsForwardRuleOutput) Addr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyDnsForwardRule) *string { return v.Addr }).(pulumi.StringPtrOutput)
}

func (o FlyDnsForwardRuleOutput) Basename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyDnsForwardRule) *string { return v.Basename }).(pulumi.StringPtrOutput)
}

type FlyDnsForwardRuleArrayOutput struct{ *pulumi.OutputState }

func (FlyDnsForwardRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyDnsForwardRule)(nil)).Elem()
}

func (o FlyDnsForwardRuleArrayOutput) ToFlyDnsForwardRuleArrayOutput() FlyDnsForwardRuleArrayOutput {
	return o
}

func (o FlyDnsForwardRuleArrayOutput) ToFlyDnsForwardRuleArrayOutputWithContext(ctx context.Context) FlyDnsForwardRuleArrayOutput {
	return o
}

func (o FlyDnsForwardRuleArrayOutput) Index(i pulumi.IntInput) FlyDnsForwardRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlyDnsForwardRule {
		return vs[0].([]FlyDnsForwardRule)[vs[1].(int)]
	}).(FlyDnsForwardRuleOutput)
}

type FlyDnsOption struct {
	Name  *string `pulumi:"name"`
	Value *string `pulumi:"value"`
}

// FlyDnsOptionInput is an input type that accepts FlyDnsOptionArgs and FlyDnsOptionOutput values.
// You can construct a concrete instance of `FlyDnsOptionInput` via:
//
//	FlyDnsOptionArgs{...}
type FlyDnsOptionInput interface {
	pulumi.Input

	ToFlyDnsOptionOutput() FlyDnsOptionOutput
	ToFlyDnsOptionOutputWithContext(context.Context) FlyDnsOptionOutput
}

type FlyDnsOptionArgs struct {
	Name  pulumi.StringPtrInput `pulumi:"name"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (FlyDnsOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyDnsOption)(nil)).Elem()
}

func (i FlyDnsOptionArgs) ToFlyDnsOptionOutput() FlyDnsOptionOutput {
	return i.ToFlyDnsOptionOutputWithContext(context.Background())
}

func (i FlyDnsOptionArgs) ToFlyDnsOptionOutputWithContext(ctx context.Context) FlyDnsOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyDnsOptionOutput)
}

// FlyDnsOptionArrayInput is an input type that accepts FlyDnsOptionArray and FlyDnsOptionArrayOutput values.
// You can construct a concrete instance of `FlyDnsOptionArrayInput` via:
//
//	FlyDnsOptionArray{ FlyDnsOptionArgs{...} }
type FlyDnsOptionArrayInput interface {
	pulumi.Input

	ToFlyDnsOptionArrayOutput() FlyDnsOptionArrayOutput
	ToFlyDnsOptionArrayOutputWithContext(context.Context) FlyDnsOptionArrayOutput
}

type FlyDnsOptionArray []FlyDnsOptionInput

func (FlyDnsOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyDnsOption)(nil)).Elem()
}

func (i FlyDnsOptionArray) ToFlyDnsOptionArrayOutput() FlyDnsOptionArrayOutput {
	return i.ToFlyDnsOptionArrayOutputWithContext(context.Background())
}

func (i FlyDnsOptionArray) ToFlyDnsOptionArrayOutputWithContext(ctx context.Context) FlyDnsOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyDnsOptionArrayOutput)
}

type FlyDnsOptionOutput struct{ *pulumi.OutputState }

func (FlyDnsOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyDnsOption)(nil)).Elem()
}

func (o FlyDnsOptionOutput) ToFlyDnsOptionOutput() FlyDnsOptionOutput {
	return o
}

func (o FlyDnsOptionOutput) ToFlyDnsOptionOutputWithContext(ctx context.Context) FlyDnsOptionOutput {
	return o
}

func (o FlyDnsOptionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyDnsOption) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o FlyDnsOptionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyDnsOption) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type FlyDnsOptionArrayOutput struct{ *pulumi.OutputState }

func (FlyDnsOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyDnsOption)(nil)).Elem()
}

func (o FlyDnsOptionArrayOutput) ToFlyDnsOptionArrayOutput() FlyDnsOptionArrayOutput {
	return o
}

func (o FlyDnsOptionArrayOutput) ToFlyDnsOptionArrayOutputWithContext(ctx context.Context) FlyDnsOptionArrayOutput {
	return o
}

func (o FlyDnsOptionArrayOutput) Index(i pulumi.IntInput) FlyDnsOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlyDnsOption {
		return vs[0].([]FlyDnsOption)[vs[1].(int)]
	}).(FlyDnsOptionOutput)
}

type FlyEnvFrom struct {
	EnvVar   *string `pulumi:"envVar"`
	FieldRef *string `pulumi:"fieldRef"`
}

// FlyEnvFromInput is an input type that accepts FlyEnvFromArgs and FlyEnvFromOutput values.
// You can construct a concrete instance of `FlyEnvFromInput` via:
//
//	FlyEnvFromArgs{...}
type FlyEnvFromInput interface {
	pulumi.Input

	ToFlyEnvFromOutput() FlyEnvFromOutput
	ToFlyEnvFromOutputWithContext(context.Context) FlyEnvFromOutput
}

type FlyEnvFromArgs struct {
	EnvVar   pulumi.StringPtrInput `pulumi:"envVar"`
	FieldRef pulumi.StringPtrInput `pulumi:"fieldRef"`
}

func (FlyEnvFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyEnvFrom)(nil)).Elem()
}

func (i FlyEnvFromArgs) ToFlyEnvFromOutput() FlyEnvFromOutput {
	return i.ToFlyEnvFromOutputWithContext(context.Background())
}

func (i FlyEnvFromArgs) ToFlyEnvFromOutputWithContext(ctx context.Context) FlyEnvFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyEnvFromOutput)
}

// FlyEnvFromArrayInput is an input type that accepts FlyEnvFromArray and FlyEnvFromArrayOutput values.
// You can construct a concrete instance of `FlyEnvFromArrayInput` via:
//
//	FlyEnvFromArray{ FlyEnvFromArgs{...} }
type FlyEnvFromArrayInput interface {
	pulumi.Input

	ToFlyEnvFromArrayOutput() FlyEnvFromArrayOutput
	ToFlyEnvFromArrayOutputWithContext(context.Context) FlyEnvFromArrayOutput
}

type FlyEnvFromArray []FlyEnvFromInput

func (FlyEnvFromArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyEnvFrom)(nil)).Elem()
}

func (i FlyEnvFromArray) ToFlyEnvFromArrayOutput() FlyEnvFromArrayOutput {
	return i.ToFlyEnvFromArrayOutputWithContext(context.Background())
}

func (i FlyEnvFromArray) ToFlyEnvFromArrayOutputWithContext(ctx context.Context) FlyEnvFromArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyEnvFromArrayOutput)
}

type FlyEnvFromOutput struct{ *pulumi.OutputState }

func (FlyEnvFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyEnvFrom)(nil)).Elem()
}

func (o FlyEnvFromOutput) ToFlyEnvFromOutput() FlyEnvFromOutput {
	return o
}

func (o FlyEnvFromOutput) ToFlyEnvFromOutputWithContext(ctx context.Context) FlyEnvFromOutput {
	return o
}

func (o FlyEnvFromOutput) EnvVar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyEnvFrom) *string { return v.EnvVar }).(pulumi.StringPtrOutput)
}

func (o FlyEnvFromOutput) FieldRef() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyEnvFrom) *string { return v.FieldRef }).(pulumi.StringPtrOutput)
}

type FlyEnvFromArrayOutput struct{ *pulumi.OutputState }

func (FlyEnvFromArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyEnvFrom)(nil)).Elem()
}

func (o FlyEnvFromArrayOutput) ToFlyEnvFromArrayOutput() FlyEnvFromArrayOutput {
	return o
}

func (o FlyEnvFromArrayOutput) ToFlyEnvFromArrayOutputWithContext(ctx context.Context) FlyEnvFromArrayOutput {
	return o
}

func (o FlyEnvFromArrayOutput) Index(i pulumi.IntInput) FlyEnvFromOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlyEnvFrom {
		return vs[0].([]FlyEnvFrom)[vs[1].(int)]
	}).(FlyEnvFromOutput)
}

type FlyExecHealthcheck struct {
	Command []string `pulumi:"command"`
}

// FlyExecHealthcheckInput is an input type that accepts FlyExecHealthcheckArgs and FlyExecHealthcheckOutput values.
// You can construct a concrete instance of `FlyExecHealthcheckInput` via:
//
//	FlyExecHealthcheckArgs{...}
type FlyExecHealthcheckInput interface {
	pulumi.Input

	ToFlyExecHealthcheckOutput() FlyExecHealthcheckOutput
	ToFlyExecHealthcheckOutputWithContext(context.Context) FlyExecHealthcheckOutput
}

type FlyExecHealthcheckArgs struct {
	Command pulumi.StringArrayInput `pulumi:"command"`
}

func (FlyExecHealthcheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyExecHealthcheck)(nil)).Elem()
}

func (i FlyExecHealthcheckArgs) ToFlyExecHealthcheckOutput() FlyExecHealthcheckOutput {
	return i.ToFlyExecHealthcheckOutputWithContext(context.Background())
}

func (i FlyExecHealthcheckArgs) ToFlyExecHealthcheckOutputWithContext(ctx context.Context) FlyExecHealthcheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyExecHealthcheckOutput)
}

func (i FlyExecHealthcheckArgs) ToFlyExecHealthcheckPtrOutput() FlyExecHealthcheckPtrOutput {
	return i.ToFlyExecHealthcheckPtrOutputWithContext(context.Background())
}

func (i FlyExecHealthcheckArgs) ToFlyExecHealthcheckPtrOutputWithContext(ctx context.Context) FlyExecHealthcheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyExecHealthcheckOutput).ToFlyExecHealthcheckPtrOutputWithContext(ctx)
}

// FlyExecHealthcheckPtrInput is an input type that accepts FlyExecHealthcheckArgs, FlyExecHealthcheckPtr and FlyExecHealthcheckPtrOutput values.
// You can construct a concrete instance of `FlyExecHealthcheckPtrInput` via:
//
//	        FlyExecHealthcheckArgs{...}
//
//	or:
//
//	        nil
type FlyExecHealthcheckPtrInput interface {
	pulumi.Input

	ToFlyExecHealthcheckPtrOutput() FlyExecHealthcheckPtrOutput
	ToFlyExecHealthcheckPtrOutputWithContext(context.Context) FlyExecHealthcheckPtrOutput
}

type flyExecHealthcheckPtrType FlyExecHealthcheckArgs

func FlyExecHealthcheckPtr(v *FlyExecHealthcheckArgs) FlyExecHealthcheckPtrInput {
	return (*flyExecHealthcheckPtrType)(v)
}

func (*flyExecHealthcheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyExecHealthcheck)(nil)).Elem()
}

func (i *flyExecHealthcheckPtrType) ToFlyExecHealthcheckPtrOutput() FlyExecHealthcheckPtrOutput {
	return i.ToFlyExecHealthcheckPtrOutputWithContext(context.Background())
}

func (i *flyExecHealthcheckPtrType) ToFlyExecHealthcheckPtrOutputWithContext(ctx context.Context) FlyExecHealthcheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyExecHealthcheckPtrOutput)
}

type FlyExecHealthcheckOutput struct{ *pulumi.OutputState }

func (FlyExecHealthcheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyExecHealthcheck)(nil)).Elem()
}

func (o FlyExecHealthcheckOutput) ToFlyExecHealthcheckOutput() FlyExecHealthcheckOutput {
	return o
}

func (o FlyExecHealthcheckOutput) ToFlyExecHealthcheckOutputWithContext(ctx context.Context) FlyExecHealthcheckOutput {
	return o
}

func (o FlyExecHealthcheckOutput) ToFlyExecHealthcheckPtrOutput() FlyExecHealthcheckPtrOutput {
	return o.ToFlyExecHealthcheckPtrOutputWithContext(context.Background())
}

func (o FlyExecHealthcheckOutput) ToFlyExecHealthcheckPtrOutputWithContext(ctx context.Context) FlyExecHealthcheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlyExecHealthcheck) *FlyExecHealthcheck {
		return &v
	}).(FlyExecHealthcheckPtrOutput)
}

func (o FlyExecHealthcheckOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlyExecHealthcheck) []string { return v.Command }).(pulumi.StringArrayOutput)
}

type FlyExecHealthcheckPtrOutput struct{ *pulumi.OutputState }

func (FlyExecHealthcheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyExecHealthcheck)(nil)).Elem()
}

func (o FlyExecHealthcheckPtrOutput) ToFlyExecHealthcheckPtrOutput() FlyExecHealthcheckPtrOutput {
	return o
}

func (o FlyExecHealthcheckPtrOutput) ToFlyExecHealthcheckPtrOutputWithContext(ctx context.Context) FlyExecHealthcheckPtrOutput {
	return o
}

func (o FlyExecHealthcheckPtrOutput) Elem() FlyExecHealthcheckOutput {
	return o.ApplyT(func(v *FlyExecHealthcheck) FlyExecHealthcheck {
		if v != nil {
			return *v
		}
		var ret FlyExecHealthcheck
		return ret
	}).(FlyExecHealthcheckOutput)
}

func (o FlyExecHealthcheckPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FlyExecHealthcheck) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

type FlyFile struct {
	GuestPath  *string `pulumi:"guestPath"`
	Mode       *int    `pulumi:"mode"`
	RawValue   *string `pulumi:"rawValue"`
	SecretName *string `pulumi:"secretName"`
}

// FlyFileInput is an input type that accepts FlyFileArgs and FlyFileOutput values.
// You can construct a concrete instance of `FlyFileInput` via:
//
//	FlyFileArgs{...}
type FlyFileInput interface {
	pulumi.Input

	ToFlyFileOutput() FlyFileOutput
	ToFlyFileOutputWithContext(context.Context) FlyFileOutput
}

type FlyFileArgs struct {
	GuestPath  pulumi.StringPtrInput `pulumi:"guestPath"`
	Mode       pulumi.IntPtrInput    `pulumi:"mode"`
	RawValue   pulumi.StringPtrInput `pulumi:"rawValue"`
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (FlyFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyFile)(nil)).Elem()
}

func (i FlyFileArgs) ToFlyFileOutput() FlyFileOutput {
	return i.ToFlyFileOutputWithContext(context.Background())
}

func (i FlyFileArgs) ToFlyFileOutputWithContext(ctx context.Context) FlyFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyFileOutput)
}

// FlyFileArrayInput is an input type that accepts FlyFileArray and FlyFileArrayOutput values.
// You can construct a concrete instance of `FlyFileArrayInput` via:
//
//	FlyFileArray{ FlyFileArgs{...} }
type FlyFileArrayInput interface {
	pulumi.Input

	ToFlyFileArrayOutput() FlyFileArrayOutput
	ToFlyFileArrayOutputWithContext(context.Context) FlyFileArrayOutput
}

type FlyFileArray []FlyFileInput

func (FlyFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyFile)(nil)).Elem()
}

func (i FlyFileArray) ToFlyFileArrayOutput() FlyFileArrayOutput {
	return i.ToFlyFileArrayOutputWithContext(context.Background())
}

func (i FlyFileArray) ToFlyFileArrayOutputWithContext(ctx context.Context) FlyFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyFileArrayOutput)
}

type FlyFileOutput struct{ *pulumi.OutputState }

func (FlyFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyFile)(nil)).Elem()
}

func (o FlyFileOutput) ToFlyFileOutput() FlyFileOutput {
	return o
}

func (o FlyFileOutput) ToFlyFileOutputWithContext(ctx context.Context) FlyFileOutput {
	return o
}

func (o FlyFileOutput) GuestPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyFile) *string { return v.GuestPath }).(pulumi.StringPtrOutput)
}

func (o FlyFileOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyFile) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

func (o FlyFileOutput) RawValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyFile) *string { return v.RawValue }).(pulumi.StringPtrOutput)
}

func (o FlyFileOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyFile) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type FlyFileArrayOutput struct{ *pulumi.OutputState }

func (FlyFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyFile)(nil)).Elem()
}

func (o FlyFileArrayOutput) ToFlyFileArrayOutput() FlyFileArrayOutput {
	return o
}

func (o FlyFileArrayOutput) ToFlyFileArrayOutputWithContext(ctx context.Context) FlyFileArrayOutput {
	return o
}

func (o FlyFileArrayOutput) Index(i pulumi.IntInput) FlyFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlyFile {
		return vs[0].([]FlyFile)[vs[1].(int)]
	}).(FlyFileOutput)
}

type FlyHTTPHealthcheck struct {
	Headers       []FlyMachineHTTPHeader `pulumi:"headers"`
	Method        *string                `pulumi:"method"`
	Path          *string                `pulumi:"path"`
	Port          *int                   `pulumi:"port"`
	Scheme        *string                `pulumi:"scheme"`
	TlsServerName *string                `pulumi:"tlsServerName"`
	TlsSkipVerify *bool                  `pulumi:"tlsSkipVerify"`
}

// FlyHTTPHealthcheckInput is an input type that accepts FlyHTTPHealthcheckArgs and FlyHTTPHealthcheckOutput values.
// You can construct a concrete instance of `FlyHTTPHealthcheckInput` via:
//
//	FlyHTTPHealthcheckArgs{...}
type FlyHTTPHealthcheckInput interface {
	pulumi.Input

	ToFlyHTTPHealthcheckOutput() FlyHTTPHealthcheckOutput
	ToFlyHTTPHealthcheckOutputWithContext(context.Context) FlyHTTPHealthcheckOutput
}

type FlyHTTPHealthcheckArgs struct {
	Headers       FlyMachineHTTPHeaderArrayInput `pulumi:"headers"`
	Method        pulumi.StringPtrInput          `pulumi:"method"`
	Path          pulumi.StringPtrInput          `pulumi:"path"`
	Port          pulumi.IntPtrInput             `pulumi:"port"`
	Scheme        pulumi.StringPtrInput          `pulumi:"scheme"`
	TlsServerName pulumi.StringPtrInput          `pulumi:"tlsServerName"`
	TlsSkipVerify pulumi.BoolPtrInput            `pulumi:"tlsSkipVerify"`
}

func (FlyHTTPHealthcheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyHTTPHealthcheck)(nil)).Elem()
}

func (i FlyHTTPHealthcheckArgs) ToFlyHTTPHealthcheckOutput() FlyHTTPHealthcheckOutput {
	return i.ToFlyHTTPHealthcheckOutputWithContext(context.Background())
}

func (i FlyHTTPHealthcheckArgs) ToFlyHTTPHealthcheckOutputWithContext(ctx context.Context) FlyHTTPHealthcheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyHTTPHealthcheckOutput)
}

func (i FlyHTTPHealthcheckArgs) ToFlyHTTPHealthcheckPtrOutput() FlyHTTPHealthcheckPtrOutput {
	return i.ToFlyHTTPHealthcheckPtrOutputWithContext(context.Background())
}

func (i FlyHTTPHealthcheckArgs) ToFlyHTTPHealthcheckPtrOutputWithContext(ctx context.Context) FlyHTTPHealthcheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyHTTPHealthcheckOutput).ToFlyHTTPHealthcheckPtrOutputWithContext(ctx)
}

// FlyHTTPHealthcheckPtrInput is an input type that accepts FlyHTTPHealthcheckArgs, FlyHTTPHealthcheckPtr and FlyHTTPHealthcheckPtrOutput values.
// You can construct a concrete instance of `FlyHTTPHealthcheckPtrInput` via:
//
//	        FlyHTTPHealthcheckArgs{...}
//
//	or:
//
//	        nil
type FlyHTTPHealthcheckPtrInput interface {
	pulumi.Input

	ToFlyHTTPHealthcheckPtrOutput() FlyHTTPHealthcheckPtrOutput
	ToFlyHTTPHealthcheckPtrOutputWithContext(context.Context) FlyHTTPHealthcheckPtrOutput
}

type flyHTTPHealthcheckPtrType FlyHTTPHealthcheckArgs

func FlyHTTPHealthcheckPtr(v *FlyHTTPHealthcheckArgs) FlyHTTPHealthcheckPtrInput {
	return (*flyHTTPHealthcheckPtrType)(v)
}

func (*flyHTTPHealthcheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyHTTPHealthcheck)(nil)).Elem()
}

func (i *flyHTTPHealthcheckPtrType) ToFlyHTTPHealthcheckPtrOutput() FlyHTTPHealthcheckPtrOutput {
	return i.ToFlyHTTPHealthcheckPtrOutputWithContext(context.Background())
}

func (i *flyHTTPHealthcheckPtrType) ToFlyHTTPHealthcheckPtrOutputWithContext(ctx context.Context) FlyHTTPHealthcheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyHTTPHealthcheckPtrOutput)
}

type FlyHTTPHealthcheckOutput struct{ *pulumi.OutputState }

func (FlyHTTPHealthcheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyHTTPHealthcheck)(nil)).Elem()
}

func (o FlyHTTPHealthcheckOutput) ToFlyHTTPHealthcheckOutput() FlyHTTPHealthcheckOutput {
	return o
}

func (o FlyHTTPHealthcheckOutput) ToFlyHTTPHealthcheckOutputWithContext(ctx context.Context) FlyHTTPHealthcheckOutput {
	return o
}

func (o FlyHTTPHealthcheckOutput) ToFlyHTTPHealthcheckPtrOutput() FlyHTTPHealthcheckPtrOutput {
	return o.ToFlyHTTPHealthcheckPtrOutputWithContext(context.Background())
}

func (o FlyHTTPHealthcheckOutput) ToFlyHTTPHealthcheckPtrOutputWithContext(ctx context.Context) FlyHTTPHealthcheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlyHTTPHealthcheck) *FlyHTTPHealthcheck {
		return &v
	}).(FlyHTTPHealthcheckPtrOutput)
}

func (o FlyHTTPHealthcheckOutput) Headers() FlyMachineHTTPHeaderArrayOutput {
	return o.ApplyT(func(v FlyHTTPHealthcheck) []FlyMachineHTTPHeader { return v.Headers }).(FlyMachineHTTPHeaderArrayOutput)
}

func (o FlyHTTPHealthcheckOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyHTTPHealthcheck) *string { return v.Method }).(pulumi.StringPtrOutput)
}

func (o FlyHTTPHealthcheckOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyHTTPHealthcheck) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o FlyHTTPHealthcheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyHTTPHealthcheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o FlyHTTPHealthcheckOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyHTTPHealthcheck) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

func (o FlyHTTPHealthcheckOutput) TlsServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyHTTPHealthcheck) *string { return v.TlsServerName }).(pulumi.StringPtrOutput)
}

func (o FlyHTTPHealthcheckOutput) TlsSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FlyHTTPHealthcheck) *bool { return v.TlsSkipVerify }).(pulumi.BoolPtrOutput)
}

type FlyHTTPHealthcheckPtrOutput struct{ *pulumi.OutputState }

func (FlyHTTPHealthcheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyHTTPHealthcheck)(nil)).Elem()
}

func (o FlyHTTPHealthcheckPtrOutput) ToFlyHTTPHealthcheckPtrOutput() FlyHTTPHealthcheckPtrOutput {
	return o
}

func (o FlyHTTPHealthcheckPtrOutput) ToFlyHTTPHealthcheckPtrOutputWithContext(ctx context.Context) FlyHTTPHealthcheckPtrOutput {
	return o
}

func (o FlyHTTPHealthcheckPtrOutput) Elem() FlyHTTPHealthcheckOutput {
	return o.ApplyT(func(v *FlyHTTPHealthcheck) FlyHTTPHealthcheck {
		if v != nil {
			return *v
		}
		var ret FlyHTTPHealthcheck
		return ret
	}).(FlyHTTPHealthcheckOutput)
}

func (o FlyHTTPHealthcheckPtrOutput) Headers() FlyMachineHTTPHeaderArrayOutput {
	return o.ApplyT(func(v *FlyHTTPHealthcheck) []FlyMachineHTTPHeader {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(FlyMachineHTTPHeaderArrayOutput)
}

func (o FlyHTTPHealthcheckPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlyHTTPHealthcheck) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

func (o FlyHTTPHealthcheckPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlyHTTPHealthcheck) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

func (o FlyHTTPHealthcheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlyHTTPHealthcheck) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

func (o FlyHTTPHealthcheckPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlyHTTPHealthcheck) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

func (o FlyHTTPHealthcheckPtrOutput) TlsServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlyHTTPHealthcheck) *string {
		if v == nil {
			return nil
		}
		return v.TlsServerName
	}).(pulumi.StringPtrOutput)
}

func (o FlyHTTPHealthcheckPtrOutput) TlsSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FlyHTTPHealthcheck) *bool {
		if v == nil {
			return nil
		}
		return v.TlsSkipVerify
	}).(pulumi.BoolPtrOutput)
}

type FlyHTTPOptions struct {
	Compress           *bool                   `pulumi:"compress"`
	H2Backend          *bool                   `pulumi:"h2Backend"`
	HeadersReadTimeout *int                    `pulumi:"headersReadTimeout"`
	IdleTimeout        *int                    `pulumi:"idleTimeout"`
	Response           *FlyHTTPResponseOptions `pulumi:"response"`
}

// FlyHTTPOptionsInput is an input type that accepts FlyHTTPOptionsArgs and FlyHTTPOptionsOutput values.
// You can construct a concrete instance of `FlyHTTPOptionsInput` via:
//
//	FlyHTTPOptionsArgs{...}
type FlyHTTPOptionsInput interface {
	pulumi.Input

	ToFlyHTTPOptionsOutput() FlyHTTPOptionsOutput
	ToFlyHTTPOptionsOutputWithContext(context.Context) FlyHTTPOptionsOutput
}

type FlyHTTPOptionsArgs struct {
	Compress           pulumi.BoolPtrInput            `pulumi:"compress"`
	H2Backend          pulumi.BoolPtrInput            `pulumi:"h2Backend"`
	HeadersReadTimeout pulumi.IntPtrInput             `pulumi:"headersReadTimeout"`
	IdleTimeout        pulumi.IntPtrInput             `pulumi:"idleTimeout"`
	Response           FlyHTTPResponseOptionsPtrInput `pulumi:"response"`
}

func (FlyHTTPOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyHTTPOptions)(nil)).Elem()
}

func (i FlyHTTPOptionsArgs) ToFlyHTTPOptionsOutput() FlyHTTPOptionsOutput {
	return i.ToFlyHTTPOptionsOutputWithContext(context.Background())
}

func (i FlyHTTPOptionsArgs) ToFlyHTTPOptionsOutputWithContext(ctx context.Context) FlyHTTPOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyHTTPOptionsOutput)
}

func (i FlyHTTPOptionsArgs) ToFlyHTTPOptionsPtrOutput() FlyHTTPOptionsPtrOutput {
	return i.ToFlyHTTPOptionsPtrOutputWithContext(context.Background())
}

func (i FlyHTTPOptionsArgs) ToFlyHTTPOptionsPtrOutputWithContext(ctx context.Context) FlyHTTPOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyHTTPOptionsOutput).ToFlyHTTPOptionsPtrOutputWithContext(ctx)
}

// FlyHTTPOptionsPtrInput is an input type that accepts FlyHTTPOptionsArgs, FlyHTTPOptionsPtr and FlyHTTPOptionsPtrOutput values.
// You can construct a concrete instance of `FlyHTTPOptionsPtrInput` via:
//
//	        FlyHTTPOptionsArgs{...}
//
//	or:
//
//	        nil
type FlyHTTPOptionsPtrInput interface {
	pulumi.Input

	ToFlyHTTPOptionsPtrOutput() FlyHTTPOptionsPtrOutput
	ToFlyHTTPOptionsPtrOutputWithContext(context.Context) FlyHTTPOptionsPtrOutput
}

type flyHTTPOptionsPtrType FlyHTTPOptionsArgs

func FlyHTTPOptionsPtr(v *FlyHTTPOptionsArgs) FlyHTTPOptionsPtrInput {
	return (*flyHTTPOptionsPtrType)(v)
}

func (*flyHTTPOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyHTTPOptions)(nil)).Elem()
}

func (i *flyHTTPOptionsPtrType) ToFlyHTTPOptionsPtrOutput() FlyHTTPOptionsPtrOutput {
	return i.ToFlyHTTPOptionsPtrOutputWithContext(context.Background())
}

func (i *flyHTTPOptionsPtrType) ToFlyHTTPOptionsPtrOutputWithContext(ctx context.Context) FlyHTTPOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyHTTPOptionsPtrOutput)
}

type FlyHTTPOptionsOutput struct{ *pulumi.OutputState }

func (FlyHTTPOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyHTTPOptions)(nil)).Elem()
}

func (o FlyHTTPOptionsOutput) ToFlyHTTPOptionsOutput() FlyHTTPOptionsOutput {
	return o
}

func (o FlyHTTPOptionsOutput) ToFlyHTTPOptionsOutputWithContext(ctx context.Context) FlyHTTPOptionsOutput {
	return o
}

func (o FlyHTTPOptionsOutput) ToFlyHTTPOptionsPtrOutput() FlyHTTPOptionsPtrOutput {
	return o.ToFlyHTTPOptionsPtrOutputWithContext(context.Background())
}

func (o FlyHTTPOptionsOutput) ToFlyHTTPOptionsPtrOutputWithContext(ctx context.Context) FlyHTTPOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlyHTTPOptions) *FlyHTTPOptions {
		return &v
	}).(FlyHTTPOptionsPtrOutput)
}

func (o FlyHTTPOptionsOutput) Compress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FlyHTTPOptions) *bool { return v.Compress }).(pulumi.BoolPtrOutput)
}

func (o FlyHTTPOptionsOutput) H2Backend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FlyHTTPOptions) *bool { return v.H2Backend }).(pulumi.BoolPtrOutput)
}

func (o FlyHTTPOptionsOutput) HeadersReadTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyHTTPOptions) *int { return v.HeadersReadTimeout }).(pulumi.IntPtrOutput)
}

func (o FlyHTTPOptionsOutput) IdleTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyHTTPOptions) *int { return v.IdleTimeout }).(pulumi.IntPtrOutput)
}

func (o FlyHTTPOptionsOutput) Response() FlyHTTPResponseOptionsPtrOutput {
	return o.ApplyT(func(v FlyHTTPOptions) *FlyHTTPResponseOptions { return v.Response }).(FlyHTTPResponseOptionsPtrOutput)
}

type FlyHTTPOptionsPtrOutput struct{ *pulumi.OutputState }

func (FlyHTTPOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyHTTPOptions)(nil)).Elem()
}

func (o FlyHTTPOptionsPtrOutput) ToFlyHTTPOptionsPtrOutput() FlyHTTPOptionsPtrOutput {
	return o
}

func (o FlyHTTPOptionsPtrOutput) ToFlyHTTPOptionsPtrOutputWithContext(ctx context.Context) FlyHTTPOptionsPtrOutput {
	return o
}

func (o FlyHTTPOptionsPtrOutput) Elem() FlyHTTPOptionsOutput {
	return o.ApplyT(func(v *FlyHTTPOptions) FlyHTTPOptions {
		if v != nil {
			return *v
		}
		var ret FlyHTTPOptions
		return ret
	}).(FlyHTTPOptionsOutput)
}

func (o FlyHTTPOptionsPtrOutput) Compress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FlyHTTPOptions) *bool {
		if v == nil {
			return nil
		}
		return v.Compress
	}).(pulumi.BoolPtrOutput)
}

func (o FlyHTTPOptionsPtrOutput) H2Backend() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FlyHTTPOptions) *bool {
		if v == nil {
			return nil
		}
		return v.H2Backend
	}).(pulumi.BoolPtrOutput)
}

func (o FlyHTTPOptionsPtrOutput) HeadersReadTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlyHTTPOptions) *int {
		if v == nil {
			return nil
		}
		return v.HeadersReadTimeout
	}).(pulumi.IntPtrOutput)
}

func (o FlyHTTPOptionsPtrOutput) IdleTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlyHTTPOptions) *int {
		if v == nil {
			return nil
		}
		return v.IdleTimeout
	}).(pulumi.IntPtrOutput)
}

func (o FlyHTTPOptionsPtrOutput) Response() FlyHTTPResponseOptionsPtrOutput {
	return o.ApplyT(func(v *FlyHTTPOptions) *FlyHTTPResponseOptions {
		if v == nil {
			return nil
		}
		return v.Response
	}).(FlyHTTPResponseOptionsPtrOutput)
}

type FlyHTTPResponseOptions struct {
	Headers  map[string]map[string]interface{} `pulumi:"headers"`
	Pristine *bool                             `pulumi:"pristine"`
}

// FlyHTTPResponseOptionsInput is an input type that accepts FlyHTTPResponseOptionsArgs and FlyHTTPResponseOptionsOutput values.
// You can construct a concrete instance of `FlyHTTPResponseOptionsInput` via:
//
//	FlyHTTPResponseOptionsArgs{...}
type FlyHTTPResponseOptionsInput interface {
	pulumi.Input

	ToFlyHTTPResponseOptionsOutput() FlyHTTPResponseOptionsOutput
	ToFlyHTTPResponseOptionsOutputWithContext(context.Context) FlyHTTPResponseOptionsOutput
}

type FlyHTTPResponseOptionsArgs struct {
	Headers  pulumi.MapMapInput  `pulumi:"headers"`
	Pristine pulumi.BoolPtrInput `pulumi:"pristine"`
}

func (FlyHTTPResponseOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyHTTPResponseOptions)(nil)).Elem()
}

func (i FlyHTTPResponseOptionsArgs) ToFlyHTTPResponseOptionsOutput() FlyHTTPResponseOptionsOutput {
	return i.ToFlyHTTPResponseOptionsOutputWithContext(context.Background())
}

func (i FlyHTTPResponseOptionsArgs) ToFlyHTTPResponseOptionsOutputWithContext(ctx context.Context) FlyHTTPResponseOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyHTTPResponseOptionsOutput)
}

func (i FlyHTTPResponseOptionsArgs) ToFlyHTTPResponseOptionsPtrOutput() FlyHTTPResponseOptionsPtrOutput {
	return i.ToFlyHTTPResponseOptionsPtrOutputWithContext(context.Background())
}

func (i FlyHTTPResponseOptionsArgs) ToFlyHTTPResponseOptionsPtrOutputWithContext(ctx context.Context) FlyHTTPResponseOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyHTTPResponseOptionsOutput).ToFlyHTTPResponseOptionsPtrOutputWithContext(ctx)
}

// FlyHTTPResponseOptionsPtrInput is an input type that accepts FlyHTTPResponseOptionsArgs, FlyHTTPResponseOptionsPtr and FlyHTTPResponseOptionsPtrOutput values.
// You can construct a concrete instance of `FlyHTTPResponseOptionsPtrInput` via:
//
//	        FlyHTTPResponseOptionsArgs{...}
//
//	or:
//
//	        nil
type FlyHTTPResponseOptionsPtrInput interface {
	pulumi.Input

	ToFlyHTTPResponseOptionsPtrOutput() FlyHTTPResponseOptionsPtrOutput
	ToFlyHTTPResponseOptionsPtrOutputWithContext(context.Context) FlyHTTPResponseOptionsPtrOutput
}

type flyHTTPResponseOptionsPtrType FlyHTTPResponseOptionsArgs

func FlyHTTPResponseOptionsPtr(v *FlyHTTPResponseOptionsArgs) FlyHTTPResponseOptionsPtrInput {
	return (*flyHTTPResponseOptionsPtrType)(v)
}

func (*flyHTTPResponseOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyHTTPResponseOptions)(nil)).Elem()
}

func (i *flyHTTPResponseOptionsPtrType) ToFlyHTTPResponseOptionsPtrOutput() FlyHTTPResponseOptionsPtrOutput {
	return i.ToFlyHTTPResponseOptionsPtrOutputWithContext(context.Background())
}

func (i *flyHTTPResponseOptionsPtrType) ToFlyHTTPResponseOptionsPtrOutputWithContext(ctx context.Context) FlyHTTPResponseOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyHTTPResponseOptionsPtrOutput)
}

type FlyHTTPResponseOptionsOutput struct{ *pulumi.OutputState }

func (FlyHTTPResponseOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyHTTPResponseOptions)(nil)).Elem()
}

func (o FlyHTTPResponseOptionsOutput) ToFlyHTTPResponseOptionsOutput() FlyHTTPResponseOptionsOutput {
	return o
}

func (o FlyHTTPResponseOptionsOutput) ToFlyHTTPResponseOptionsOutputWithContext(ctx context.Context) FlyHTTPResponseOptionsOutput {
	return o
}

func (o FlyHTTPResponseOptionsOutput) ToFlyHTTPResponseOptionsPtrOutput() FlyHTTPResponseOptionsPtrOutput {
	return o.ToFlyHTTPResponseOptionsPtrOutputWithContext(context.Background())
}

func (o FlyHTTPResponseOptionsOutput) ToFlyHTTPResponseOptionsPtrOutputWithContext(ctx context.Context) FlyHTTPResponseOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlyHTTPResponseOptions) *FlyHTTPResponseOptions {
		return &v
	}).(FlyHTTPResponseOptionsPtrOutput)
}

func (o FlyHTTPResponseOptionsOutput) Headers() pulumi.MapMapOutput {
	return o.ApplyT(func(v FlyHTTPResponseOptions) map[string]map[string]interface{} { return v.Headers }).(pulumi.MapMapOutput)
}

func (o FlyHTTPResponseOptionsOutput) Pristine() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FlyHTTPResponseOptions) *bool { return v.Pristine }).(pulumi.BoolPtrOutput)
}

type FlyHTTPResponseOptionsPtrOutput struct{ *pulumi.OutputState }

func (FlyHTTPResponseOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyHTTPResponseOptions)(nil)).Elem()
}

func (o FlyHTTPResponseOptionsPtrOutput) ToFlyHTTPResponseOptionsPtrOutput() FlyHTTPResponseOptionsPtrOutput {
	return o
}

func (o FlyHTTPResponseOptionsPtrOutput) ToFlyHTTPResponseOptionsPtrOutputWithContext(ctx context.Context) FlyHTTPResponseOptionsPtrOutput {
	return o
}

func (o FlyHTTPResponseOptionsPtrOutput) Elem() FlyHTTPResponseOptionsOutput {
	return o.ApplyT(func(v *FlyHTTPResponseOptions) FlyHTTPResponseOptions {
		if v != nil {
			return *v
		}
		var ret FlyHTTPResponseOptions
		return ret
	}).(FlyHTTPResponseOptionsOutput)
}

func (o FlyHTTPResponseOptionsPtrOutput) Headers() pulumi.MapMapOutput {
	return o.ApplyT(func(v *FlyHTTPResponseOptions) map[string]map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.MapMapOutput)
}

func (o FlyHTTPResponseOptionsPtrOutput) Pristine() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FlyHTTPResponseOptions) *bool {
		if v == nil {
			return nil
		}
		return v.Pristine
	}).(pulumi.BoolPtrOutput)
}

type FlyMachineCheck struct {
	GracePeriod   *string                `pulumi:"gracePeriod"`
	Headers       []FlyMachineHTTPHeader `pulumi:"headers"`
	Interval      *string                `pulumi:"interval"`
	Kind          *string                `pulumi:"kind"`
	Method        *string                `pulumi:"method"`
	Path          *string                `pulumi:"path"`
	Port          *int                   `pulumi:"port"`
	Protocol      *string                `pulumi:"protocol"`
	Timeout       *string                `pulumi:"timeout"`
	TlsServerName *string                `pulumi:"tlsServerName"`
	TlsSkipVerify *bool                  `pulumi:"tlsSkipVerify"`
	Type          *string                `pulumi:"type"`
}

// FlyMachineCheckInput is an input type that accepts FlyMachineCheckArgs and FlyMachineCheckOutput values.
// You can construct a concrete instance of `FlyMachineCheckInput` via:
//
//	FlyMachineCheckArgs{...}
type FlyMachineCheckInput interface {
	pulumi.Input

	ToFlyMachineCheckOutput() FlyMachineCheckOutput
	ToFlyMachineCheckOutputWithContext(context.Context) FlyMachineCheckOutput
}

type FlyMachineCheckArgs struct {
	GracePeriod   pulumi.StringPtrInput          `pulumi:"gracePeriod"`
	Headers       FlyMachineHTTPHeaderArrayInput `pulumi:"headers"`
	Interval      pulumi.StringPtrInput          `pulumi:"interval"`
	Kind          pulumi.StringPtrInput          `pulumi:"kind"`
	Method        pulumi.StringPtrInput          `pulumi:"method"`
	Path          pulumi.StringPtrInput          `pulumi:"path"`
	Port          pulumi.IntPtrInput             `pulumi:"port"`
	Protocol      pulumi.StringPtrInput          `pulumi:"protocol"`
	Timeout       pulumi.StringPtrInput          `pulumi:"timeout"`
	TlsServerName pulumi.StringPtrInput          `pulumi:"tlsServerName"`
	TlsSkipVerify pulumi.BoolPtrInput            `pulumi:"tlsSkipVerify"`
	Type          pulumi.StringPtrInput          `pulumi:"type"`
}

func (FlyMachineCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachineCheck)(nil)).Elem()
}

func (i FlyMachineCheckArgs) ToFlyMachineCheckOutput() FlyMachineCheckOutput {
	return i.ToFlyMachineCheckOutputWithContext(context.Background())
}

func (i FlyMachineCheckArgs) ToFlyMachineCheckOutputWithContext(ctx context.Context) FlyMachineCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineCheckOutput)
}

// FlyMachineCheckArrayInput is an input type that accepts FlyMachineCheckArray and FlyMachineCheckArrayOutput values.
// You can construct a concrete instance of `FlyMachineCheckArrayInput` via:
//
//	FlyMachineCheckArray{ FlyMachineCheckArgs{...} }
type FlyMachineCheckArrayInput interface {
	pulumi.Input

	ToFlyMachineCheckArrayOutput() FlyMachineCheckArrayOutput
	ToFlyMachineCheckArrayOutputWithContext(context.Context) FlyMachineCheckArrayOutput
}

type FlyMachineCheckArray []FlyMachineCheckInput

func (FlyMachineCheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyMachineCheck)(nil)).Elem()
}

func (i FlyMachineCheckArray) ToFlyMachineCheckArrayOutput() FlyMachineCheckArrayOutput {
	return i.ToFlyMachineCheckArrayOutputWithContext(context.Background())
}

func (i FlyMachineCheckArray) ToFlyMachineCheckArrayOutputWithContext(ctx context.Context) FlyMachineCheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineCheckArrayOutput)
}

// FlyMachineCheckMapInput is an input type that accepts FlyMachineCheckMap and FlyMachineCheckMapOutput values.
// You can construct a concrete instance of `FlyMachineCheckMapInput` via:
//
//	FlyMachineCheckMap{ "key": FlyMachineCheckArgs{...} }
type FlyMachineCheckMapInput interface {
	pulumi.Input

	ToFlyMachineCheckMapOutput() FlyMachineCheckMapOutput
	ToFlyMachineCheckMapOutputWithContext(context.Context) FlyMachineCheckMapOutput
}

type FlyMachineCheckMap map[string]FlyMachineCheckInput

func (FlyMachineCheckMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FlyMachineCheck)(nil)).Elem()
}

func (i FlyMachineCheckMap) ToFlyMachineCheckMapOutput() FlyMachineCheckMapOutput {
	return i.ToFlyMachineCheckMapOutputWithContext(context.Background())
}

func (i FlyMachineCheckMap) ToFlyMachineCheckMapOutputWithContext(ctx context.Context) FlyMachineCheckMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineCheckMapOutput)
}

type FlyMachineCheckOutput struct{ *pulumi.OutputState }

func (FlyMachineCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachineCheck)(nil)).Elem()
}

func (o FlyMachineCheckOutput) ToFlyMachineCheckOutput() FlyMachineCheckOutput {
	return o
}

func (o FlyMachineCheckOutput) ToFlyMachineCheckOutputWithContext(ctx context.Context) FlyMachineCheckOutput {
	return o
}

func (o FlyMachineCheckOutput) GracePeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineCheck) *string { return v.GracePeriod }).(pulumi.StringPtrOutput)
}

func (o FlyMachineCheckOutput) Headers() FlyMachineHTTPHeaderArrayOutput {
	return o.ApplyT(func(v FlyMachineCheck) []FlyMachineHTTPHeader { return v.Headers }).(FlyMachineHTTPHeaderArrayOutput)
}

func (o FlyMachineCheckOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineCheck) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

func (o FlyMachineCheckOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineCheck) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o FlyMachineCheckOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineCheck) *string { return v.Method }).(pulumi.StringPtrOutput)
}

func (o FlyMachineCheckOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineCheck) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o FlyMachineCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyMachineCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o FlyMachineCheckOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineCheck) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o FlyMachineCheckOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineCheck) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

func (o FlyMachineCheckOutput) TlsServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineCheck) *string { return v.TlsServerName }).(pulumi.StringPtrOutput)
}

func (o FlyMachineCheckOutput) TlsSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FlyMachineCheck) *bool { return v.TlsSkipVerify }).(pulumi.BoolPtrOutput)
}

func (o FlyMachineCheckOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineCheck) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type FlyMachineCheckArrayOutput struct{ *pulumi.OutputState }

func (FlyMachineCheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyMachineCheck)(nil)).Elem()
}

func (o FlyMachineCheckArrayOutput) ToFlyMachineCheckArrayOutput() FlyMachineCheckArrayOutput {
	return o
}

func (o FlyMachineCheckArrayOutput) ToFlyMachineCheckArrayOutputWithContext(ctx context.Context) FlyMachineCheckArrayOutput {
	return o
}

func (o FlyMachineCheckArrayOutput) Index(i pulumi.IntInput) FlyMachineCheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlyMachineCheck {
		return vs[0].([]FlyMachineCheck)[vs[1].(int)]
	}).(FlyMachineCheckOutput)
}

type FlyMachineCheckMapOutput struct{ *pulumi.OutputState }

func (FlyMachineCheckMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FlyMachineCheck)(nil)).Elem()
}

func (o FlyMachineCheckMapOutput) ToFlyMachineCheckMapOutput() FlyMachineCheckMapOutput {
	return o
}

func (o FlyMachineCheckMapOutput) ToFlyMachineCheckMapOutputWithContext(ctx context.Context) FlyMachineCheckMapOutput {
	return o
}

func (o FlyMachineCheckMapOutput) MapIndex(k pulumi.StringInput) FlyMachineCheckOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) FlyMachineCheck {
		return vs[0].(map[string]FlyMachineCheck)[vs[1].(string)]
	}).(FlyMachineCheckOutput)
}

type FlyMachineConfig struct {
	AutoDestroy *bool                      `pulumi:"autoDestroy"`
	Checks      map[string]FlyMachineCheck `pulumi:"checks"`
	Containers  []FlyContainerConfig       `pulumi:"containers"`
	Dns         *FlyDNSConfig              `pulumi:"dns"`
	Env         map[string]string          `pulumi:"env"`
	Files       []FlyFile                  `pulumi:"files"`
	Guest       *FlyMachineGuest           `pulumi:"guest"`
	Image       string                     `pulumi:"image"`
	Init        *FlyMachineInit            `pulumi:"init"`
	Metadata    map[string]string          `pulumi:"metadata"`
	Metrics     *FlyMachineMetrics         `pulumi:"metrics"`
	Mounts      []FlyMachineMount          `pulumi:"mounts"`
	Processes   []FlyMachineProcess        `pulumi:"processes"`
	Restart     *FlyMachineRestart         `pulumi:"restart"`
	Schedule    *string                    `pulumi:"schedule"`
	Services    []FlyMachineService        `pulumi:"services"`
	Standbys    []string                   `pulumi:"standbys"`
	Statics     []FlyStatic                `pulumi:"statics"`
	StopConfig  *FlyStopConfig             `pulumi:"stopConfig"`
	Volumes     []FlyVolumeConfig          `pulumi:"volumes"`
}

// FlyMachineConfigInput is an input type that accepts FlyMachineConfigArgs and FlyMachineConfigOutput values.
// You can construct a concrete instance of `FlyMachineConfigInput` via:
//
//	FlyMachineConfigArgs{...}
type FlyMachineConfigInput interface {
	pulumi.Input

	ToFlyMachineConfigOutput() FlyMachineConfigOutput
	ToFlyMachineConfigOutputWithContext(context.Context) FlyMachineConfigOutput
}

type FlyMachineConfigArgs struct {
	AutoDestroy pulumi.BoolPtrInput          `pulumi:"autoDestroy"`
	Checks      FlyMachineCheckMapInput      `pulumi:"checks"`
	Containers  FlyContainerConfigArrayInput `pulumi:"containers"`
	Dns         FlyDNSConfigPtrInput         `pulumi:"dns"`
	Env         pulumi.StringMapInput        `pulumi:"env"`
	Files       FlyFileArrayInput            `pulumi:"files"`
	Guest       FlyMachineGuestPtrInput      `pulumi:"guest"`
	Image       pulumi.StringInput           `pulumi:"image"`
	Init        FlyMachineInitPtrInput       `pulumi:"init"`
	Metadata    pulumi.StringMapInput        `pulumi:"metadata"`
	Metrics     FlyMachineMetricsPtrInput    `pulumi:"metrics"`
	Mounts      FlyMachineMountArrayInput    `pulumi:"mounts"`
	Processes   FlyMachineProcessArrayInput  `pulumi:"processes"`
	Restart     FlyMachineRestartPtrInput    `pulumi:"restart"`
	Schedule    pulumi.StringPtrInput        `pulumi:"schedule"`
	Services    FlyMachineServiceArrayInput  `pulumi:"services"`
	Standbys    pulumi.StringArrayInput      `pulumi:"standbys"`
	Statics     FlyStaticArrayInput          `pulumi:"statics"`
	StopConfig  FlyStopConfigPtrInput        `pulumi:"stopConfig"`
	Volumes     FlyVolumeConfigArrayInput    `pulumi:"volumes"`
}

func (FlyMachineConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachineConfig)(nil)).Elem()
}

func (i FlyMachineConfigArgs) ToFlyMachineConfigOutput() FlyMachineConfigOutput {
	return i.ToFlyMachineConfigOutputWithContext(context.Background())
}

func (i FlyMachineConfigArgs) ToFlyMachineConfigOutputWithContext(ctx context.Context) FlyMachineConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineConfigOutput)
}

type FlyMachineConfigOutput struct{ *pulumi.OutputState }

func (FlyMachineConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachineConfig)(nil)).Elem()
}

func (o FlyMachineConfigOutput) ToFlyMachineConfigOutput() FlyMachineConfigOutput {
	return o
}

func (o FlyMachineConfigOutput) ToFlyMachineConfigOutputWithContext(ctx context.Context) FlyMachineConfigOutput {
	return o
}

func (o FlyMachineConfigOutput) AutoDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FlyMachineConfig) *bool { return v.AutoDestroy }).(pulumi.BoolPtrOutput)
}

func (o FlyMachineConfigOutput) Checks() FlyMachineCheckMapOutput {
	return o.ApplyT(func(v FlyMachineConfig) map[string]FlyMachineCheck { return v.Checks }).(FlyMachineCheckMapOutput)
}

func (o FlyMachineConfigOutput) Containers() FlyContainerConfigArrayOutput {
	return o.ApplyT(func(v FlyMachineConfig) []FlyContainerConfig { return v.Containers }).(FlyContainerConfigArrayOutput)
}

func (o FlyMachineConfigOutput) Dns() FlyDNSConfigPtrOutput {
	return o.ApplyT(func(v FlyMachineConfig) *FlyDNSConfig { return v.Dns }).(FlyDNSConfigPtrOutput)
}

func (o FlyMachineConfigOutput) Env() pulumi.StringMapOutput {
	return o.ApplyT(func(v FlyMachineConfig) map[string]string { return v.Env }).(pulumi.StringMapOutput)
}

func (o FlyMachineConfigOutput) Files() FlyFileArrayOutput {
	return o.ApplyT(func(v FlyMachineConfig) []FlyFile { return v.Files }).(FlyFileArrayOutput)
}

func (o FlyMachineConfigOutput) Guest() FlyMachineGuestPtrOutput {
	return o.ApplyT(func(v FlyMachineConfig) *FlyMachineGuest { return v.Guest }).(FlyMachineGuestPtrOutput)
}

func (o FlyMachineConfigOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v FlyMachineConfig) string { return v.Image }).(pulumi.StringOutput)
}

func (o FlyMachineConfigOutput) Init() FlyMachineInitPtrOutput {
	return o.ApplyT(func(v FlyMachineConfig) *FlyMachineInit { return v.Init }).(FlyMachineInitPtrOutput)
}

func (o FlyMachineConfigOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v FlyMachineConfig) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

func (o FlyMachineConfigOutput) Metrics() FlyMachineMetricsPtrOutput {
	return o.ApplyT(func(v FlyMachineConfig) *FlyMachineMetrics { return v.Metrics }).(FlyMachineMetricsPtrOutput)
}

func (o FlyMachineConfigOutput) Mounts() FlyMachineMountArrayOutput {
	return o.ApplyT(func(v FlyMachineConfig) []FlyMachineMount { return v.Mounts }).(FlyMachineMountArrayOutput)
}

func (o FlyMachineConfigOutput) Processes() FlyMachineProcessArrayOutput {
	return o.ApplyT(func(v FlyMachineConfig) []FlyMachineProcess { return v.Processes }).(FlyMachineProcessArrayOutput)
}

func (o FlyMachineConfigOutput) Restart() FlyMachineRestartPtrOutput {
	return o.ApplyT(func(v FlyMachineConfig) *FlyMachineRestart { return v.Restart }).(FlyMachineRestartPtrOutput)
}

func (o FlyMachineConfigOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineConfig) *string { return v.Schedule }).(pulumi.StringPtrOutput)
}

func (o FlyMachineConfigOutput) Services() FlyMachineServiceArrayOutput {
	return o.ApplyT(func(v FlyMachineConfig) []FlyMachineService { return v.Services }).(FlyMachineServiceArrayOutput)
}

func (o FlyMachineConfigOutput) Standbys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlyMachineConfig) []string { return v.Standbys }).(pulumi.StringArrayOutput)
}

func (o FlyMachineConfigOutput) Statics() FlyStaticArrayOutput {
	return o.ApplyT(func(v FlyMachineConfig) []FlyStatic { return v.Statics }).(FlyStaticArrayOutput)
}

func (o FlyMachineConfigOutput) StopConfig() FlyStopConfigPtrOutput {
	return o.ApplyT(func(v FlyMachineConfig) *FlyStopConfig { return v.StopConfig }).(FlyStopConfigPtrOutput)
}

func (o FlyMachineConfigOutput) Volumes() FlyVolumeConfigArrayOutput {
	return o.ApplyT(func(v FlyMachineConfig) []FlyVolumeConfig { return v.Volumes }).(FlyVolumeConfigArrayOutput)
}

type FlyMachineConfigPtrOutput struct{ *pulumi.OutputState }

func (FlyMachineConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyMachineConfig)(nil)).Elem()
}

func (o FlyMachineConfigPtrOutput) ToFlyMachineConfigPtrOutput() FlyMachineConfigPtrOutput {
	return o
}

func (o FlyMachineConfigPtrOutput) ToFlyMachineConfigPtrOutputWithContext(ctx context.Context) FlyMachineConfigPtrOutput {
	return o
}

func (o FlyMachineConfigPtrOutput) Elem() FlyMachineConfigOutput {
	return o.ApplyT(func(v *FlyMachineConfig) FlyMachineConfig {
		if v != nil {
			return *v
		}
		var ret FlyMachineConfig
		return ret
	}).(FlyMachineConfigOutput)
}

func (o FlyMachineConfigPtrOutput) AutoDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FlyMachineConfig) *bool {
		if v == nil {
			return nil
		}
		return v.AutoDestroy
	}).(pulumi.BoolPtrOutput)
}

func (o FlyMachineConfigPtrOutput) Checks() FlyMachineCheckMapOutput {
	return o.ApplyT(func(v *FlyMachineConfig) map[string]FlyMachineCheck {
		if v == nil {
			return nil
		}
		return v.Checks
	}).(FlyMachineCheckMapOutput)
}

func (o FlyMachineConfigPtrOutput) Containers() FlyContainerConfigArrayOutput {
	return o.ApplyT(func(v *FlyMachineConfig) []FlyContainerConfig {
		if v == nil {
			return nil
		}
		return v.Containers
	}).(FlyContainerConfigArrayOutput)
}

func (o FlyMachineConfigPtrOutput) Dns() FlyDNSConfigPtrOutput {
	return o.ApplyT(func(v *FlyMachineConfig) *FlyDNSConfig {
		if v == nil {
			return nil
		}
		return v.Dns
	}).(FlyDNSConfigPtrOutput)
}

func (o FlyMachineConfigPtrOutput) Env() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FlyMachineConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Env
	}).(pulumi.StringMapOutput)
}

func (o FlyMachineConfigPtrOutput) Files() FlyFileArrayOutput {
	return o.ApplyT(func(v *FlyMachineConfig) []FlyFile {
		if v == nil {
			return nil
		}
		return v.Files
	}).(FlyFileArrayOutput)
}

func (o FlyMachineConfigPtrOutput) Guest() FlyMachineGuestPtrOutput {
	return o.ApplyT(func(v *FlyMachineConfig) *FlyMachineGuest {
		if v == nil {
			return nil
		}
		return v.Guest
	}).(FlyMachineGuestPtrOutput)
}

func (o FlyMachineConfigPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlyMachineConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Image
	}).(pulumi.StringPtrOutput)
}

func (o FlyMachineConfigPtrOutput) Init() FlyMachineInitPtrOutput {
	return o.ApplyT(func(v *FlyMachineConfig) *FlyMachineInit {
		if v == nil {
			return nil
		}
		return v.Init
	}).(FlyMachineInitPtrOutput)
}

func (o FlyMachineConfigPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FlyMachineConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

func (o FlyMachineConfigPtrOutput) Metrics() FlyMachineMetricsPtrOutput {
	return o.ApplyT(func(v *FlyMachineConfig) *FlyMachineMetrics {
		if v == nil {
			return nil
		}
		return v.Metrics
	}).(FlyMachineMetricsPtrOutput)
}

func (o FlyMachineConfigPtrOutput) Mounts() FlyMachineMountArrayOutput {
	return o.ApplyT(func(v *FlyMachineConfig) []FlyMachineMount {
		if v == nil {
			return nil
		}
		return v.Mounts
	}).(FlyMachineMountArrayOutput)
}

func (o FlyMachineConfigPtrOutput) Processes() FlyMachineProcessArrayOutput {
	return o.ApplyT(func(v *FlyMachineConfig) []FlyMachineProcess {
		if v == nil {
			return nil
		}
		return v.Processes
	}).(FlyMachineProcessArrayOutput)
}

func (o FlyMachineConfigPtrOutput) Restart() FlyMachineRestartPtrOutput {
	return o.ApplyT(func(v *FlyMachineConfig) *FlyMachineRestart {
		if v == nil {
			return nil
		}
		return v.Restart
	}).(FlyMachineRestartPtrOutput)
}

func (o FlyMachineConfigPtrOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlyMachineConfig) *string {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(pulumi.StringPtrOutput)
}

func (o FlyMachineConfigPtrOutput) Services() FlyMachineServiceArrayOutput {
	return o.ApplyT(func(v *FlyMachineConfig) []FlyMachineService {
		if v == nil {
			return nil
		}
		return v.Services
	}).(FlyMachineServiceArrayOutput)
}

func (o FlyMachineConfigPtrOutput) Standbys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FlyMachineConfig) []string {
		if v == nil {
			return nil
		}
		return v.Standbys
	}).(pulumi.StringArrayOutput)
}

func (o FlyMachineConfigPtrOutput) Statics() FlyStaticArrayOutput {
	return o.ApplyT(func(v *FlyMachineConfig) []FlyStatic {
		if v == nil {
			return nil
		}
		return v.Statics
	}).(FlyStaticArrayOutput)
}

func (o FlyMachineConfigPtrOutput) StopConfig() FlyStopConfigPtrOutput {
	return o.ApplyT(func(v *FlyMachineConfig) *FlyStopConfig {
		if v == nil {
			return nil
		}
		return v.StopConfig
	}).(FlyStopConfigPtrOutput)
}

func (o FlyMachineConfigPtrOutput) Volumes() FlyVolumeConfigArrayOutput {
	return o.ApplyT(func(v *FlyMachineConfig) []FlyVolumeConfig {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(FlyVolumeConfigArrayOutput)
}

type FlyMachineGuest struct {
	CpuKind          string   `pulumi:"cpuKind"`
	Cpus             int      `pulumi:"cpus"`
	GpuKind          *string  `pulumi:"gpuKind"`
	Gpus             *int     `pulumi:"gpus"`
	HostDedicationId *string  `pulumi:"hostDedicationId"`
	KernelArgs       []string `pulumi:"kernelArgs"`
	MemoryMb         int      `pulumi:"memoryMb"`
}

// FlyMachineGuestInput is an input type that accepts FlyMachineGuestArgs and FlyMachineGuestOutput values.
// You can construct a concrete instance of `FlyMachineGuestInput` via:
//
//	FlyMachineGuestArgs{...}
type FlyMachineGuestInput interface {
	pulumi.Input

	ToFlyMachineGuestOutput() FlyMachineGuestOutput
	ToFlyMachineGuestOutputWithContext(context.Context) FlyMachineGuestOutput
}

type FlyMachineGuestArgs struct {
	CpuKind          pulumi.StringInput      `pulumi:"cpuKind"`
	Cpus             pulumi.IntInput         `pulumi:"cpus"`
	GpuKind          pulumi.StringPtrInput   `pulumi:"gpuKind"`
	Gpus             pulumi.IntPtrInput      `pulumi:"gpus"`
	HostDedicationId pulumi.StringPtrInput   `pulumi:"hostDedicationId"`
	KernelArgs       pulumi.StringArrayInput `pulumi:"kernelArgs"`
	MemoryMb         pulumi.IntInput         `pulumi:"memoryMb"`
}

func (FlyMachineGuestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachineGuest)(nil)).Elem()
}

func (i FlyMachineGuestArgs) ToFlyMachineGuestOutput() FlyMachineGuestOutput {
	return i.ToFlyMachineGuestOutputWithContext(context.Background())
}

func (i FlyMachineGuestArgs) ToFlyMachineGuestOutputWithContext(ctx context.Context) FlyMachineGuestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineGuestOutput)
}

func (i FlyMachineGuestArgs) ToFlyMachineGuestPtrOutput() FlyMachineGuestPtrOutput {
	return i.ToFlyMachineGuestPtrOutputWithContext(context.Background())
}

func (i FlyMachineGuestArgs) ToFlyMachineGuestPtrOutputWithContext(ctx context.Context) FlyMachineGuestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineGuestOutput).ToFlyMachineGuestPtrOutputWithContext(ctx)
}

// FlyMachineGuestPtrInput is an input type that accepts FlyMachineGuestArgs, FlyMachineGuestPtr and FlyMachineGuestPtrOutput values.
// You can construct a concrete instance of `FlyMachineGuestPtrInput` via:
//
//	        FlyMachineGuestArgs{...}
//
//	or:
//
//	        nil
type FlyMachineGuestPtrInput interface {
	pulumi.Input

	ToFlyMachineGuestPtrOutput() FlyMachineGuestPtrOutput
	ToFlyMachineGuestPtrOutputWithContext(context.Context) FlyMachineGuestPtrOutput
}

type flyMachineGuestPtrType FlyMachineGuestArgs

func FlyMachineGuestPtr(v *FlyMachineGuestArgs) FlyMachineGuestPtrInput {
	return (*flyMachineGuestPtrType)(v)
}

func (*flyMachineGuestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyMachineGuest)(nil)).Elem()
}

func (i *flyMachineGuestPtrType) ToFlyMachineGuestPtrOutput() FlyMachineGuestPtrOutput {
	return i.ToFlyMachineGuestPtrOutputWithContext(context.Background())
}

func (i *flyMachineGuestPtrType) ToFlyMachineGuestPtrOutputWithContext(ctx context.Context) FlyMachineGuestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineGuestPtrOutput)
}

type FlyMachineGuestOutput struct{ *pulumi.OutputState }

func (FlyMachineGuestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachineGuest)(nil)).Elem()
}

func (o FlyMachineGuestOutput) ToFlyMachineGuestOutput() FlyMachineGuestOutput {
	return o
}

func (o FlyMachineGuestOutput) ToFlyMachineGuestOutputWithContext(ctx context.Context) FlyMachineGuestOutput {
	return o
}

func (o FlyMachineGuestOutput) ToFlyMachineGuestPtrOutput() FlyMachineGuestPtrOutput {
	return o.ToFlyMachineGuestPtrOutputWithContext(context.Background())
}

func (o FlyMachineGuestOutput) ToFlyMachineGuestPtrOutputWithContext(ctx context.Context) FlyMachineGuestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlyMachineGuest) *FlyMachineGuest {
		return &v
	}).(FlyMachineGuestPtrOutput)
}

func (o FlyMachineGuestOutput) CpuKind() pulumi.StringOutput {
	return o.ApplyT(func(v FlyMachineGuest) string { return v.CpuKind }).(pulumi.StringOutput)
}

func (o FlyMachineGuestOutput) Cpus() pulumi.IntOutput {
	return o.ApplyT(func(v FlyMachineGuest) int { return v.Cpus }).(pulumi.IntOutput)
}

func (o FlyMachineGuestOutput) GpuKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineGuest) *string { return v.GpuKind }).(pulumi.StringPtrOutput)
}

func (o FlyMachineGuestOutput) Gpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyMachineGuest) *int { return v.Gpus }).(pulumi.IntPtrOutput)
}

func (o FlyMachineGuestOutput) HostDedicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineGuest) *string { return v.HostDedicationId }).(pulumi.StringPtrOutput)
}

func (o FlyMachineGuestOutput) KernelArgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlyMachineGuest) []string { return v.KernelArgs }).(pulumi.StringArrayOutput)
}

func (o FlyMachineGuestOutput) MemoryMb() pulumi.IntOutput {
	return o.ApplyT(func(v FlyMachineGuest) int { return v.MemoryMb }).(pulumi.IntOutput)
}

type FlyMachineGuestPtrOutput struct{ *pulumi.OutputState }

func (FlyMachineGuestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyMachineGuest)(nil)).Elem()
}

func (o FlyMachineGuestPtrOutput) ToFlyMachineGuestPtrOutput() FlyMachineGuestPtrOutput {
	return o
}

func (o FlyMachineGuestPtrOutput) ToFlyMachineGuestPtrOutputWithContext(ctx context.Context) FlyMachineGuestPtrOutput {
	return o
}

func (o FlyMachineGuestPtrOutput) Elem() FlyMachineGuestOutput {
	return o.ApplyT(func(v *FlyMachineGuest) FlyMachineGuest {
		if v != nil {
			return *v
		}
		var ret FlyMachineGuest
		return ret
	}).(FlyMachineGuestOutput)
}

func (o FlyMachineGuestPtrOutput) CpuKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlyMachineGuest) *string {
		if v == nil {
			return nil
		}
		return &v.CpuKind
	}).(pulumi.StringPtrOutput)
}

func (o FlyMachineGuestPtrOutput) Cpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlyMachineGuest) *int {
		if v == nil {
			return nil
		}
		return &v.Cpus
	}).(pulumi.IntPtrOutput)
}

func (o FlyMachineGuestPtrOutput) GpuKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlyMachineGuest) *string {
		if v == nil {
			return nil
		}
		return v.GpuKind
	}).(pulumi.StringPtrOutput)
}

func (o FlyMachineGuestPtrOutput) Gpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlyMachineGuest) *int {
		if v == nil {
			return nil
		}
		return v.Gpus
	}).(pulumi.IntPtrOutput)
}

func (o FlyMachineGuestPtrOutput) HostDedicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlyMachineGuest) *string {
		if v == nil {
			return nil
		}
		return v.HostDedicationId
	}).(pulumi.StringPtrOutput)
}

func (o FlyMachineGuestPtrOutput) KernelArgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FlyMachineGuest) []string {
		if v == nil {
			return nil
		}
		return v.KernelArgs
	}).(pulumi.StringArrayOutput)
}

func (o FlyMachineGuestPtrOutput) MemoryMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlyMachineGuest) *int {
		if v == nil {
			return nil
		}
		return &v.MemoryMb
	}).(pulumi.IntPtrOutput)
}

type FlyMachineHTTPHeader struct {
	Name   *string  `pulumi:"name"`
	Values []string `pulumi:"values"`
}

// FlyMachineHTTPHeaderInput is an input type that accepts FlyMachineHTTPHeaderArgs and FlyMachineHTTPHeaderOutput values.
// You can construct a concrete instance of `FlyMachineHTTPHeaderInput` via:
//
//	FlyMachineHTTPHeaderArgs{...}
type FlyMachineHTTPHeaderInput interface {
	pulumi.Input

	ToFlyMachineHTTPHeaderOutput() FlyMachineHTTPHeaderOutput
	ToFlyMachineHTTPHeaderOutputWithContext(context.Context) FlyMachineHTTPHeaderOutput
}

type FlyMachineHTTPHeaderArgs struct {
	Name   pulumi.StringPtrInput   `pulumi:"name"`
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (FlyMachineHTTPHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachineHTTPHeader)(nil)).Elem()
}

func (i FlyMachineHTTPHeaderArgs) ToFlyMachineHTTPHeaderOutput() FlyMachineHTTPHeaderOutput {
	return i.ToFlyMachineHTTPHeaderOutputWithContext(context.Background())
}

func (i FlyMachineHTTPHeaderArgs) ToFlyMachineHTTPHeaderOutputWithContext(ctx context.Context) FlyMachineHTTPHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineHTTPHeaderOutput)
}

// FlyMachineHTTPHeaderArrayInput is an input type that accepts FlyMachineHTTPHeaderArray and FlyMachineHTTPHeaderArrayOutput values.
// You can construct a concrete instance of `FlyMachineHTTPHeaderArrayInput` via:
//
//	FlyMachineHTTPHeaderArray{ FlyMachineHTTPHeaderArgs{...} }
type FlyMachineHTTPHeaderArrayInput interface {
	pulumi.Input

	ToFlyMachineHTTPHeaderArrayOutput() FlyMachineHTTPHeaderArrayOutput
	ToFlyMachineHTTPHeaderArrayOutputWithContext(context.Context) FlyMachineHTTPHeaderArrayOutput
}

type FlyMachineHTTPHeaderArray []FlyMachineHTTPHeaderInput

func (FlyMachineHTTPHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyMachineHTTPHeader)(nil)).Elem()
}

func (i FlyMachineHTTPHeaderArray) ToFlyMachineHTTPHeaderArrayOutput() FlyMachineHTTPHeaderArrayOutput {
	return i.ToFlyMachineHTTPHeaderArrayOutputWithContext(context.Background())
}

func (i FlyMachineHTTPHeaderArray) ToFlyMachineHTTPHeaderArrayOutputWithContext(ctx context.Context) FlyMachineHTTPHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineHTTPHeaderArrayOutput)
}

type FlyMachineHTTPHeaderOutput struct{ *pulumi.OutputState }

func (FlyMachineHTTPHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachineHTTPHeader)(nil)).Elem()
}

func (o FlyMachineHTTPHeaderOutput) ToFlyMachineHTTPHeaderOutput() FlyMachineHTTPHeaderOutput {
	return o
}

func (o FlyMachineHTTPHeaderOutput) ToFlyMachineHTTPHeaderOutputWithContext(ctx context.Context) FlyMachineHTTPHeaderOutput {
	return o
}

func (o FlyMachineHTTPHeaderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineHTTPHeader) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o FlyMachineHTTPHeaderOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlyMachineHTTPHeader) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type FlyMachineHTTPHeaderArrayOutput struct{ *pulumi.OutputState }

func (FlyMachineHTTPHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyMachineHTTPHeader)(nil)).Elem()
}

func (o FlyMachineHTTPHeaderArrayOutput) ToFlyMachineHTTPHeaderArrayOutput() FlyMachineHTTPHeaderArrayOutput {
	return o
}

func (o FlyMachineHTTPHeaderArrayOutput) ToFlyMachineHTTPHeaderArrayOutputWithContext(ctx context.Context) FlyMachineHTTPHeaderArrayOutput {
	return o
}

func (o FlyMachineHTTPHeaderArrayOutput) Index(i pulumi.IntInput) FlyMachineHTTPHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlyMachineHTTPHeader {
		return vs[0].([]FlyMachineHTTPHeader)[vs[1].(int)]
	}).(FlyMachineHTTPHeaderOutput)
}

type FlyMachineInit struct {
	Cmd        []string `pulumi:"cmd"`
	Entrypoint []string `pulumi:"entrypoint"`
	Exec       []string `pulumi:"exec"`
	KernelArgs []string `pulumi:"kernelArgs"`
	SwapSizeMb *int     `pulumi:"swapSizeMb"`
	Tty        *bool    `pulumi:"tty"`
}

// FlyMachineInitInput is an input type that accepts FlyMachineInitArgs and FlyMachineInitOutput values.
// You can construct a concrete instance of `FlyMachineInitInput` via:
//
//	FlyMachineInitArgs{...}
type FlyMachineInitInput interface {
	pulumi.Input

	ToFlyMachineInitOutput() FlyMachineInitOutput
	ToFlyMachineInitOutputWithContext(context.Context) FlyMachineInitOutput
}

type FlyMachineInitArgs struct {
	Cmd        pulumi.StringArrayInput `pulumi:"cmd"`
	Entrypoint pulumi.StringArrayInput `pulumi:"entrypoint"`
	Exec       pulumi.StringArrayInput `pulumi:"exec"`
	KernelArgs pulumi.StringArrayInput `pulumi:"kernelArgs"`
	SwapSizeMb pulumi.IntPtrInput      `pulumi:"swapSizeMb"`
	Tty        pulumi.BoolPtrInput     `pulumi:"tty"`
}

func (FlyMachineInitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachineInit)(nil)).Elem()
}

func (i FlyMachineInitArgs) ToFlyMachineInitOutput() FlyMachineInitOutput {
	return i.ToFlyMachineInitOutputWithContext(context.Background())
}

func (i FlyMachineInitArgs) ToFlyMachineInitOutputWithContext(ctx context.Context) FlyMachineInitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineInitOutput)
}

func (i FlyMachineInitArgs) ToFlyMachineInitPtrOutput() FlyMachineInitPtrOutput {
	return i.ToFlyMachineInitPtrOutputWithContext(context.Background())
}

func (i FlyMachineInitArgs) ToFlyMachineInitPtrOutputWithContext(ctx context.Context) FlyMachineInitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineInitOutput).ToFlyMachineInitPtrOutputWithContext(ctx)
}

// FlyMachineInitPtrInput is an input type that accepts FlyMachineInitArgs, FlyMachineInitPtr and FlyMachineInitPtrOutput values.
// You can construct a concrete instance of `FlyMachineInitPtrInput` via:
//
//	        FlyMachineInitArgs{...}
//
//	or:
//
//	        nil
type FlyMachineInitPtrInput interface {
	pulumi.Input

	ToFlyMachineInitPtrOutput() FlyMachineInitPtrOutput
	ToFlyMachineInitPtrOutputWithContext(context.Context) FlyMachineInitPtrOutput
}

type flyMachineInitPtrType FlyMachineInitArgs

func FlyMachineInitPtr(v *FlyMachineInitArgs) FlyMachineInitPtrInput {
	return (*flyMachineInitPtrType)(v)
}

func (*flyMachineInitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyMachineInit)(nil)).Elem()
}

func (i *flyMachineInitPtrType) ToFlyMachineInitPtrOutput() FlyMachineInitPtrOutput {
	return i.ToFlyMachineInitPtrOutputWithContext(context.Background())
}

func (i *flyMachineInitPtrType) ToFlyMachineInitPtrOutputWithContext(ctx context.Context) FlyMachineInitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineInitPtrOutput)
}

type FlyMachineInitOutput struct{ *pulumi.OutputState }

func (FlyMachineInitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachineInit)(nil)).Elem()
}

func (o FlyMachineInitOutput) ToFlyMachineInitOutput() FlyMachineInitOutput {
	return o
}

func (o FlyMachineInitOutput) ToFlyMachineInitOutputWithContext(ctx context.Context) FlyMachineInitOutput {
	return o
}

func (o FlyMachineInitOutput) ToFlyMachineInitPtrOutput() FlyMachineInitPtrOutput {
	return o.ToFlyMachineInitPtrOutputWithContext(context.Background())
}

func (o FlyMachineInitOutput) ToFlyMachineInitPtrOutputWithContext(ctx context.Context) FlyMachineInitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlyMachineInit) *FlyMachineInit {
		return &v
	}).(FlyMachineInitPtrOutput)
}

func (o FlyMachineInitOutput) Cmd() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlyMachineInit) []string { return v.Cmd }).(pulumi.StringArrayOutput)
}

func (o FlyMachineInitOutput) Entrypoint() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlyMachineInit) []string { return v.Entrypoint }).(pulumi.StringArrayOutput)
}

func (o FlyMachineInitOutput) Exec() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlyMachineInit) []string { return v.Exec }).(pulumi.StringArrayOutput)
}

func (o FlyMachineInitOutput) KernelArgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlyMachineInit) []string { return v.KernelArgs }).(pulumi.StringArrayOutput)
}

func (o FlyMachineInitOutput) SwapSizeMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyMachineInit) *int { return v.SwapSizeMb }).(pulumi.IntPtrOutput)
}

func (o FlyMachineInitOutput) Tty() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FlyMachineInit) *bool { return v.Tty }).(pulumi.BoolPtrOutput)
}

type FlyMachineInitPtrOutput struct{ *pulumi.OutputState }

func (FlyMachineInitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyMachineInit)(nil)).Elem()
}

func (o FlyMachineInitPtrOutput) ToFlyMachineInitPtrOutput() FlyMachineInitPtrOutput {
	return o
}

func (o FlyMachineInitPtrOutput) ToFlyMachineInitPtrOutputWithContext(ctx context.Context) FlyMachineInitPtrOutput {
	return o
}

func (o FlyMachineInitPtrOutput) Elem() FlyMachineInitOutput {
	return o.ApplyT(func(v *FlyMachineInit) FlyMachineInit {
		if v != nil {
			return *v
		}
		var ret FlyMachineInit
		return ret
	}).(FlyMachineInitOutput)
}

func (o FlyMachineInitPtrOutput) Cmd() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FlyMachineInit) []string {
		if v == nil {
			return nil
		}
		return v.Cmd
	}).(pulumi.StringArrayOutput)
}

func (o FlyMachineInitPtrOutput) Entrypoint() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FlyMachineInit) []string {
		if v == nil {
			return nil
		}
		return v.Entrypoint
	}).(pulumi.StringArrayOutput)
}

func (o FlyMachineInitPtrOutput) Exec() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FlyMachineInit) []string {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(pulumi.StringArrayOutput)
}

func (o FlyMachineInitPtrOutput) KernelArgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FlyMachineInit) []string {
		if v == nil {
			return nil
		}
		return v.KernelArgs
	}).(pulumi.StringArrayOutput)
}

func (o FlyMachineInitPtrOutput) SwapSizeMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlyMachineInit) *int {
		if v == nil {
			return nil
		}
		return v.SwapSizeMb
	}).(pulumi.IntPtrOutput)
}

func (o FlyMachineInitPtrOutput) Tty() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FlyMachineInit) *bool {
		if v == nil {
			return nil
		}
		return v.Tty
	}).(pulumi.BoolPtrOutput)
}

type FlyMachineMetrics struct {
	Https *bool   `pulumi:"https"`
	Path  *string `pulumi:"path"`
	Port  *int    `pulumi:"port"`
}

// FlyMachineMetricsInput is an input type that accepts FlyMachineMetricsArgs and FlyMachineMetricsOutput values.
// You can construct a concrete instance of `FlyMachineMetricsInput` via:
//
//	FlyMachineMetricsArgs{...}
type FlyMachineMetricsInput interface {
	pulumi.Input

	ToFlyMachineMetricsOutput() FlyMachineMetricsOutput
	ToFlyMachineMetricsOutputWithContext(context.Context) FlyMachineMetricsOutput
}

type FlyMachineMetricsArgs struct {
	Https pulumi.BoolPtrInput   `pulumi:"https"`
	Path  pulumi.StringPtrInput `pulumi:"path"`
	Port  pulumi.IntPtrInput    `pulumi:"port"`
}

func (FlyMachineMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachineMetrics)(nil)).Elem()
}

func (i FlyMachineMetricsArgs) ToFlyMachineMetricsOutput() FlyMachineMetricsOutput {
	return i.ToFlyMachineMetricsOutputWithContext(context.Background())
}

func (i FlyMachineMetricsArgs) ToFlyMachineMetricsOutputWithContext(ctx context.Context) FlyMachineMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineMetricsOutput)
}

func (i FlyMachineMetricsArgs) ToFlyMachineMetricsPtrOutput() FlyMachineMetricsPtrOutput {
	return i.ToFlyMachineMetricsPtrOutputWithContext(context.Background())
}

func (i FlyMachineMetricsArgs) ToFlyMachineMetricsPtrOutputWithContext(ctx context.Context) FlyMachineMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineMetricsOutput).ToFlyMachineMetricsPtrOutputWithContext(ctx)
}

// FlyMachineMetricsPtrInput is an input type that accepts FlyMachineMetricsArgs, FlyMachineMetricsPtr and FlyMachineMetricsPtrOutput values.
// You can construct a concrete instance of `FlyMachineMetricsPtrInput` via:
//
//	        FlyMachineMetricsArgs{...}
//
//	or:
//
//	        nil
type FlyMachineMetricsPtrInput interface {
	pulumi.Input

	ToFlyMachineMetricsPtrOutput() FlyMachineMetricsPtrOutput
	ToFlyMachineMetricsPtrOutputWithContext(context.Context) FlyMachineMetricsPtrOutput
}

type flyMachineMetricsPtrType FlyMachineMetricsArgs

func FlyMachineMetricsPtr(v *FlyMachineMetricsArgs) FlyMachineMetricsPtrInput {
	return (*flyMachineMetricsPtrType)(v)
}

func (*flyMachineMetricsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyMachineMetrics)(nil)).Elem()
}

func (i *flyMachineMetricsPtrType) ToFlyMachineMetricsPtrOutput() FlyMachineMetricsPtrOutput {
	return i.ToFlyMachineMetricsPtrOutputWithContext(context.Background())
}

func (i *flyMachineMetricsPtrType) ToFlyMachineMetricsPtrOutputWithContext(ctx context.Context) FlyMachineMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineMetricsPtrOutput)
}

type FlyMachineMetricsOutput struct{ *pulumi.OutputState }

func (FlyMachineMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachineMetrics)(nil)).Elem()
}

func (o FlyMachineMetricsOutput) ToFlyMachineMetricsOutput() FlyMachineMetricsOutput {
	return o
}

func (o FlyMachineMetricsOutput) ToFlyMachineMetricsOutputWithContext(ctx context.Context) FlyMachineMetricsOutput {
	return o
}

func (o FlyMachineMetricsOutput) ToFlyMachineMetricsPtrOutput() FlyMachineMetricsPtrOutput {
	return o.ToFlyMachineMetricsPtrOutputWithContext(context.Background())
}

func (o FlyMachineMetricsOutput) ToFlyMachineMetricsPtrOutputWithContext(ctx context.Context) FlyMachineMetricsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlyMachineMetrics) *FlyMachineMetrics {
		return &v
	}).(FlyMachineMetricsPtrOutput)
}

func (o FlyMachineMetricsOutput) Https() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FlyMachineMetrics) *bool { return v.Https }).(pulumi.BoolPtrOutput)
}

func (o FlyMachineMetricsOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineMetrics) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o FlyMachineMetricsOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyMachineMetrics) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type FlyMachineMetricsPtrOutput struct{ *pulumi.OutputState }

func (FlyMachineMetricsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyMachineMetrics)(nil)).Elem()
}

func (o FlyMachineMetricsPtrOutput) ToFlyMachineMetricsPtrOutput() FlyMachineMetricsPtrOutput {
	return o
}

func (o FlyMachineMetricsPtrOutput) ToFlyMachineMetricsPtrOutputWithContext(ctx context.Context) FlyMachineMetricsPtrOutput {
	return o
}

func (o FlyMachineMetricsPtrOutput) Elem() FlyMachineMetricsOutput {
	return o.ApplyT(func(v *FlyMachineMetrics) FlyMachineMetrics {
		if v != nil {
			return *v
		}
		var ret FlyMachineMetrics
		return ret
	}).(FlyMachineMetricsOutput)
}

func (o FlyMachineMetricsPtrOutput) Https() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FlyMachineMetrics) *bool {
		if v == nil {
			return nil
		}
		return v.Https
	}).(pulumi.BoolPtrOutput)
}

func (o FlyMachineMetricsPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlyMachineMetrics) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

func (o FlyMachineMetricsPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlyMachineMetrics) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

type FlyMachineMount struct {
	AddSizeGb              *int    `pulumi:"addSizeGb"`
	Encrypted              *bool   `pulumi:"encrypted"`
	ExtendThresholdPercent *int    `pulumi:"extendThresholdPercent"`
	Name                   *string `pulumi:"name"`
	Path                   *string `pulumi:"path"`
	SizeGb                 *int    `pulumi:"sizeGb"`
	SizeGbLimit            *int    `pulumi:"sizeGbLimit"`
	Volume                 *string `pulumi:"volume"`
}

// FlyMachineMountInput is an input type that accepts FlyMachineMountArgs and FlyMachineMountOutput values.
// You can construct a concrete instance of `FlyMachineMountInput` via:
//
//	FlyMachineMountArgs{...}
type FlyMachineMountInput interface {
	pulumi.Input

	ToFlyMachineMountOutput() FlyMachineMountOutput
	ToFlyMachineMountOutputWithContext(context.Context) FlyMachineMountOutput
}

type FlyMachineMountArgs struct {
	AddSizeGb              pulumi.IntPtrInput    `pulumi:"addSizeGb"`
	Encrypted              pulumi.BoolPtrInput   `pulumi:"encrypted"`
	ExtendThresholdPercent pulumi.IntPtrInput    `pulumi:"extendThresholdPercent"`
	Name                   pulumi.StringPtrInput `pulumi:"name"`
	Path                   pulumi.StringPtrInput `pulumi:"path"`
	SizeGb                 pulumi.IntPtrInput    `pulumi:"sizeGb"`
	SizeGbLimit            pulumi.IntPtrInput    `pulumi:"sizeGbLimit"`
	Volume                 pulumi.StringPtrInput `pulumi:"volume"`
}

func (FlyMachineMountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachineMount)(nil)).Elem()
}

func (i FlyMachineMountArgs) ToFlyMachineMountOutput() FlyMachineMountOutput {
	return i.ToFlyMachineMountOutputWithContext(context.Background())
}

func (i FlyMachineMountArgs) ToFlyMachineMountOutputWithContext(ctx context.Context) FlyMachineMountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineMountOutput)
}

// FlyMachineMountArrayInput is an input type that accepts FlyMachineMountArray and FlyMachineMountArrayOutput values.
// You can construct a concrete instance of `FlyMachineMountArrayInput` via:
//
//	FlyMachineMountArray{ FlyMachineMountArgs{...} }
type FlyMachineMountArrayInput interface {
	pulumi.Input

	ToFlyMachineMountArrayOutput() FlyMachineMountArrayOutput
	ToFlyMachineMountArrayOutputWithContext(context.Context) FlyMachineMountArrayOutput
}

type FlyMachineMountArray []FlyMachineMountInput

func (FlyMachineMountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyMachineMount)(nil)).Elem()
}

func (i FlyMachineMountArray) ToFlyMachineMountArrayOutput() FlyMachineMountArrayOutput {
	return i.ToFlyMachineMountArrayOutputWithContext(context.Background())
}

func (i FlyMachineMountArray) ToFlyMachineMountArrayOutputWithContext(ctx context.Context) FlyMachineMountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineMountArrayOutput)
}

type FlyMachineMountOutput struct{ *pulumi.OutputState }

func (FlyMachineMountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachineMount)(nil)).Elem()
}

func (o FlyMachineMountOutput) ToFlyMachineMountOutput() FlyMachineMountOutput {
	return o
}

func (o FlyMachineMountOutput) ToFlyMachineMountOutputWithContext(ctx context.Context) FlyMachineMountOutput {
	return o
}

func (o FlyMachineMountOutput) AddSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyMachineMount) *int { return v.AddSizeGb }).(pulumi.IntPtrOutput)
}

func (o FlyMachineMountOutput) Encrypted() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FlyMachineMount) *bool { return v.Encrypted }).(pulumi.BoolPtrOutput)
}

func (o FlyMachineMountOutput) ExtendThresholdPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyMachineMount) *int { return v.ExtendThresholdPercent }).(pulumi.IntPtrOutput)
}

func (o FlyMachineMountOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineMount) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o FlyMachineMountOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineMount) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o FlyMachineMountOutput) SizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyMachineMount) *int { return v.SizeGb }).(pulumi.IntPtrOutput)
}

func (o FlyMachineMountOutput) SizeGbLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyMachineMount) *int { return v.SizeGbLimit }).(pulumi.IntPtrOutput)
}

func (o FlyMachineMountOutput) Volume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineMount) *string { return v.Volume }).(pulumi.StringPtrOutput)
}

type FlyMachineMountArrayOutput struct{ *pulumi.OutputState }

func (FlyMachineMountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyMachineMount)(nil)).Elem()
}

func (o FlyMachineMountArrayOutput) ToFlyMachineMountArrayOutput() FlyMachineMountArrayOutput {
	return o
}

func (o FlyMachineMountArrayOutput) ToFlyMachineMountArrayOutputWithContext(ctx context.Context) FlyMachineMountArrayOutput {
	return o
}

func (o FlyMachineMountArrayOutput) Index(i pulumi.IntInput) FlyMachineMountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlyMachineMount {
		return vs[0].([]FlyMachineMount)[vs[1].(int)]
	}).(FlyMachineMountOutput)
}

type FlyMachinePort struct {
	EndPort           *int                  `pulumi:"endPort"`
	ForceHttps        *bool                 `pulumi:"forceHttps"`
	Handlers          []string              `pulumi:"handlers"`
	HttpOptions       *FlyHTTPOptions       `pulumi:"httpOptions"`
	Port              *int                  `pulumi:"port"`
	ProxyProtoOptions *FlyProxyProtoOptions `pulumi:"proxyProtoOptions"`
	StartPort         *int                  `pulumi:"startPort"`
	TlsOptions        *FlyTLSOptions        `pulumi:"tlsOptions"`
}

// FlyMachinePortInput is an input type that accepts FlyMachinePortArgs and FlyMachinePortOutput values.
// You can construct a concrete instance of `FlyMachinePortInput` via:
//
//	FlyMachinePortArgs{...}
type FlyMachinePortInput interface {
	pulumi.Input

	ToFlyMachinePortOutput() FlyMachinePortOutput
	ToFlyMachinePortOutputWithContext(context.Context) FlyMachinePortOutput
}

type FlyMachinePortArgs struct {
	EndPort           pulumi.IntPtrInput           `pulumi:"endPort"`
	ForceHttps        pulumi.BoolPtrInput          `pulumi:"forceHttps"`
	Handlers          pulumi.StringArrayInput      `pulumi:"handlers"`
	HttpOptions       FlyHTTPOptionsPtrInput       `pulumi:"httpOptions"`
	Port              pulumi.IntPtrInput           `pulumi:"port"`
	ProxyProtoOptions FlyProxyProtoOptionsPtrInput `pulumi:"proxyProtoOptions"`
	StartPort         pulumi.IntPtrInput           `pulumi:"startPort"`
	TlsOptions        FlyTLSOptionsPtrInput        `pulumi:"tlsOptions"`
}

func (FlyMachinePortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachinePort)(nil)).Elem()
}

func (i FlyMachinePortArgs) ToFlyMachinePortOutput() FlyMachinePortOutput {
	return i.ToFlyMachinePortOutputWithContext(context.Background())
}

func (i FlyMachinePortArgs) ToFlyMachinePortOutputWithContext(ctx context.Context) FlyMachinePortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachinePortOutput)
}

// FlyMachinePortArrayInput is an input type that accepts FlyMachinePortArray and FlyMachinePortArrayOutput values.
// You can construct a concrete instance of `FlyMachinePortArrayInput` via:
//
//	FlyMachinePortArray{ FlyMachinePortArgs{...} }
type FlyMachinePortArrayInput interface {
	pulumi.Input

	ToFlyMachinePortArrayOutput() FlyMachinePortArrayOutput
	ToFlyMachinePortArrayOutputWithContext(context.Context) FlyMachinePortArrayOutput
}

type FlyMachinePortArray []FlyMachinePortInput

func (FlyMachinePortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyMachinePort)(nil)).Elem()
}

func (i FlyMachinePortArray) ToFlyMachinePortArrayOutput() FlyMachinePortArrayOutput {
	return i.ToFlyMachinePortArrayOutputWithContext(context.Background())
}

func (i FlyMachinePortArray) ToFlyMachinePortArrayOutputWithContext(ctx context.Context) FlyMachinePortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachinePortArrayOutput)
}

type FlyMachinePortOutput struct{ *pulumi.OutputState }

func (FlyMachinePortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachinePort)(nil)).Elem()
}

func (o FlyMachinePortOutput) ToFlyMachinePortOutput() FlyMachinePortOutput {
	return o
}

func (o FlyMachinePortOutput) ToFlyMachinePortOutputWithContext(ctx context.Context) FlyMachinePortOutput {
	return o
}

func (o FlyMachinePortOutput) EndPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyMachinePort) *int { return v.EndPort }).(pulumi.IntPtrOutput)
}

func (o FlyMachinePortOutput) ForceHttps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FlyMachinePort) *bool { return v.ForceHttps }).(pulumi.BoolPtrOutput)
}

func (o FlyMachinePortOutput) Handlers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlyMachinePort) []string { return v.Handlers }).(pulumi.StringArrayOutput)
}

func (o FlyMachinePortOutput) HttpOptions() FlyHTTPOptionsPtrOutput {
	return o.ApplyT(func(v FlyMachinePort) *FlyHTTPOptions { return v.HttpOptions }).(FlyHTTPOptionsPtrOutput)
}

func (o FlyMachinePortOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyMachinePort) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o FlyMachinePortOutput) ProxyProtoOptions() FlyProxyProtoOptionsPtrOutput {
	return o.ApplyT(func(v FlyMachinePort) *FlyProxyProtoOptions { return v.ProxyProtoOptions }).(FlyProxyProtoOptionsPtrOutput)
}

func (o FlyMachinePortOutput) StartPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyMachinePort) *int { return v.StartPort }).(pulumi.IntPtrOutput)
}

func (o FlyMachinePortOutput) TlsOptions() FlyTLSOptionsPtrOutput {
	return o.ApplyT(func(v FlyMachinePort) *FlyTLSOptions { return v.TlsOptions }).(FlyTLSOptionsPtrOutput)
}

type FlyMachinePortArrayOutput struct{ *pulumi.OutputState }

func (FlyMachinePortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyMachinePort)(nil)).Elem()
}

func (o FlyMachinePortArrayOutput) ToFlyMachinePortArrayOutput() FlyMachinePortArrayOutput {
	return o
}

func (o FlyMachinePortArrayOutput) ToFlyMachinePortArrayOutputWithContext(ctx context.Context) FlyMachinePortArrayOutput {
	return o
}

func (o FlyMachinePortArrayOutput) Index(i pulumi.IntInput) FlyMachinePortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlyMachinePort {
		return vs[0].([]FlyMachinePort)[vs[1].(int)]
	}).(FlyMachinePortOutput)
}

type FlyMachineProcess struct {
	Cmd              []string           `pulumi:"cmd"`
	Entrypoint       []string           `pulumi:"entrypoint"`
	Env              map[string]string  `pulumi:"env"`
	EnvFrom          []FlyEnvFrom       `pulumi:"envFrom"`
	Exec             []string           `pulumi:"exec"`
	IgnoreAppSecrets *bool              `pulumi:"ignoreAppSecrets"`
	Secrets          []FlyMachineSecret `pulumi:"secrets"`
	User             *string            `pulumi:"user"`
}

// FlyMachineProcessInput is an input type that accepts FlyMachineProcessArgs and FlyMachineProcessOutput values.
// You can construct a concrete instance of `FlyMachineProcessInput` via:
//
//	FlyMachineProcessArgs{...}
type FlyMachineProcessInput interface {
	pulumi.Input

	ToFlyMachineProcessOutput() FlyMachineProcessOutput
	ToFlyMachineProcessOutputWithContext(context.Context) FlyMachineProcessOutput
}

type FlyMachineProcessArgs struct {
	Cmd              pulumi.StringArrayInput    `pulumi:"cmd"`
	Entrypoint       pulumi.StringArrayInput    `pulumi:"entrypoint"`
	Env              pulumi.StringMapInput      `pulumi:"env"`
	EnvFrom          FlyEnvFromArrayInput       `pulumi:"envFrom"`
	Exec             pulumi.StringArrayInput    `pulumi:"exec"`
	IgnoreAppSecrets pulumi.BoolPtrInput        `pulumi:"ignoreAppSecrets"`
	Secrets          FlyMachineSecretArrayInput `pulumi:"secrets"`
	User             pulumi.StringPtrInput      `pulumi:"user"`
}

func (FlyMachineProcessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachineProcess)(nil)).Elem()
}

func (i FlyMachineProcessArgs) ToFlyMachineProcessOutput() FlyMachineProcessOutput {
	return i.ToFlyMachineProcessOutputWithContext(context.Background())
}

func (i FlyMachineProcessArgs) ToFlyMachineProcessOutputWithContext(ctx context.Context) FlyMachineProcessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineProcessOutput)
}

// FlyMachineProcessArrayInput is an input type that accepts FlyMachineProcessArray and FlyMachineProcessArrayOutput values.
// You can construct a concrete instance of `FlyMachineProcessArrayInput` via:
//
//	FlyMachineProcessArray{ FlyMachineProcessArgs{...} }
type FlyMachineProcessArrayInput interface {
	pulumi.Input

	ToFlyMachineProcessArrayOutput() FlyMachineProcessArrayOutput
	ToFlyMachineProcessArrayOutputWithContext(context.Context) FlyMachineProcessArrayOutput
}

type FlyMachineProcessArray []FlyMachineProcessInput

func (FlyMachineProcessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyMachineProcess)(nil)).Elem()
}

func (i FlyMachineProcessArray) ToFlyMachineProcessArrayOutput() FlyMachineProcessArrayOutput {
	return i.ToFlyMachineProcessArrayOutputWithContext(context.Background())
}

func (i FlyMachineProcessArray) ToFlyMachineProcessArrayOutputWithContext(ctx context.Context) FlyMachineProcessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineProcessArrayOutput)
}

type FlyMachineProcessOutput struct{ *pulumi.OutputState }

func (FlyMachineProcessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachineProcess)(nil)).Elem()
}

func (o FlyMachineProcessOutput) ToFlyMachineProcessOutput() FlyMachineProcessOutput {
	return o
}

func (o FlyMachineProcessOutput) ToFlyMachineProcessOutputWithContext(ctx context.Context) FlyMachineProcessOutput {
	return o
}

func (o FlyMachineProcessOutput) Cmd() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlyMachineProcess) []string { return v.Cmd }).(pulumi.StringArrayOutput)
}

func (o FlyMachineProcessOutput) Entrypoint() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlyMachineProcess) []string { return v.Entrypoint }).(pulumi.StringArrayOutput)
}

func (o FlyMachineProcessOutput) Env() pulumi.StringMapOutput {
	return o.ApplyT(func(v FlyMachineProcess) map[string]string { return v.Env }).(pulumi.StringMapOutput)
}

func (o FlyMachineProcessOutput) EnvFrom() FlyEnvFromArrayOutput {
	return o.ApplyT(func(v FlyMachineProcess) []FlyEnvFrom { return v.EnvFrom }).(FlyEnvFromArrayOutput)
}

func (o FlyMachineProcessOutput) Exec() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlyMachineProcess) []string { return v.Exec }).(pulumi.StringArrayOutput)
}

func (o FlyMachineProcessOutput) IgnoreAppSecrets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FlyMachineProcess) *bool { return v.IgnoreAppSecrets }).(pulumi.BoolPtrOutput)
}

func (o FlyMachineProcessOutput) Secrets() FlyMachineSecretArrayOutput {
	return o.ApplyT(func(v FlyMachineProcess) []FlyMachineSecret { return v.Secrets }).(FlyMachineSecretArrayOutput)
}

func (o FlyMachineProcessOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineProcess) *string { return v.User }).(pulumi.StringPtrOutput)
}

type FlyMachineProcessArrayOutput struct{ *pulumi.OutputState }

func (FlyMachineProcessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyMachineProcess)(nil)).Elem()
}

func (o FlyMachineProcessArrayOutput) ToFlyMachineProcessArrayOutput() FlyMachineProcessArrayOutput {
	return o
}

func (o FlyMachineProcessArrayOutput) ToFlyMachineProcessArrayOutputWithContext(ctx context.Context) FlyMachineProcessArrayOutput {
	return o
}

func (o FlyMachineProcessArrayOutput) Index(i pulumi.IntInput) FlyMachineProcessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlyMachineProcess {
		return vs[0].([]FlyMachineProcess)[vs[1].(int)]
	}).(FlyMachineProcessOutput)
}

type FlyMachineRestart struct {
	GpuBidPrice *float64 `pulumi:"gpuBidPrice"`
	MaxRetries  *int     `pulumi:"maxRetries"`
	Policy      *string  `pulumi:"policy"`
}

// FlyMachineRestartInput is an input type that accepts FlyMachineRestartArgs and FlyMachineRestartOutput values.
// You can construct a concrete instance of `FlyMachineRestartInput` via:
//
//	FlyMachineRestartArgs{...}
type FlyMachineRestartInput interface {
	pulumi.Input

	ToFlyMachineRestartOutput() FlyMachineRestartOutput
	ToFlyMachineRestartOutputWithContext(context.Context) FlyMachineRestartOutput
}

type FlyMachineRestartArgs struct {
	GpuBidPrice pulumi.Float64PtrInput `pulumi:"gpuBidPrice"`
	MaxRetries  pulumi.IntPtrInput     `pulumi:"maxRetries"`
	Policy      pulumi.StringPtrInput  `pulumi:"policy"`
}

func (FlyMachineRestartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachineRestart)(nil)).Elem()
}

func (i FlyMachineRestartArgs) ToFlyMachineRestartOutput() FlyMachineRestartOutput {
	return i.ToFlyMachineRestartOutputWithContext(context.Background())
}

func (i FlyMachineRestartArgs) ToFlyMachineRestartOutputWithContext(ctx context.Context) FlyMachineRestartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineRestartOutput)
}

func (i FlyMachineRestartArgs) ToFlyMachineRestartPtrOutput() FlyMachineRestartPtrOutput {
	return i.ToFlyMachineRestartPtrOutputWithContext(context.Background())
}

func (i FlyMachineRestartArgs) ToFlyMachineRestartPtrOutputWithContext(ctx context.Context) FlyMachineRestartPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineRestartOutput).ToFlyMachineRestartPtrOutputWithContext(ctx)
}

// FlyMachineRestartPtrInput is an input type that accepts FlyMachineRestartArgs, FlyMachineRestartPtr and FlyMachineRestartPtrOutput values.
// You can construct a concrete instance of `FlyMachineRestartPtrInput` via:
//
//	        FlyMachineRestartArgs{...}
//
//	or:
//
//	        nil
type FlyMachineRestartPtrInput interface {
	pulumi.Input

	ToFlyMachineRestartPtrOutput() FlyMachineRestartPtrOutput
	ToFlyMachineRestartPtrOutputWithContext(context.Context) FlyMachineRestartPtrOutput
}

type flyMachineRestartPtrType FlyMachineRestartArgs

func FlyMachineRestartPtr(v *FlyMachineRestartArgs) FlyMachineRestartPtrInput {
	return (*flyMachineRestartPtrType)(v)
}

func (*flyMachineRestartPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyMachineRestart)(nil)).Elem()
}

func (i *flyMachineRestartPtrType) ToFlyMachineRestartPtrOutput() FlyMachineRestartPtrOutput {
	return i.ToFlyMachineRestartPtrOutputWithContext(context.Background())
}

func (i *flyMachineRestartPtrType) ToFlyMachineRestartPtrOutputWithContext(ctx context.Context) FlyMachineRestartPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineRestartPtrOutput)
}

type FlyMachineRestartOutput struct{ *pulumi.OutputState }

func (FlyMachineRestartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachineRestart)(nil)).Elem()
}

func (o FlyMachineRestartOutput) ToFlyMachineRestartOutput() FlyMachineRestartOutput {
	return o
}

func (o FlyMachineRestartOutput) ToFlyMachineRestartOutputWithContext(ctx context.Context) FlyMachineRestartOutput {
	return o
}

func (o FlyMachineRestartOutput) ToFlyMachineRestartPtrOutput() FlyMachineRestartPtrOutput {
	return o.ToFlyMachineRestartPtrOutputWithContext(context.Background())
}

func (o FlyMachineRestartOutput) ToFlyMachineRestartPtrOutputWithContext(ctx context.Context) FlyMachineRestartPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlyMachineRestart) *FlyMachineRestart {
		return &v
	}).(FlyMachineRestartPtrOutput)
}

func (o FlyMachineRestartOutput) GpuBidPrice() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v FlyMachineRestart) *float64 { return v.GpuBidPrice }).(pulumi.Float64PtrOutput)
}

func (o FlyMachineRestartOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyMachineRestart) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

func (o FlyMachineRestartOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineRestart) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

type FlyMachineRestartPtrOutput struct{ *pulumi.OutputState }

func (FlyMachineRestartPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyMachineRestart)(nil)).Elem()
}

func (o FlyMachineRestartPtrOutput) ToFlyMachineRestartPtrOutput() FlyMachineRestartPtrOutput {
	return o
}

func (o FlyMachineRestartPtrOutput) ToFlyMachineRestartPtrOutputWithContext(ctx context.Context) FlyMachineRestartPtrOutput {
	return o
}

func (o FlyMachineRestartPtrOutput) Elem() FlyMachineRestartOutput {
	return o.ApplyT(func(v *FlyMachineRestart) FlyMachineRestart {
		if v != nil {
			return *v
		}
		var ret FlyMachineRestart
		return ret
	}).(FlyMachineRestartOutput)
}

func (o FlyMachineRestartPtrOutput) GpuBidPrice() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *FlyMachineRestart) *float64 {
		if v == nil {
			return nil
		}
		return v.GpuBidPrice
	}).(pulumi.Float64PtrOutput)
}

func (o FlyMachineRestartPtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlyMachineRestart) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

func (o FlyMachineRestartPtrOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlyMachineRestart) *string {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(pulumi.StringPtrOutput)
}

type FlyMachineSecret struct {
	EnvVar *string `pulumi:"envVar"`
	Name   *string `pulumi:"name"`
}

// FlyMachineSecretInput is an input type that accepts FlyMachineSecretArgs and FlyMachineSecretOutput values.
// You can construct a concrete instance of `FlyMachineSecretInput` via:
//
//	FlyMachineSecretArgs{...}
type FlyMachineSecretInput interface {
	pulumi.Input

	ToFlyMachineSecretOutput() FlyMachineSecretOutput
	ToFlyMachineSecretOutputWithContext(context.Context) FlyMachineSecretOutput
}

type FlyMachineSecretArgs struct {
	EnvVar pulumi.StringPtrInput `pulumi:"envVar"`
	Name   pulumi.StringPtrInput `pulumi:"name"`
}

func (FlyMachineSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachineSecret)(nil)).Elem()
}

func (i FlyMachineSecretArgs) ToFlyMachineSecretOutput() FlyMachineSecretOutput {
	return i.ToFlyMachineSecretOutputWithContext(context.Background())
}

func (i FlyMachineSecretArgs) ToFlyMachineSecretOutputWithContext(ctx context.Context) FlyMachineSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineSecretOutput)
}

// FlyMachineSecretArrayInput is an input type that accepts FlyMachineSecretArray and FlyMachineSecretArrayOutput values.
// You can construct a concrete instance of `FlyMachineSecretArrayInput` via:
//
//	FlyMachineSecretArray{ FlyMachineSecretArgs{...} }
type FlyMachineSecretArrayInput interface {
	pulumi.Input

	ToFlyMachineSecretArrayOutput() FlyMachineSecretArrayOutput
	ToFlyMachineSecretArrayOutputWithContext(context.Context) FlyMachineSecretArrayOutput
}

type FlyMachineSecretArray []FlyMachineSecretInput

func (FlyMachineSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyMachineSecret)(nil)).Elem()
}

func (i FlyMachineSecretArray) ToFlyMachineSecretArrayOutput() FlyMachineSecretArrayOutput {
	return i.ToFlyMachineSecretArrayOutputWithContext(context.Background())
}

func (i FlyMachineSecretArray) ToFlyMachineSecretArrayOutputWithContext(ctx context.Context) FlyMachineSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineSecretArrayOutput)
}

type FlyMachineSecretOutput struct{ *pulumi.OutputState }

func (FlyMachineSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachineSecret)(nil)).Elem()
}

func (o FlyMachineSecretOutput) ToFlyMachineSecretOutput() FlyMachineSecretOutput {
	return o
}

func (o FlyMachineSecretOutput) ToFlyMachineSecretOutputWithContext(ctx context.Context) FlyMachineSecretOutput {
	return o
}

func (o FlyMachineSecretOutput) EnvVar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineSecret) *string { return v.EnvVar }).(pulumi.StringPtrOutput)
}

func (o FlyMachineSecretOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineSecret) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type FlyMachineSecretArrayOutput struct{ *pulumi.OutputState }

func (FlyMachineSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyMachineSecret)(nil)).Elem()
}

func (o FlyMachineSecretArrayOutput) ToFlyMachineSecretArrayOutput() FlyMachineSecretArrayOutput {
	return o
}

func (o FlyMachineSecretArrayOutput) ToFlyMachineSecretArrayOutputWithContext(ctx context.Context) FlyMachineSecretArrayOutput {
	return o
}

func (o FlyMachineSecretArrayOutput) Index(i pulumi.IntInput) FlyMachineSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlyMachineSecret {
		return vs[0].([]FlyMachineSecret)[vs[1].(int)]
	}).(FlyMachineSecretOutput)
}

type FlyMachineService struct {
	Autostart                *bool                         `pulumi:"autostart"`
	Autostop                 *string                       `pulumi:"autostop"`
	Checks                   []FlyMachineCheck             `pulumi:"checks"`
	Concurrency              *FlyMachineServiceConcurrency `pulumi:"concurrency"`
	ForceInstanceDescription *string                       `pulumi:"forceInstanceDescription"`
	ForceInstanceKey         *string                       `pulumi:"forceInstanceKey"`
	InternalPort             *int                          `pulumi:"internalPort"`
	MinMachinesRunning       *int                          `pulumi:"minMachinesRunning"`
	Ports                    []FlyMachinePort              `pulumi:"ports"`
	Protocol                 *string                       `pulumi:"protocol"`
}

// FlyMachineServiceInput is an input type that accepts FlyMachineServiceArgs and FlyMachineServiceOutput values.
// You can construct a concrete instance of `FlyMachineServiceInput` via:
//
//	FlyMachineServiceArgs{...}
type FlyMachineServiceInput interface {
	pulumi.Input

	ToFlyMachineServiceOutput() FlyMachineServiceOutput
	ToFlyMachineServiceOutputWithContext(context.Context) FlyMachineServiceOutput
}

type FlyMachineServiceArgs struct {
	Autostart                pulumi.BoolPtrInput                  `pulumi:"autostart"`
	Autostop                 pulumi.StringPtrInput                `pulumi:"autostop"`
	Checks                   FlyMachineCheckArrayInput            `pulumi:"checks"`
	Concurrency              FlyMachineServiceConcurrencyPtrInput `pulumi:"concurrency"`
	ForceInstanceDescription pulumi.StringPtrInput                `pulumi:"forceInstanceDescription"`
	ForceInstanceKey         pulumi.StringPtrInput                `pulumi:"forceInstanceKey"`
	InternalPort             pulumi.IntPtrInput                   `pulumi:"internalPort"`
	MinMachinesRunning       pulumi.IntPtrInput                   `pulumi:"minMachinesRunning"`
	Ports                    FlyMachinePortArrayInput             `pulumi:"ports"`
	Protocol                 pulumi.StringPtrInput                `pulumi:"protocol"`
}

func (FlyMachineServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachineService)(nil)).Elem()
}

func (i FlyMachineServiceArgs) ToFlyMachineServiceOutput() FlyMachineServiceOutput {
	return i.ToFlyMachineServiceOutputWithContext(context.Background())
}

func (i FlyMachineServiceArgs) ToFlyMachineServiceOutputWithContext(ctx context.Context) FlyMachineServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineServiceOutput)
}

// FlyMachineServiceArrayInput is an input type that accepts FlyMachineServiceArray and FlyMachineServiceArrayOutput values.
// You can construct a concrete instance of `FlyMachineServiceArrayInput` via:
//
//	FlyMachineServiceArray{ FlyMachineServiceArgs{...} }
type FlyMachineServiceArrayInput interface {
	pulumi.Input

	ToFlyMachineServiceArrayOutput() FlyMachineServiceArrayOutput
	ToFlyMachineServiceArrayOutputWithContext(context.Context) FlyMachineServiceArrayOutput
}

type FlyMachineServiceArray []FlyMachineServiceInput

func (FlyMachineServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyMachineService)(nil)).Elem()
}

func (i FlyMachineServiceArray) ToFlyMachineServiceArrayOutput() FlyMachineServiceArrayOutput {
	return i.ToFlyMachineServiceArrayOutputWithContext(context.Background())
}

func (i FlyMachineServiceArray) ToFlyMachineServiceArrayOutputWithContext(ctx context.Context) FlyMachineServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineServiceArrayOutput)
}

type FlyMachineServiceOutput struct{ *pulumi.OutputState }

func (FlyMachineServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachineService)(nil)).Elem()
}

func (o FlyMachineServiceOutput) ToFlyMachineServiceOutput() FlyMachineServiceOutput {
	return o
}

func (o FlyMachineServiceOutput) ToFlyMachineServiceOutputWithContext(ctx context.Context) FlyMachineServiceOutput {
	return o
}

func (o FlyMachineServiceOutput) Autostart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FlyMachineService) *bool { return v.Autostart }).(pulumi.BoolPtrOutput)
}

func (o FlyMachineServiceOutput) Autostop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineService) *string { return v.Autostop }).(pulumi.StringPtrOutput)
}

func (o FlyMachineServiceOutput) Checks() FlyMachineCheckArrayOutput {
	return o.ApplyT(func(v FlyMachineService) []FlyMachineCheck { return v.Checks }).(FlyMachineCheckArrayOutput)
}

func (o FlyMachineServiceOutput) Concurrency() FlyMachineServiceConcurrencyPtrOutput {
	return o.ApplyT(func(v FlyMachineService) *FlyMachineServiceConcurrency { return v.Concurrency }).(FlyMachineServiceConcurrencyPtrOutput)
}

func (o FlyMachineServiceOutput) ForceInstanceDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineService) *string { return v.ForceInstanceDescription }).(pulumi.StringPtrOutput)
}

func (o FlyMachineServiceOutput) ForceInstanceKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineService) *string { return v.ForceInstanceKey }).(pulumi.StringPtrOutput)
}

func (o FlyMachineServiceOutput) InternalPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyMachineService) *int { return v.InternalPort }).(pulumi.IntPtrOutput)
}

func (o FlyMachineServiceOutput) MinMachinesRunning() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyMachineService) *int { return v.MinMachinesRunning }).(pulumi.IntPtrOutput)
}

func (o FlyMachineServiceOutput) Ports() FlyMachinePortArrayOutput {
	return o.ApplyT(func(v FlyMachineService) []FlyMachinePort { return v.Ports }).(FlyMachinePortArrayOutput)
}

func (o FlyMachineServiceOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineService) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type FlyMachineServiceArrayOutput struct{ *pulumi.OutputState }

func (FlyMachineServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyMachineService)(nil)).Elem()
}

func (o FlyMachineServiceArrayOutput) ToFlyMachineServiceArrayOutput() FlyMachineServiceArrayOutput {
	return o
}

func (o FlyMachineServiceArrayOutput) ToFlyMachineServiceArrayOutputWithContext(ctx context.Context) FlyMachineServiceArrayOutput {
	return o
}

func (o FlyMachineServiceArrayOutput) Index(i pulumi.IntInput) FlyMachineServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlyMachineService {
		return vs[0].([]FlyMachineService)[vs[1].(int)]
	}).(FlyMachineServiceOutput)
}

type FlyMachineServiceConcurrency struct {
	HardLimit *int    `pulumi:"hardLimit"`
	SoftLimit *int    `pulumi:"softLimit"`
	Type      *string `pulumi:"type"`
}

// FlyMachineServiceConcurrencyInput is an input type that accepts FlyMachineServiceConcurrencyArgs and FlyMachineServiceConcurrencyOutput values.
// You can construct a concrete instance of `FlyMachineServiceConcurrencyInput` via:
//
//	FlyMachineServiceConcurrencyArgs{...}
type FlyMachineServiceConcurrencyInput interface {
	pulumi.Input

	ToFlyMachineServiceConcurrencyOutput() FlyMachineServiceConcurrencyOutput
	ToFlyMachineServiceConcurrencyOutputWithContext(context.Context) FlyMachineServiceConcurrencyOutput
}

type FlyMachineServiceConcurrencyArgs struct {
	HardLimit pulumi.IntPtrInput    `pulumi:"hardLimit"`
	SoftLimit pulumi.IntPtrInput    `pulumi:"softLimit"`
	Type      pulumi.StringPtrInput `pulumi:"type"`
}

func (FlyMachineServiceConcurrencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachineServiceConcurrency)(nil)).Elem()
}

func (i FlyMachineServiceConcurrencyArgs) ToFlyMachineServiceConcurrencyOutput() FlyMachineServiceConcurrencyOutput {
	return i.ToFlyMachineServiceConcurrencyOutputWithContext(context.Background())
}

func (i FlyMachineServiceConcurrencyArgs) ToFlyMachineServiceConcurrencyOutputWithContext(ctx context.Context) FlyMachineServiceConcurrencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineServiceConcurrencyOutput)
}

func (i FlyMachineServiceConcurrencyArgs) ToFlyMachineServiceConcurrencyPtrOutput() FlyMachineServiceConcurrencyPtrOutput {
	return i.ToFlyMachineServiceConcurrencyPtrOutputWithContext(context.Background())
}

func (i FlyMachineServiceConcurrencyArgs) ToFlyMachineServiceConcurrencyPtrOutputWithContext(ctx context.Context) FlyMachineServiceConcurrencyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineServiceConcurrencyOutput).ToFlyMachineServiceConcurrencyPtrOutputWithContext(ctx)
}

// FlyMachineServiceConcurrencyPtrInput is an input type that accepts FlyMachineServiceConcurrencyArgs, FlyMachineServiceConcurrencyPtr and FlyMachineServiceConcurrencyPtrOutput values.
// You can construct a concrete instance of `FlyMachineServiceConcurrencyPtrInput` via:
//
//	        FlyMachineServiceConcurrencyArgs{...}
//
//	or:
//
//	        nil
type FlyMachineServiceConcurrencyPtrInput interface {
	pulumi.Input

	ToFlyMachineServiceConcurrencyPtrOutput() FlyMachineServiceConcurrencyPtrOutput
	ToFlyMachineServiceConcurrencyPtrOutputWithContext(context.Context) FlyMachineServiceConcurrencyPtrOutput
}

type flyMachineServiceConcurrencyPtrType FlyMachineServiceConcurrencyArgs

func FlyMachineServiceConcurrencyPtr(v *FlyMachineServiceConcurrencyArgs) FlyMachineServiceConcurrencyPtrInput {
	return (*flyMachineServiceConcurrencyPtrType)(v)
}

func (*flyMachineServiceConcurrencyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyMachineServiceConcurrency)(nil)).Elem()
}

func (i *flyMachineServiceConcurrencyPtrType) ToFlyMachineServiceConcurrencyPtrOutput() FlyMachineServiceConcurrencyPtrOutput {
	return i.ToFlyMachineServiceConcurrencyPtrOutputWithContext(context.Background())
}

func (i *flyMachineServiceConcurrencyPtrType) ToFlyMachineServiceConcurrencyPtrOutputWithContext(ctx context.Context) FlyMachineServiceConcurrencyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyMachineServiceConcurrencyPtrOutput)
}

type FlyMachineServiceConcurrencyOutput struct{ *pulumi.OutputState }

func (FlyMachineServiceConcurrencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyMachineServiceConcurrency)(nil)).Elem()
}

func (o FlyMachineServiceConcurrencyOutput) ToFlyMachineServiceConcurrencyOutput() FlyMachineServiceConcurrencyOutput {
	return o
}

func (o FlyMachineServiceConcurrencyOutput) ToFlyMachineServiceConcurrencyOutputWithContext(ctx context.Context) FlyMachineServiceConcurrencyOutput {
	return o
}

func (o FlyMachineServiceConcurrencyOutput) ToFlyMachineServiceConcurrencyPtrOutput() FlyMachineServiceConcurrencyPtrOutput {
	return o.ToFlyMachineServiceConcurrencyPtrOutputWithContext(context.Background())
}

func (o FlyMachineServiceConcurrencyOutput) ToFlyMachineServiceConcurrencyPtrOutputWithContext(ctx context.Context) FlyMachineServiceConcurrencyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlyMachineServiceConcurrency) *FlyMachineServiceConcurrency {
		return &v
	}).(FlyMachineServiceConcurrencyPtrOutput)
}

func (o FlyMachineServiceConcurrencyOutput) HardLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyMachineServiceConcurrency) *int { return v.HardLimit }).(pulumi.IntPtrOutput)
}

func (o FlyMachineServiceConcurrencyOutput) SoftLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyMachineServiceConcurrency) *int { return v.SoftLimit }).(pulumi.IntPtrOutput)
}

func (o FlyMachineServiceConcurrencyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyMachineServiceConcurrency) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type FlyMachineServiceConcurrencyPtrOutput struct{ *pulumi.OutputState }

func (FlyMachineServiceConcurrencyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyMachineServiceConcurrency)(nil)).Elem()
}

func (o FlyMachineServiceConcurrencyPtrOutput) ToFlyMachineServiceConcurrencyPtrOutput() FlyMachineServiceConcurrencyPtrOutput {
	return o
}

func (o FlyMachineServiceConcurrencyPtrOutput) ToFlyMachineServiceConcurrencyPtrOutputWithContext(ctx context.Context) FlyMachineServiceConcurrencyPtrOutput {
	return o
}

func (o FlyMachineServiceConcurrencyPtrOutput) Elem() FlyMachineServiceConcurrencyOutput {
	return o.ApplyT(func(v *FlyMachineServiceConcurrency) FlyMachineServiceConcurrency {
		if v != nil {
			return *v
		}
		var ret FlyMachineServiceConcurrency
		return ret
	}).(FlyMachineServiceConcurrencyOutput)
}

func (o FlyMachineServiceConcurrencyPtrOutput) HardLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlyMachineServiceConcurrency) *int {
		if v == nil {
			return nil
		}
		return v.HardLimit
	}).(pulumi.IntPtrOutput)
}

func (o FlyMachineServiceConcurrencyPtrOutput) SoftLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlyMachineServiceConcurrency) *int {
		if v == nil {
			return nil
		}
		return v.SoftLimit
	}).(pulumi.IntPtrOutput)
}

func (o FlyMachineServiceConcurrencyPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlyMachineServiceConcurrency) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type FlyProxyProtoOptions struct {
	Version *string `pulumi:"version"`
}

// FlyProxyProtoOptionsInput is an input type that accepts FlyProxyProtoOptionsArgs and FlyProxyProtoOptionsOutput values.
// You can construct a concrete instance of `FlyProxyProtoOptionsInput` via:
//
//	FlyProxyProtoOptionsArgs{...}
type FlyProxyProtoOptionsInput interface {
	pulumi.Input

	ToFlyProxyProtoOptionsOutput() FlyProxyProtoOptionsOutput
	ToFlyProxyProtoOptionsOutputWithContext(context.Context) FlyProxyProtoOptionsOutput
}

type FlyProxyProtoOptionsArgs struct {
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (FlyProxyProtoOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyProxyProtoOptions)(nil)).Elem()
}

func (i FlyProxyProtoOptionsArgs) ToFlyProxyProtoOptionsOutput() FlyProxyProtoOptionsOutput {
	return i.ToFlyProxyProtoOptionsOutputWithContext(context.Background())
}

func (i FlyProxyProtoOptionsArgs) ToFlyProxyProtoOptionsOutputWithContext(ctx context.Context) FlyProxyProtoOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyProxyProtoOptionsOutput)
}

func (i FlyProxyProtoOptionsArgs) ToFlyProxyProtoOptionsPtrOutput() FlyProxyProtoOptionsPtrOutput {
	return i.ToFlyProxyProtoOptionsPtrOutputWithContext(context.Background())
}

func (i FlyProxyProtoOptionsArgs) ToFlyProxyProtoOptionsPtrOutputWithContext(ctx context.Context) FlyProxyProtoOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyProxyProtoOptionsOutput).ToFlyProxyProtoOptionsPtrOutputWithContext(ctx)
}

// FlyProxyProtoOptionsPtrInput is an input type that accepts FlyProxyProtoOptionsArgs, FlyProxyProtoOptionsPtr and FlyProxyProtoOptionsPtrOutput values.
// You can construct a concrete instance of `FlyProxyProtoOptionsPtrInput` via:
//
//	        FlyProxyProtoOptionsArgs{...}
//
//	or:
//
//	        nil
type FlyProxyProtoOptionsPtrInput interface {
	pulumi.Input

	ToFlyProxyProtoOptionsPtrOutput() FlyProxyProtoOptionsPtrOutput
	ToFlyProxyProtoOptionsPtrOutputWithContext(context.Context) FlyProxyProtoOptionsPtrOutput
}

type flyProxyProtoOptionsPtrType FlyProxyProtoOptionsArgs

func FlyProxyProtoOptionsPtr(v *FlyProxyProtoOptionsArgs) FlyProxyProtoOptionsPtrInput {
	return (*flyProxyProtoOptionsPtrType)(v)
}

func (*flyProxyProtoOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyProxyProtoOptions)(nil)).Elem()
}

func (i *flyProxyProtoOptionsPtrType) ToFlyProxyProtoOptionsPtrOutput() FlyProxyProtoOptionsPtrOutput {
	return i.ToFlyProxyProtoOptionsPtrOutputWithContext(context.Background())
}

func (i *flyProxyProtoOptionsPtrType) ToFlyProxyProtoOptionsPtrOutputWithContext(ctx context.Context) FlyProxyProtoOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyProxyProtoOptionsPtrOutput)
}

type FlyProxyProtoOptionsOutput struct{ *pulumi.OutputState }

func (FlyProxyProtoOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyProxyProtoOptions)(nil)).Elem()
}

func (o FlyProxyProtoOptionsOutput) ToFlyProxyProtoOptionsOutput() FlyProxyProtoOptionsOutput {
	return o
}

func (o FlyProxyProtoOptionsOutput) ToFlyProxyProtoOptionsOutputWithContext(ctx context.Context) FlyProxyProtoOptionsOutput {
	return o
}

func (o FlyProxyProtoOptionsOutput) ToFlyProxyProtoOptionsPtrOutput() FlyProxyProtoOptionsPtrOutput {
	return o.ToFlyProxyProtoOptionsPtrOutputWithContext(context.Background())
}

func (o FlyProxyProtoOptionsOutput) ToFlyProxyProtoOptionsPtrOutputWithContext(ctx context.Context) FlyProxyProtoOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlyProxyProtoOptions) *FlyProxyProtoOptions {
		return &v
	}).(FlyProxyProtoOptionsPtrOutput)
}

func (o FlyProxyProtoOptionsOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyProxyProtoOptions) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type FlyProxyProtoOptionsPtrOutput struct{ *pulumi.OutputState }

func (FlyProxyProtoOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyProxyProtoOptions)(nil)).Elem()
}

func (o FlyProxyProtoOptionsPtrOutput) ToFlyProxyProtoOptionsPtrOutput() FlyProxyProtoOptionsPtrOutput {
	return o
}

func (o FlyProxyProtoOptionsPtrOutput) ToFlyProxyProtoOptionsPtrOutputWithContext(ctx context.Context) FlyProxyProtoOptionsPtrOutput {
	return o
}

func (o FlyProxyProtoOptionsPtrOutput) Elem() FlyProxyProtoOptionsOutput {
	return o.ApplyT(func(v *FlyProxyProtoOptions) FlyProxyProtoOptions {
		if v != nil {
			return *v
		}
		var ret FlyProxyProtoOptions
		return ret
	}).(FlyProxyProtoOptionsOutput)
}

func (o FlyProxyProtoOptionsPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlyProxyProtoOptions) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type FlyStatic struct {
	GuestPath     string  `pulumi:"guestPath"`
	IndexDocument *string `pulumi:"indexDocument"`
	TigrisBucket  *string `pulumi:"tigrisBucket"`
	UrlPrefix     string  `pulumi:"urlPrefix"`
}

// FlyStaticInput is an input type that accepts FlyStaticArgs and FlyStaticOutput values.
// You can construct a concrete instance of `FlyStaticInput` via:
//
//	FlyStaticArgs{...}
type FlyStaticInput interface {
	pulumi.Input

	ToFlyStaticOutput() FlyStaticOutput
	ToFlyStaticOutputWithContext(context.Context) FlyStaticOutput
}

type FlyStaticArgs struct {
	GuestPath     pulumi.StringInput    `pulumi:"guestPath"`
	IndexDocument pulumi.StringPtrInput `pulumi:"indexDocument"`
	TigrisBucket  pulumi.StringPtrInput `pulumi:"tigrisBucket"`
	UrlPrefix     pulumi.StringInput    `pulumi:"urlPrefix"`
}

func (FlyStaticArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyStatic)(nil)).Elem()
}

func (i FlyStaticArgs) ToFlyStaticOutput() FlyStaticOutput {
	return i.ToFlyStaticOutputWithContext(context.Background())
}

func (i FlyStaticArgs) ToFlyStaticOutputWithContext(ctx context.Context) FlyStaticOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyStaticOutput)
}

// FlyStaticArrayInput is an input type that accepts FlyStaticArray and FlyStaticArrayOutput values.
// You can construct a concrete instance of `FlyStaticArrayInput` via:
//
//	FlyStaticArray{ FlyStaticArgs{...} }
type FlyStaticArrayInput interface {
	pulumi.Input

	ToFlyStaticArrayOutput() FlyStaticArrayOutput
	ToFlyStaticArrayOutputWithContext(context.Context) FlyStaticArrayOutput
}

type FlyStaticArray []FlyStaticInput

func (FlyStaticArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyStatic)(nil)).Elem()
}

func (i FlyStaticArray) ToFlyStaticArrayOutput() FlyStaticArrayOutput {
	return i.ToFlyStaticArrayOutputWithContext(context.Background())
}

func (i FlyStaticArray) ToFlyStaticArrayOutputWithContext(ctx context.Context) FlyStaticArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyStaticArrayOutput)
}

type FlyStaticOutput struct{ *pulumi.OutputState }

func (FlyStaticOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyStatic)(nil)).Elem()
}

func (o FlyStaticOutput) ToFlyStaticOutput() FlyStaticOutput {
	return o
}

func (o FlyStaticOutput) ToFlyStaticOutputWithContext(ctx context.Context) FlyStaticOutput {
	return o
}

func (o FlyStaticOutput) GuestPath() pulumi.StringOutput {
	return o.ApplyT(func(v FlyStatic) string { return v.GuestPath }).(pulumi.StringOutput)
}

func (o FlyStaticOutput) IndexDocument() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyStatic) *string { return v.IndexDocument }).(pulumi.StringPtrOutput)
}

func (o FlyStaticOutput) TigrisBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyStatic) *string { return v.TigrisBucket }).(pulumi.StringPtrOutput)
}

func (o FlyStaticOutput) UrlPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v FlyStatic) string { return v.UrlPrefix }).(pulumi.StringOutput)
}

type FlyStaticArrayOutput struct{ *pulumi.OutputState }

func (FlyStaticArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyStatic)(nil)).Elem()
}

func (o FlyStaticArrayOutput) ToFlyStaticArrayOutput() FlyStaticArrayOutput {
	return o
}

func (o FlyStaticArrayOutput) ToFlyStaticArrayOutputWithContext(ctx context.Context) FlyStaticArrayOutput {
	return o
}

func (o FlyStaticArrayOutput) Index(i pulumi.IntInput) FlyStaticOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlyStatic {
		return vs[0].([]FlyStatic)[vs[1].(int)]
	}).(FlyStaticOutput)
}

type FlyStopConfig struct {
	Signal  *string `pulumi:"signal"`
	Timeout *string `pulumi:"timeout"`
}

// FlyStopConfigInput is an input type that accepts FlyStopConfigArgs and FlyStopConfigOutput values.
// You can construct a concrete instance of `FlyStopConfigInput` via:
//
//	FlyStopConfigArgs{...}
type FlyStopConfigInput interface {
	pulumi.Input

	ToFlyStopConfigOutput() FlyStopConfigOutput
	ToFlyStopConfigOutputWithContext(context.Context) FlyStopConfigOutput
}

type FlyStopConfigArgs struct {
	Signal  pulumi.StringPtrInput `pulumi:"signal"`
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (FlyStopConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyStopConfig)(nil)).Elem()
}

func (i FlyStopConfigArgs) ToFlyStopConfigOutput() FlyStopConfigOutput {
	return i.ToFlyStopConfigOutputWithContext(context.Background())
}

func (i FlyStopConfigArgs) ToFlyStopConfigOutputWithContext(ctx context.Context) FlyStopConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyStopConfigOutput)
}

func (i FlyStopConfigArgs) ToFlyStopConfigPtrOutput() FlyStopConfigPtrOutput {
	return i.ToFlyStopConfigPtrOutputWithContext(context.Background())
}

func (i FlyStopConfigArgs) ToFlyStopConfigPtrOutputWithContext(ctx context.Context) FlyStopConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyStopConfigOutput).ToFlyStopConfigPtrOutputWithContext(ctx)
}

// FlyStopConfigPtrInput is an input type that accepts FlyStopConfigArgs, FlyStopConfigPtr and FlyStopConfigPtrOutput values.
// You can construct a concrete instance of `FlyStopConfigPtrInput` via:
//
//	        FlyStopConfigArgs{...}
//
//	or:
//
//	        nil
type FlyStopConfigPtrInput interface {
	pulumi.Input

	ToFlyStopConfigPtrOutput() FlyStopConfigPtrOutput
	ToFlyStopConfigPtrOutputWithContext(context.Context) FlyStopConfigPtrOutput
}

type flyStopConfigPtrType FlyStopConfigArgs

func FlyStopConfigPtr(v *FlyStopConfigArgs) FlyStopConfigPtrInput {
	return (*flyStopConfigPtrType)(v)
}

func (*flyStopConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyStopConfig)(nil)).Elem()
}

func (i *flyStopConfigPtrType) ToFlyStopConfigPtrOutput() FlyStopConfigPtrOutput {
	return i.ToFlyStopConfigPtrOutputWithContext(context.Background())
}

func (i *flyStopConfigPtrType) ToFlyStopConfigPtrOutputWithContext(ctx context.Context) FlyStopConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyStopConfigPtrOutput)
}

type FlyStopConfigOutput struct{ *pulumi.OutputState }

func (FlyStopConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyStopConfig)(nil)).Elem()
}

func (o FlyStopConfigOutput) ToFlyStopConfigOutput() FlyStopConfigOutput {
	return o
}

func (o FlyStopConfigOutput) ToFlyStopConfigOutputWithContext(ctx context.Context) FlyStopConfigOutput {
	return o
}

func (o FlyStopConfigOutput) ToFlyStopConfigPtrOutput() FlyStopConfigPtrOutput {
	return o.ToFlyStopConfigPtrOutputWithContext(context.Background())
}

func (o FlyStopConfigOutput) ToFlyStopConfigPtrOutputWithContext(ctx context.Context) FlyStopConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlyStopConfig) *FlyStopConfig {
		return &v
	}).(FlyStopConfigPtrOutput)
}

func (o FlyStopConfigOutput) Signal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyStopConfig) *string { return v.Signal }).(pulumi.StringPtrOutput)
}

func (o FlyStopConfigOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyStopConfig) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type FlyStopConfigPtrOutput struct{ *pulumi.OutputState }

func (FlyStopConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyStopConfig)(nil)).Elem()
}

func (o FlyStopConfigPtrOutput) ToFlyStopConfigPtrOutput() FlyStopConfigPtrOutput {
	return o
}

func (o FlyStopConfigPtrOutput) ToFlyStopConfigPtrOutputWithContext(ctx context.Context) FlyStopConfigPtrOutput {
	return o
}

func (o FlyStopConfigPtrOutput) Elem() FlyStopConfigOutput {
	return o.ApplyT(func(v *FlyStopConfig) FlyStopConfig {
		if v != nil {
			return *v
		}
		var ret FlyStopConfig
		return ret
	}).(FlyStopConfigOutput)
}

func (o FlyStopConfigPtrOutput) Signal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlyStopConfig) *string {
		if v == nil {
			return nil
		}
		return v.Signal
	}).(pulumi.StringPtrOutput)
}

func (o FlyStopConfigPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlyStopConfig) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

type FlyTCPHealthcheck struct {
	Port *int `pulumi:"port"`
}

// FlyTCPHealthcheckInput is an input type that accepts FlyTCPHealthcheckArgs and FlyTCPHealthcheckOutput values.
// You can construct a concrete instance of `FlyTCPHealthcheckInput` via:
//
//	FlyTCPHealthcheckArgs{...}
type FlyTCPHealthcheckInput interface {
	pulumi.Input

	ToFlyTCPHealthcheckOutput() FlyTCPHealthcheckOutput
	ToFlyTCPHealthcheckOutputWithContext(context.Context) FlyTCPHealthcheckOutput
}

type FlyTCPHealthcheckArgs struct {
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (FlyTCPHealthcheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyTCPHealthcheck)(nil)).Elem()
}

func (i FlyTCPHealthcheckArgs) ToFlyTCPHealthcheckOutput() FlyTCPHealthcheckOutput {
	return i.ToFlyTCPHealthcheckOutputWithContext(context.Background())
}

func (i FlyTCPHealthcheckArgs) ToFlyTCPHealthcheckOutputWithContext(ctx context.Context) FlyTCPHealthcheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyTCPHealthcheckOutput)
}

func (i FlyTCPHealthcheckArgs) ToFlyTCPHealthcheckPtrOutput() FlyTCPHealthcheckPtrOutput {
	return i.ToFlyTCPHealthcheckPtrOutputWithContext(context.Background())
}

func (i FlyTCPHealthcheckArgs) ToFlyTCPHealthcheckPtrOutputWithContext(ctx context.Context) FlyTCPHealthcheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyTCPHealthcheckOutput).ToFlyTCPHealthcheckPtrOutputWithContext(ctx)
}

// FlyTCPHealthcheckPtrInput is an input type that accepts FlyTCPHealthcheckArgs, FlyTCPHealthcheckPtr and FlyTCPHealthcheckPtrOutput values.
// You can construct a concrete instance of `FlyTCPHealthcheckPtrInput` via:
//
//	        FlyTCPHealthcheckArgs{...}
//
//	or:
//
//	        nil
type FlyTCPHealthcheckPtrInput interface {
	pulumi.Input

	ToFlyTCPHealthcheckPtrOutput() FlyTCPHealthcheckPtrOutput
	ToFlyTCPHealthcheckPtrOutputWithContext(context.Context) FlyTCPHealthcheckPtrOutput
}

type flyTCPHealthcheckPtrType FlyTCPHealthcheckArgs

func FlyTCPHealthcheckPtr(v *FlyTCPHealthcheckArgs) FlyTCPHealthcheckPtrInput {
	return (*flyTCPHealthcheckPtrType)(v)
}

func (*flyTCPHealthcheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyTCPHealthcheck)(nil)).Elem()
}

func (i *flyTCPHealthcheckPtrType) ToFlyTCPHealthcheckPtrOutput() FlyTCPHealthcheckPtrOutput {
	return i.ToFlyTCPHealthcheckPtrOutputWithContext(context.Background())
}

func (i *flyTCPHealthcheckPtrType) ToFlyTCPHealthcheckPtrOutputWithContext(ctx context.Context) FlyTCPHealthcheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyTCPHealthcheckPtrOutput)
}

type FlyTCPHealthcheckOutput struct{ *pulumi.OutputState }

func (FlyTCPHealthcheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyTCPHealthcheck)(nil)).Elem()
}

func (o FlyTCPHealthcheckOutput) ToFlyTCPHealthcheckOutput() FlyTCPHealthcheckOutput {
	return o
}

func (o FlyTCPHealthcheckOutput) ToFlyTCPHealthcheckOutputWithContext(ctx context.Context) FlyTCPHealthcheckOutput {
	return o
}

func (o FlyTCPHealthcheckOutput) ToFlyTCPHealthcheckPtrOutput() FlyTCPHealthcheckPtrOutput {
	return o.ToFlyTCPHealthcheckPtrOutputWithContext(context.Background())
}

func (o FlyTCPHealthcheckOutput) ToFlyTCPHealthcheckPtrOutputWithContext(ctx context.Context) FlyTCPHealthcheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlyTCPHealthcheck) *FlyTCPHealthcheck {
		return &v
	}).(FlyTCPHealthcheckPtrOutput)
}

func (o FlyTCPHealthcheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyTCPHealthcheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type FlyTCPHealthcheckPtrOutput struct{ *pulumi.OutputState }

func (FlyTCPHealthcheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyTCPHealthcheck)(nil)).Elem()
}

func (o FlyTCPHealthcheckPtrOutput) ToFlyTCPHealthcheckPtrOutput() FlyTCPHealthcheckPtrOutput {
	return o
}

func (o FlyTCPHealthcheckPtrOutput) ToFlyTCPHealthcheckPtrOutputWithContext(ctx context.Context) FlyTCPHealthcheckPtrOutput {
	return o
}

func (o FlyTCPHealthcheckPtrOutput) Elem() FlyTCPHealthcheckOutput {
	return o.ApplyT(func(v *FlyTCPHealthcheck) FlyTCPHealthcheck {
		if v != nil {
			return *v
		}
		var ret FlyTCPHealthcheck
		return ret
	}).(FlyTCPHealthcheckOutput)
}

func (o FlyTCPHealthcheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlyTCPHealthcheck) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

type FlyTLSOptions struct {
	Alpn              []string `pulumi:"alpn"`
	DefaultSelfSigned *bool    `pulumi:"defaultSelfSigned"`
	Versions          []string `pulumi:"versions"`
}

// FlyTLSOptionsInput is an input type that accepts FlyTLSOptionsArgs and FlyTLSOptionsOutput values.
// You can construct a concrete instance of `FlyTLSOptionsInput` via:
//
//	FlyTLSOptionsArgs{...}
type FlyTLSOptionsInput interface {
	pulumi.Input

	ToFlyTLSOptionsOutput() FlyTLSOptionsOutput
	ToFlyTLSOptionsOutputWithContext(context.Context) FlyTLSOptionsOutput
}

type FlyTLSOptionsArgs struct {
	Alpn              pulumi.StringArrayInput `pulumi:"alpn"`
	DefaultSelfSigned pulumi.BoolPtrInput     `pulumi:"defaultSelfSigned"`
	Versions          pulumi.StringArrayInput `pulumi:"versions"`
}

func (FlyTLSOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyTLSOptions)(nil)).Elem()
}

func (i FlyTLSOptionsArgs) ToFlyTLSOptionsOutput() FlyTLSOptionsOutput {
	return i.ToFlyTLSOptionsOutputWithContext(context.Background())
}

func (i FlyTLSOptionsArgs) ToFlyTLSOptionsOutputWithContext(ctx context.Context) FlyTLSOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyTLSOptionsOutput)
}

func (i FlyTLSOptionsArgs) ToFlyTLSOptionsPtrOutput() FlyTLSOptionsPtrOutput {
	return i.ToFlyTLSOptionsPtrOutputWithContext(context.Background())
}

func (i FlyTLSOptionsArgs) ToFlyTLSOptionsPtrOutputWithContext(ctx context.Context) FlyTLSOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyTLSOptionsOutput).ToFlyTLSOptionsPtrOutputWithContext(ctx)
}

// FlyTLSOptionsPtrInput is an input type that accepts FlyTLSOptionsArgs, FlyTLSOptionsPtr and FlyTLSOptionsPtrOutput values.
// You can construct a concrete instance of `FlyTLSOptionsPtrInput` via:
//
//	        FlyTLSOptionsArgs{...}
//
//	or:
//
//	        nil
type FlyTLSOptionsPtrInput interface {
	pulumi.Input

	ToFlyTLSOptionsPtrOutput() FlyTLSOptionsPtrOutput
	ToFlyTLSOptionsPtrOutputWithContext(context.Context) FlyTLSOptionsPtrOutput
}

type flyTLSOptionsPtrType FlyTLSOptionsArgs

func FlyTLSOptionsPtr(v *FlyTLSOptionsArgs) FlyTLSOptionsPtrInput {
	return (*flyTLSOptionsPtrType)(v)
}

func (*flyTLSOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyTLSOptions)(nil)).Elem()
}

func (i *flyTLSOptionsPtrType) ToFlyTLSOptionsPtrOutput() FlyTLSOptionsPtrOutput {
	return i.ToFlyTLSOptionsPtrOutputWithContext(context.Background())
}

func (i *flyTLSOptionsPtrType) ToFlyTLSOptionsPtrOutputWithContext(ctx context.Context) FlyTLSOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyTLSOptionsPtrOutput)
}

type FlyTLSOptionsOutput struct{ *pulumi.OutputState }

func (FlyTLSOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyTLSOptions)(nil)).Elem()
}

func (o FlyTLSOptionsOutput) ToFlyTLSOptionsOutput() FlyTLSOptionsOutput {
	return o
}

func (o FlyTLSOptionsOutput) ToFlyTLSOptionsOutputWithContext(ctx context.Context) FlyTLSOptionsOutput {
	return o
}

func (o FlyTLSOptionsOutput) ToFlyTLSOptionsPtrOutput() FlyTLSOptionsPtrOutput {
	return o.ToFlyTLSOptionsPtrOutputWithContext(context.Background())
}

func (o FlyTLSOptionsOutput) ToFlyTLSOptionsPtrOutputWithContext(ctx context.Context) FlyTLSOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlyTLSOptions) *FlyTLSOptions {
		return &v
	}).(FlyTLSOptionsPtrOutput)
}

func (o FlyTLSOptionsOutput) Alpn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlyTLSOptions) []string { return v.Alpn }).(pulumi.StringArrayOutput)
}

func (o FlyTLSOptionsOutput) DefaultSelfSigned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FlyTLSOptions) *bool { return v.DefaultSelfSigned }).(pulumi.BoolPtrOutput)
}

func (o FlyTLSOptionsOutput) Versions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlyTLSOptions) []string { return v.Versions }).(pulumi.StringArrayOutput)
}

type FlyTLSOptionsPtrOutput struct{ *pulumi.OutputState }

func (FlyTLSOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyTLSOptions)(nil)).Elem()
}

func (o FlyTLSOptionsPtrOutput) ToFlyTLSOptionsPtrOutput() FlyTLSOptionsPtrOutput {
	return o
}

func (o FlyTLSOptionsPtrOutput) ToFlyTLSOptionsPtrOutputWithContext(ctx context.Context) FlyTLSOptionsPtrOutput {
	return o
}

func (o FlyTLSOptionsPtrOutput) Elem() FlyTLSOptionsOutput {
	return o.ApplyT(func(v *FlyTLSOptions) FlyTLSOptions {
		if v != nil {
			return *v
		}
		var ret FlyTLSOptions
		return ret
	}).(FlyTLSOptionsOutput)
}

func (o FlyTLSOptionsPtrOutput) Alpn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FlyTLSOptions) []string {
		if v == nil {
			return nil
		}
		return v.Alpn
	}).(pulumi.StringArrayOutput)
}

func (o FlyTLSOptionsPtrOutput) DefaultSelfSigned() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FlyTLSOptions) *bool {
		if v == nil {
			return nil
		}
		return v.DefaultSelfSigned
	}).(pulumi.BoolPtrOutput)
}

func (o FlyTLSOptionsPtrOutput) Versions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FlyTLSOptions) []string {
		if v == nil {
			return nil
		}
		return v.Versions
	}).(pulumi.StringArrayOutput)
}

type FlyTempDirVolume struct {
	SizeMb      *int    `pulumi:"sizeMb"`
	StorageType *string `pulumi:"storageType"`
}

// FlyTempDirVolumeInput is an input type that accepts FlyTempDirVolumeArgs and FlyTempDirVolumeOutput values.
// You can construct a concrete instance of `FlyTempDirVolumeInput` via:
//
//	FlyTempDirVolumeArgs{...}
type FlyTempDirVolumeInput interface {
	pulumi.Input

	ToFlyTempDirVolumeOutput() FlyTempDirVolumeOutput
	ToFlyTempDirVolumeOutputWithContext(context.Context) FlyTempDirVolumeOutput
}

type FlyTempDirVolumeArgs struct {
	SizeMb      pulumi.IntPtrInput    `pulumi:"sizeMb"`
	StorageType pulumi.StringPtrInput `pulumi:"storageType"`
}

func (FlyTempDirVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyTempDirVolume)(nil)).Elem()
}

func (i FlyTempDirVolumeArgs) ToFlyTempDirVolumeOutput() FlyTempDirVolumeOutput {
	return i.ToFlyTempDirVolumeOutputWithContext(context.Background())
}

func (i FlyTempDirVolumeArgs) ToFlyTempDirVolumeOutputWithContext(ctx context.Context) FlyTempDirVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyTempDirVolumeOutput)
}

func (i FlyTempDirVolumeArgs) ToFlyTempDirVolumePtrOutput() FlyTempDirVolumePtrOutput {
	return i.ToFlyTempDirVolumePtrOutputWithContext(context.Background())
}

func (i FlyTempDirVolumeArgs) ToFlyTempDirVolumePtrOutputWithContext(ctx context.Context) FlyTempDirVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyTempDirVolumeOutput).ToFlyTempDirVolumePtrOutputWithContext(ctx)
}

// FlyTempDirVolumePtrInput is an input type that accepts FlyTempDirVolumeArgs, FlyTempDirVolumePtr and FlyTempDirVolumePtrOutput values.
// You can construct a concrete instance of `FlyTempDirVolumePtrInput` via:
//
//	        FlyTempDirVolumeArgs{...}
//
//	or:
//
//	        nil
type FlyTempDirVolumePtrInput interface {
	pulumi.Input

	ToFlyTempDirVolumePtrOutput() FlyTempDirVolumePtrOutput
	ToFlyTempDirVolumePtrOutputWithContext(context.Context) FlyTempDirVolumePtrOutput
}

type flyTempDirVolumePtrType FlyTempDirVolumeArgs

func FlyTempDirVolumePtr(v *FlyTempDirVolumeArgs) FlyTempDirVolumePtrInput {
	return (*flyTempDirVolumePtrType)(v)
}

func (*flyTempDirVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyTempDirVolume)(nil)).Elem()
}

func (i *flyTempDirVolumePtrType) ToFlyTempDirVolumePtrOutput() FlyTempDirVolumePtrOutput {
	return i.ToFlyTempDirVolumePtrOutputWithContext(context.Background())
}

func (i *flyTempDirVolumePtrType) ToFlyTempDirVolumePtrOutputWithContext(ctx context.Context) FlyTempDirVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyTempDirVolumePtrOutput)
}

type FlyTempDirVolumeOutput struct{ *pulumi.OutputState }

func (FlyTempDirVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyTempDirVolume)(nil)).Elem()
}

func (o FlyTempDirVolumeOutput) ToFlyTempDirVolumeOutput() FlyTempDirVolumeOutput {
	return o
}

func (o FlyTempDirVolumeOutput) ToFlyTempDirVolumeOutputWithContext(ctx context.Context) FlyTempDirVolumeOutput {
	return o
}

func (o FlyTempDirVolumeOutput) ToFlyTempDirVolumePtrOutput() FlyTempDirVolumePtrOutput {
	return o.ToFlyTempDirVolumePtrOutputWithContext(context.Background())
}

func (o FlyTempDirVolumeOutput) ToFlyTempDirVolumePtrOutputWithContext(ctx context.Context) FlyTempDirVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FlyTempDirVolume) *FlyTempDirVolume {
		return &v
	}).(FlyTempDirVolumePtrOutput)
}

func (o FlyTempDirVolumeOutput) SizeMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlyTempDirVolume) *int { return v.SizeMb }).(pulumi.IntPtrOutput)
}

func (o FlyTempDirVolumeOutput) StorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyTempDirVolume) *string { return v.StorageType }).(pulumi.StringPtrOutput)
}

type FlyTempDirVolumePtrOutput struct{ *pulumi.OutputState }

func (FlyTempDirVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlyTempDirVolume)(nil)).Elem()
}

func (o FlyTempDirVolumePtrOutput) ToFlyTempDirVolumePtrOutput() FlyTempDirVolumePtrOutput {
	return o
}

func (o FlyTempDirVolumePtrOutput) ToFlyTempDirVolumePtrOutputWithContext(ctx context.Context) FlyTempDirVolumePtrOutput {
	return o
}

func (o FlyTempDirVolumePtrOutput) Elem() FlyTempDirVolumeOutput {
	return o.ApplyT(func(v *FlyTempDirVolume) FlyTempDirVolume {
		if v != nil {
			return *v
		}
		var ret FlyTempDirVolume
		return ret
	}).(FlyTempDirVolumeOutput)
}

func (o FlyTempDirVolumePtrOutput) SizeMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FlyTempDirVolume) *int {
		if v == nil {
			return nil
		}
		return v.SizeMb
	}).(pulumi.IntPtrOutput)
}

func (o FlyTempDirVolumePtrOutput) StorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlyTempDirVolume) *string {
		if v == nil {
			return nil
		}
		return v.StorageType
	}).(pulumi.StringPtrOutput)
}

type FlyVolumeConfig struct {
	Name    *string           `pulumi:"name"`
	TempDir *FlyTempDirVolume `pulumi:"tempDir"`
}

// FlyVolumeConfigInput is an input type that accepts FlyVolumeConfigArgs and FlyVolumeConfigOutput values.
// You can construct a concrete instance of `FlyVolumeConfigInput` via:
//
//	FlyVolumeConfigArgs{...}
type FlyVolumeConfigInput interface {
	pulumi.Input

	ToFlyVolumeConfigOutput() FlyVolumeConfigOutput
	ToFlyVolumeConfigOutputWithContext(context.Context) FlyVolumeConfigOutput
}

type FlyVolumeConfigArgs struct {
	Name    pulumi.StringPtrInput    `pulumi:"name"`
	TempDir FlyTempDirVolumePtrInput `pulumi:"tempDir"`
}

func (FlyVolumeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyVolumeConfig)(nil)).Elem()
}

func (i FlyVolumeConfigArgs) ToFlyVolumeConfigOutput() FlyVolumeConfigOutput {
	return i.ToFlyVolumeConfigOutputWithContext(context.Background())
}

func (i FlyVolumeConfigArgs) ToFlyVolumeConfigOutputWithContext(ctx context.Context) FlyVolumeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyVolumeConfigOutput)
}

// FlyVolumeConfigArrayInput is an input type that accepts FlyVolumeConfigArray and FlyVolumeConfigArrayOutput values.
// You can construct a concrete instance of `FlyVolumeConfigArrayInput` via:
//
//	FlyVolumeConfigArray{ FlyVolumeConfigArgs{...} }
type FlyVolumeConfigArrayInput interface {
	pulumi.Input

	ToFlyVolumeConfigArrayOutput() FlyVolumeConfigArrayOutput
	ToFlyVolumeConfigArrayOutputWithContext(context.Context) FlyVolumeConfigArrayOutput
}

type FlyVolumeConfigArray []FlyVolumeConfigInput

func (FlyVolumeConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyVolumeConfig)(nil)).Elem()
}

func (i FlyVolumeConfigArray) ToFlyVolumeConfigArrayOutput() FlyVolumeConfigArrayOutput {
	return i.ToFlyVolumeConfigArrayOutputWithContext(context.Background())
}

func (i FlyVolumeConfigArray) ToFlyVolumeConfigArrayOutputWithContext(ctx context.Context) FlyVolumeConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlyVolumeConfigArrayOutput)
}

type FlyVolumeConfigOutput struct{ *pulumi.OutputState }

func (FlyVolumeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlyVolumeConfig)(nil)).Elem()
}

func (o FlyVolumeConfigOutput) ToFlyVolumeConfigOutput() FlyVolumeConfigOutput {
	return o
}

func (o FlyVolumeConfigOutput) ToFlyVolumeConfigOutputWithContext(ctx context.Context) FlyVolumeConfigOutput {
	return o
}

func (o FlyVolumeConfigOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlyVolumeConfig) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o FlyVolumeConfigOutput) TempDir() FlyTempDirVolumePtrOutput {
	return o.ApplyT(func(v FlyVolumeConfig) *FlyTempDirVolume { return v.TempDir }).(FlyTempDirVolumePtrOutput)
}

type FlyVolumeConfigArrayOutput struct{ *pulumi.OutputState }

func (FlyVolumeConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FlyVolumeConfig)(nil)).Elem()
}

func (o FlyVolumeConfigArrayOutput) ToFlyVolumeConfigArrayOutput() FlyVolumeConfigArrayOutput {
	return o
}

func (o FlyVolumeConfigArrayOutput) ToFlyVolumeConfigArrayOutputWithContext(ctx context.Context) FlyVolumeConfigArrayOutput {
	return o
}

func (o FlyVolumeConfigArrayOutput) Index(i pulumi.IntInput) FlyVolumeConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FlyVolumeConfig {
		return vs[0].([]FlyVolumeConfig)[vs[1].(int)]
	}).(FlyVolumeConfigOutput)
}

type ImageRef struct {
	Digest     *string           `pulumi:"digest"`
	Labels     map[string]string `pulumi:"labels"`
	Registry   *string           `pulumi:"registry"`
	Repository *string           `pulumi:"repository"`
	Tag        *string           `pulumi:"tag"`
}

type ImageRefOutput struct{ *pulumi.OutputState }

func (ImageRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageRef)(nil)).Elem()
}

func (o ImageRefOutput) ToImageRefOutput() ImageRefOutput {
	return o
}

func (o ImageRefOutput) ToImageRefOutputWithContext(ctx context.Context) ImageRefOutput {
	return o
}

func (o ImageRefOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRef) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

func (o ImageRefOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ImageRef) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ImageRefOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRef) *string { return v.Registry }).(pulumi.StringPtrOutput)
}

func (o ImageRefOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRef) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

func (o ImageRefOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageRef) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type ImageRefPtrOutput struct{ *pulumi.OutputState }

func (ImageRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRef)(nil)).Elem()
}

func (o ImageRefPtrOutput) ToImageRefPtrOutput() ImageRefPtrOutput {
	return o
}

func (o ImageRefPtrOutput) ToImageRefPtrOutputWithContext(ctx context.Context) ImageRefPtrOutput {
	return o
}

func (o ImageRefPtrOutput) Elem() ImageRefOutput {
	return o.ApplyT(func(v *ImageRef) ImageRef {
		if v != nil {
			return *v
		}
		var ret ImageRef
		return ret
	}).(ImageRefOutput)
}

func (o ImageRefPtrOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRef) *string {
		if v == nil {
			return nil
		}
		return v.Digest
	}).(pulumi.StringPtrOutput)
}

func (o ImageRefPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ImageRef) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

func (o ImageRefPtrOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRef) *string {
		if v == nil {
			return nil
		}
		return v.Registry
	}).(pulumi.StringPtrOutput)
}

func (o ImageRefPtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRef) *string {
		if v == nil {
			return nil
		}
		return v.Repository
	}).(pulumi.StringPtrOutput)
}

func (o ImageRefPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRef) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

type MachineEvent struct {
	FlyId     string                 `pulumi:"flyId"`
	Request   map[string]interface{} `pulumi:"request"`
	Source    *string                `pulumi:"source"`
	Status    *string                `pulumi:"status"`
	Timestamp *int                   `pulumi:"timestamp"`
	Type      *string                `pulumi:"type"`
}

type MachineEventOutput struct{ *pulumi.OutputState }

func (MachineEventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineEvent)(nil)).Elem()
}

func (o MachineEventOutput) ToMachineEventOutput() MachineEventOutput {
	return o
}

func (o MachineEventOutput) ToMachineEventOutputWithContext(ctx context.Context) MachineEventOutput {
	return o
}

func (o MachineEventOutput) FlyId() pulumi.StringOutput {
	return o.ApplyT(func(v MachineEvent) string { return v.FlyId }).(pulumi.StringOutput)
}

func (o MachineEventOutput) Request() pulumi.MapOutput {
	return o.ApplyT(func(v MachineEvent) map[string]interface{} { return v.Request }).(pulumi.MapOutput)
}

func (o MachineEventOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineEvent) *string { return v.Source }).(pulumi.StringPtrOutput)
}

func (o MachineEventOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineEvent) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func (o MachineEventOutput) Timestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineEvent) *int { return v.Timestamp }).(pulumi.IntPtrOutput)
}

func (o MachineEventOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineEvent) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MachineEventArrayOutput struct{ *pulumi.OutputState }

func (MachineEventArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineEvent)(nil)).Elem()
}

func (o MachineEventArrayOutput) ToMachineEventArrayOutput() MachineEventArrayOutput {
	return o
}

func (o MachineEventArrayOutput) ToMachineEventArrayOutputWithContext(ctx context.Context) MachineEventArrayOutput {
	return o
}

func (o MachineEventArrayOutput) Index(i pulumi.IntInput) MachineEventOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachineEvent {
		return vs[0].([]MachineEvent)[vs[1].(int)]
	}).(MachineEventOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlyContainerConfigInput)(nil)).Elem(), FlyContainerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyContainerConfigArrayInput)(nil)).Elem(), FlyContainerConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyContainerDependencyInput)(nil)).Elem(), FlyContainerDependencyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyContainerDependencyArrayInput)(nil)).Elem(), FlyContainerDependencyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyContainerHealthcheckInput)(nil)).Elem(), FlyContainerHealthcheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyContainerHealthcheckArrayInput)(nil)).Elem(), FlyContainerHealthcheckArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyContainerMountInput)(nil)).Elem(), FlyContainerMountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyContainerMountArrayInput)(nil)).Elem(), FlyContainerMountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyDNSConfigInput)(nil)).Elem(), FlyDNSConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyDNSConfigPtrInput)(nil)).Elem(), FlyDNSConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyDnsForwardRuleInput)(nil)).Elem(), FlyDnsForwardRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyDnsForwardRuleArrayInput)(nil)).Elem(), FlyDnsForwardRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyDnsOptionInput)(nil)).Elem(), FlyDnsOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyDnsOptionArrayInput)(nil)).Elem(), FlyDnsOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyEnvFromInput)(nil)).Elem(), FlyEnvFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyEnvFromArrayInput)(nil)).Elem(), FlyEnvFromArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyExecHealthcheckInput)(nil)).Elem(), FlyExecHealthcheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyExecHealthcheckPtrInput)(nil)).Elem(), FlyExecHealthcheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyFileInput)(nil)).Elem(), FlyFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyFileArrayInput)(nil)).Elem(), FlyFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyHTTPHealthcheckInput)(nil)).Elem(), FlyHTTPHealthcheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyHTTPHealthcheckPtrInput)(nil)).Elem(), FlyHTTPHealthcheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyHTTPOptionsInput)(nil)).Elem(), FlyHTTPOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyHTTPOptionsPtrInput)(nil)).Elem(), FlyHTTPOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyHTTPResponseOptionsInput)(nil)).Elem(), FlyHTTPResponseOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyHTTPResponseOptionsPtrInput)(nil)).Elem(), FlyHTTPResponseOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachineCheckInput)(nil)).Elem(), FlyMachineCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachineCheckArrayInput)(nil)).Elem(), FlyMachineCheckArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachineCheckMapInput)(nil)).Elem(), FlyMachineCheckMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachineConfigInput)(nil)).Elem(), FlyMachineConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachineGuestInput)(nil)).Elem(), FlyMachineGuestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachineGuestPtrInput)(nil)).Elem(), FlyMachineGuestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachineHTTPHeaderInput)(nil)).Elem(), FlyMachineHTTPHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachineHTTPHeaderArrayInput)(nil)).Elem(), FlyMachineHTTPHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachineInitInput)(nil)).Elem(), FlyMachineInitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachineInitPtrInput)(nil)).Elem(), FlyMachineInitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachineMetricsInput)(nil)).Elem(), FlyMachineMetricsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachineMetricsPtrInput)(nil)).Elem(), FlyMachineMetricsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachineMountInput)(nil)).Elem(), FlyMachineMountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachineMountArrayInput)(nil)).Elem(), FlyMachineMountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachinePortInput)(nil)).Elem(), FlyMachinePortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachinePortArrayInput)(nil)).Elem(), FlyMachinePortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachineProcessInput)(nil)).Elem(), FlyMachineProcessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachineProcessArrayInput)(nil)).Elem(), FlyMachineProcessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachineRestartInput)(nil)).Elem(), FlyMachineRestartArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachineRestartPtrInput)(nil)).Elem(), FlyMachineRestartArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachineSecretInput)(nil)).Elem(), FlyMachineSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachineSecretArrayInput)(nil)).Elem(), FlyMachineSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachineServiceInput)(nil)).Elem(), FlyMachineServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachineServiceArrayInput)(nil)).Elem(), FlyMachineServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachineServiceConcurrencyInput)(nil)).Elem(), FlyMachineServiceConcurrencyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyMachineServiceConcurrencyPtrInput)(nil)).Elem(), FlyMachineServiceConcurrencyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyProxyProtoOptionsInput)(nil)).Elem(), FlyProxyProtoOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyProxyProtoOptionsPtrInput)(nil)).Elem(), FlyProxyProtoOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyStaticInput)(nil)).Elem(), FlyStaticArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyStaticArrayInput)(nil)).Elem(), FlyStaticArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyStopConfigInput)(nil)).Elem(), FlyStopConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyStopConfigPtrInput)(nil)).Elem(), FlyStopConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyTCPHealthcheckInput)(nil)).Elem(), FlyTCPHealthcheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyTCPHealthcheckPtrInput)(nil)).Elem(), FlyTCPHealthcheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyTLSOptionsInput)(nil)).Elem(), FlyTLSOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyTLSOptionsPtrInput)(nil)).Elem(), FlyTLSOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyTempDirVolumeInput)(nil)).Elem(), FlyTempDirVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyTempDirVolumePtrInput)(nil)).Elem(), FlyTempDirVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyVolumeConfigInput)(nil)).Elem(), FlyVolumeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlyVolumeConfigArrayInput)(nil)).Elem(), FlyVolumeConfigArray{})
	pulumi.RegisterOutputType(CheckStatusOutput{})
	pulumi.RegisterOutputType(CheckStatusArrayOutput{})
	pulumi.RegisterOutputType(FlyContainerConfigOutput{})
	pulumi.RegisterOutputType(FlyContainerConfigArrayOutput{})
	pulumi.RegisterOutputType(FlyContainerDependencyOutput{})
	pulumi.RegisterOutputType(FlyContainerDependencyArrayOutput{})
	pulumi.RegisterOutputType(FlyContainerHealthcheckOutput{})
	pulumi.RegisterOutputType(FlyContainerHealthcheckArrayOutput{})
	pulumi.RegisterOutputType(FlyContainerMountOutput{})
	pulumi.RegisterOutputType(FlyContainerMountArrayOutput{})
	pulumi.RegisterOutputType(FlyDNSConfigOutput{})
	pulumi.RegisterOutputType(FlyDNSConfigPtrOutput{})
	pulumi.RegisterOutputType(FlyDnsForwardRuleOutput{})
	pulumi.RegisterOutputType(FlyDnsForwardRuleArrayOutput{})
	pulumi.RegisterOutputType(FlyDnsOptionOutput{})
	pulumi.RegisterOutputType(FlyDnsOptionArrayOutput{})
	pulumi.RegisterOutputType(FlyEnvFromOutput{})
	pulumi.RegisterOutputType(FlyEnvFromArrayOutput{})
	pulumi.RegisterOutputType(FlyExecHealthcheckOutput{})
	pulumi.RegisterOutputType(FlyExecHealthcheckPtrOutput{})
	pulumi.RegisterOutputType(FlyFileOutput{})
	pulumi.RegisterOutputType(FlyFileArrayOutput{})
	pulumi.RegisterOutputType(FlyHTTPHealthcheckOutput{})
	pulumi.RegisterOutputType(FlyHTTPHealthcheckPtrOutput{})
	pulumi.RegisterOutputType(FlyHTTPOptionsOutput{})
	pulumi.RegisterOutputType(FlyHTTPOptionsPtrOutput{})
	pulumi.RegisterOutputType(FlyHTTPResponseOptionsOutput{})
	pulumi.RegisterOutputType(FlyHTTPResponseOptionsPtrOutput{})
	pulumi.RegisterOutputType(FlyMachineCheckOutput{})
	pulumi.RegisterOutputType(FlyMachineCheckArrayOutput{})
	pulumi.RegisterOutputType(FlyMachineCheckMapOutput{})
	pulumi.RegisterOutputType(FlyMachineConfigOutput{})
	pulumi.RegisterOutputType(FlyMachineConfigPtrOutput{})
	pulumi.RegisterOutputType(FlyMachineGuestOutput{})
	pulumi.RegisterOutputType(FlyMachineGuestPtrOutput{})
	pulumi.RegisterOutputType(FlyMachineHTTPHeaderOutput{})
	pulumi.RegisterOutputType(FlyMachineHTTPHeaderArrayOutput{})
	pulumi.RegisterOutputType(FlyMachineInitOutput{})
	pulumi.RegisterOutputType(FlyMachineInitPtrOutput{})
	pulumi.RegisterOutputType(FlyMachineMetricsOutput{})
	pulumi.RegisterOutputType(FlyMachineMetricsPtrOutput{})
	pulumi.RegisterOutputType(FlyMachineMountOutput{})
	pulumi.RegisterOutputType(FlyMachineMountArrayOutput{})
	pulumi.RegisterOutputType(FlyMachinePortOutput{})
	pulumi.RegisterOutputType(FlyMachinePortArrayOutput{})
	pulumi.RegisterOutputType(FlyMachineProcessOutput{})
	pulumi.RegisterOutputType(FlyMachineProcessArrayOutput{})
	pulumi.RegisterOutputType(FlyMachineRestartOutput{})
	pulumi.RegisterOutputType(FlyMachineRestartPtrOutput{})
	pulumi.RegisterOutputType(FlyMachineSecretOutput{})
	pulumi.RegisterOutputType(FlyMachineSecretArrayOutput{})
	pulumi.RegisterOutputType(FlyMachineServiceOutput{})
	pulumi.RegisterOutputType(FlyMachineServiceArrayOutput{})
	pulumi.RegisterOutputType(FlyMachineServiceConcurrencyOutput{})
	pulumi.RegisterOutputType(FlyMachineServiceConcurrencyPtrOutput{})
	pulumi.RegisterOutputType(FlyProxyProtoOptionsOutput{})
	pulumi.RegisterOutputType(FlyProxyProtoOptionsPtrOutput{})
	pulumi.RegisterOutputType(FlyStaticOutput{})
	pulumi.RegisterOutputType(FlyStaticArrayOutput{})
	pulumi.RegisterOutputType(FlyStopConfigOutput{})
	pulumi.RegisterOutputType(FlyStopConfigPtrOutput{})
	pulumi.RegisterOutputType(FlyTCPHealthcheckOutput{})
	pulumi.RegisterOutputType(FlyTCPHealthcheckPtrOutput{})
	pulumi.RegisterOutputType(FlyTLSOptionsOutput{})
	pulumi.RegisterOutputType(FlyTLSOptionsPtrOutput{})
	pulumi.RegisterOutputType(FlyTempDirVolumeOutput{})
	pulumi.RegisterOutputType(FlyTempDirVolumePtrOutput{})
	pulumi.RegisterOutputType(FlyVolumeConfigOutput{})
	pulumi.RegisterOutputType(FlyVolumeConfigArrayOutput{})
	pulumi.RegisterOutputType(ImageRefOutput{})
	pulumi.RegisterOutputType(ImageRefPtrOutput{})
	pulumi.RegisterOutputType(MachineEventOutput{})
	pulumi.RegisterOutputType(MachineEventArrayOutput{})
}
