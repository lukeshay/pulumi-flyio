// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package flyio

import (
	"context"
	"reflect"

	"errors"
	"github.com/lukeshay/pulumi-flyio/sdk/go/flyio/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Fly.io WireGuard peer for private network connectivity.
type WireGuardPeer struct {
	pulumi.CustomResourceState

	// The endpoint IP address for the WireGuard peer.
	EndpointIp pulumi.StringOutput `pulumi:"endpointIp"`
	// The name of the WireGuard peer.
	Name pulumi.StringOutput `pulumi:"name"`
	// The network the WireGuard peer belongs to.
	Network pulumi.StringPtrOutput `pulumi:"network"`
	// The organization the WireGuard peer belongs to.
	Org pulumi.StringOutput `pulumi:"org"`
	// The IP address assigned to the WireGuard peer.
	PeerIp pulumi.StringOutput `pulumi:"peerIp"`
	// The private key of the WireGuard peer.
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// The public key of the WireGuard peer.
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// The region the WireGuard peer is in.
	Region pulumi.StringOutput `pulumi:"region"`
	// The WireGuard configuration for the peer.
	WireguardConfig pulumi.StringOutput `pulumi:"wireguardConfig"`
}

// NewWireGuardPeer registers a new resource with the given unique name, arguments, and options.
func NewWireGuardPeer(ctx *pulumi.Context,
	name string, args *WireGuardPeerArgs, opts ...pulumi.ResourceOption) (*WireGuardPeer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Org == nil {
		return nil, errors.New("invalid value for required argument 'Org'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"privateKey",
		"publicKey",
		"wireguardConfig",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WireGuardPeer
	err := ctx.RegisterResource("flyio:index:WireGuardPeer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWireGuardPeer gets an existing WireGuardPeer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWireGuardPeer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WireGuardPeerState, opts ...pulumi.ResourceOption) (*WireGuardPeer, error) {
	var resource WireGuardPeer
	err := ctx.ReadResource("flyio:index:WireGuardPeer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WireGuardPeer resources.
type wireGuardPeerState struct {
}

type WireGuardPeerState struct {
}

func (WireGuardPeerState) ElementType() reflect.Type {
	return reflect.TypeOf((*wireGuardPeerState)(nil)).Elem()
}

type wireGuardPeerArgs struct {
	// The name of the WireGuard peer.
	Name *string `pulumi:"name"`
	// The network to create the WireGuard peer in.
	Network *string `pulumi:"network"`
	// The organization to create the WireGuard peer in.
	Org string `pulumi:"org"`
	// The region to create the WireGuard peer in.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a WireGuardPeer resource.
type WireGuardPeerArgs struct {
	// The name of the WireGuard peer.
	Name pulumi.StringPtrInput
	// The network to create the WireGuard peer in.
	Network pulumi.StringPtrInput
	// The organization to create the WireGuard peer in.
	Org pulumi.StringInput
	// The region to create the WireGuard peer in.
	Region pulumi.StringPtrInput
}

func (WireGuardPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*wireGuardPeerArgs)(nil)).Elem()
}

type WireGuardPeerInput interface {
	pulumi.Input

	ToWireGuardPeerOutput() WireGuardPeerOutput
	ToWireGuardPeerOutputWithContext(ctx context.Context) WireGuardPeerOutput
}

func (*WireGuardPeer) ElementType() reflect.Type {
	return reflect.TypeOf((**WireGuardPeer)(nil)).Elem()
}

func (i *WireGuardPeer) ToWireGuardPeerOutput() WireGuardPeerOutput {
	return i.ToWireGuardPeerOutputWithContext(context.Background())
}

func (i *WireGuardPeer) ToWireGuardPeerOutputWithContext(ctx context.Context) WireGuardPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WireGuardPeerOutput)
}

// WireGuardPeerArrayInput is an input type that accepts WireGuardPeerArray and WireGuardPeerArrayOutput values.
// You can construct a concrete instance of `WireGuardPeerArrayInput` via:
//
//	WireGuardPeerArray{ WireGuardPeerArgs{...} }
type WireGuardPeerArrayInput interface {
	pulumi.Input

	ToWireGuardPeerArrayOutput() WireGuardPeerArrayOutput
	ToWireGuardPeerArrayOutputWithContext(context.Context) WireGuardPeerArrayOutput
}

type WireGuardPeerArray []WireGuardPeerInput

func (WireGuardPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WireGuardPeer)(nil)).Elem()
}

func (i WireGuardPeerArray) ToWireGuardPeerArrayOutput() WireGuardPeerArrayOutput {
	return i.ToWireGuardPeerArrayOutputWithContext(context.Background())
}

func (i WireGuardPeerArray) ToWireGuardPeerArrayOutputWithContext(ctx context.Context) WireGuardPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WireGuardPeerArrayOutput)
}

// WireGuardPeerMapInput is an input type that accepts WireGuardPeerMap and WireGuardPeerMapOutput values.
// You can construct a concrete instance of `WireGuardPeerMapInput` via:
//
//	WireGuardPeerMap{ "key": WireGuardPeerArgs{...} }
type WireGuardPeerMapInput interface {
	pulumi.Input

	ToWireGuardPeerMapOutput() WireGuardPeerMapOutput
	ToWireGuardPeerMapOutputWithContext(context.Context) WireGuardPeerMapOutput
}

type WireGuardPeerMap map[string]WireGuardPeerInput

func (WireGuardPeerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WireGuardPeer)(nil)).Elem()
}

func (i WireGuardPeerMap) ToWireGuardPeerMapOutput() WireGuardPeerMapOutput {
	return i.ToWireGuardPeerMapOutputWithContext(context.Background())
}

func (i WireGuardPeerMap) ToWireGuardPeerMapOutputWithContext(ctx context.Context) WireGuardPeerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WireGuardPeerMapOutput)
}

type WireGuardPeerOutput struct{ *pulumi.OutputState }

func (WireGuardPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WireGuardPeer)(nil)).Elem()
}

func (o WireGuardPeerOutput) ToWireGuardPeerOutput() WireGuardPeerOutput {
	return o
}

func (o WireGuardPeerOutput) ToWireGuardPeerOutputWithContext(ctx context.Context) WireGuardPeerOutput {
	return o
}

// The endpoint IP address for the WireGuard peer.
func (o WireGuardPeerOutput) EndpointIp() pulumi.StringOutput {
	return o.ApplyT(func(v *WireGuardPeer) pulumi.StringOutput { return v.EndpointIp }).(pulumi.StringOutput)
}

// The name of the WireGuard peer.
func (o WireGuardPeerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WireGuardPeer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The network the WireGuard peer belongs to.
func (o WireGuardPeerOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WireGuardPeer) pulumi.StringPtrOutput { return v.Network }).(pulumi.StringPtrOutput)
}

// The organization the WireGuard peer belongs to.
func (o WireGuardPeerOutput) Org() pulumi.StringOutput {
	return o.ApplyT(func(v *WireGuardPeer) pulumi.StringOutput { return v.Org }).(pulumi.StringOutput)
}

// The IP address assigned to the WireGuard peer.
func (o WireGuardPeerOutput) PeerIp() pulumi.StringOutput {
	return o.ApplyT(func(v *WireGuardPeer) pulumi.StringOutput { return v.PeerIp }).(pulumi.StringOutput)
}

// The private key of the WireGuard peer.
func (o WireGuardPeerOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *WireGuardPeer) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

// The public key of the WireGuard peer.
func (o WireGuardPeerOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *WireGuardPeer) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

// The region the WireGuard peer is in.
func (o WireGuardPeerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *WireGuardPeer) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The WireGuard configuration for the peer.
func (o WireGuardPeerOutput) WireguardConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *WireGuardPeer) pulumi.StringOutput { return v.WireguardConfig }).(pulumi.StringOutput)
}

type WireGuardPeerArrayOutput struct{ *pulumi.OutputState }

func (WireGuardPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WireGuardPeer)(nil)).Elem()
}

func (o WireGuardPeerArrayOutput) ToWireGuardPeerArrayOutput() WireGuardPeerArrayOutput {
	return o
}

func (o WireGuardPeerArrayOutput) ToWireGuardPeerArrayOutputWithContext(ctx context.Context) WireGuardPeerArrayOutput {
	return o
}

func (o WireGuardPeerArrayOutput) Index(i pulumi.IntInput) WireGuardPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WireGuardPeer {
		return vs[0].([]*WireGuardPeer)[vs[1].(int)]
	}).(WireGuardPeerOutput)
}

type WireGuardPeerMapOutput struct{ *pulumi.OutputState }

func (WireGuardPeerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WireGuardPeer)(nil)).Elem()
}

func (o WireGuardPeerMapOutput) ToWireGuardPeerMapOutput() WireGuardPeerMapOutput {
	return o
}

func (o WireGuardPeerMapOutput) ToWireGuardPeerMapOutputWithContext(ctx context.Context) WireGuardPeerMapOutput {
	return o
}

func (o WireGuardPeerMapOutput) MapIndex(k pulumi.StringInput) WireGuardPeerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WireGuardPeer {
		return vs[0].(map[string]*WireGuardPeer)[vs[1].(string)]
	}).(WireGuardPeerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WireGuardPeerInput)(nil)).Elem(), &WireGuardPeer{})
	pulumi.RegisterInputType(reflect.TypeOf((*WireGuardPeerArrayInput)(nil)).Elem(), WireGuardPeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WireGuardPeerMapInput)(nil)).Elem(), WireGuardPeerMap{})
	pulumi.RegisterOutputType(WireGuardPeerOutput{})
	pulumi.RegisterOutputType(WireGuardPeerArrayOutput{})
	pulumi.RegisterOutputType(WireGuardPeerMapOutput{})
}
