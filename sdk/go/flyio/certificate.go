// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package flyio

import (
	"context"
	"reflect"

	"errors"
	"github.com/lukeshay/pulumi-flyio/sdk/go/flyio/internal"
	"github.com/lukeshay/pulumi-flyio/sdk/go/flyio/time"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Fly.io SSL/TLS certificate for an app's domain.
type Certificate struct {
	pulumi.CustomResourceState

	// Whether ACME ALPN verification is configured.
	AcmeAlpnConfigured pulumi.BoolOutput `pulumi:"acmeAlpnConfigured"`
	// Whether ACME DNS verification is configured.
	AcmeDnsConfigured pulumi.BoolOutput `pulumi:"acmeDnsConfigured"`
	// The name of the Fly app.
	App pulumi.StringOutput `pulumi:"app"`
	// The certificate authority used.
	CertificateAuthority pulumi.StringOutput `pulumi:"certificateAuthority"`
	// The status of the certificate.
	ClientStatus pulumi.StringOutput `pulumi:"clientStatus"`
	// Whether the certificate is fully configured.
	Configured pulumi.BoolOutput `pulumi:"configured"`
	// When the certificate was created.
	CreatedAt time.TimeOutput `pulumi:"createdAt"`
	// The DNS provider for the hostname.
	DnsProvider pulumi.StringOutput `pulumi:"dnsProvider"`
	// Hostname for DNS validation.
	DnsValidationHostname pulumi.StringOutput `pulumi:"dnsValidationHostname"`
	// Instructions for DNS validation.
	DnsValidationInstructions pulumi.StringOutput `pulumi:"dnsValidationInstructions"`
	// Target for DNS validation.
	DnsValidationTarget pulumi.StringOutput `pulumi:"dnsValidationTarget"`
	// The Fly.io certificate ID.
	FlyId pulumi.StringOutput `pulumi:"flyId"`
	// The hostname for the certificate.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// The input arguments used to create the certificate.
	Input CertificateArgsTypeOutput `pulumi:"input"`
	// Whether the hostname is an apex domain.
	IsApex pulumi.BoolOutput `pulumi:"isApex"`
	// Whether the certificate is a wildcard certificate.
	IsWildcard pulumi.BoolOutput `pulumi:"isWildcard"`
	// The source of the certificate.
	Source pulumi.StringOutput `pulumi:"source"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.App == nil {
		return nil, errors.New("invalid value for required argument 'App'")
	}
	if args.Hostname == nil {
		return nil, errors.New("invalid value for required argument 'Hostname'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Certificate
	err := ctx.RegisterResource("flyio:index:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("flyio:index:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
}

type CertificateState struct {
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	// The name of the Fly app to add the certificate to.
	App string `pulumi:"app"`
	// The hostname for the certificate (e.g., example.com).
	Hostname string `pulumi:"hostname"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// The name of the Fly app to add the certificate to.
	App pulumi.StringInput
	// The hostname for the certificate (e.g., example.com).
	Hostname pulumi.StringInput
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}

type CertificateInput interface {
	pulumi.Input

	ToCertificateOutput() CertificateOutput
	ToCertificateOutputWithContext(ctx context.Context) CertificateOutput
}

func (*Certificate) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (i *Certificate) ToCertificateOutput() CertificateOutput {
	return i.ToCertificateOutputWithContext(context.Background())
}

func (i *Certificate) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOutput)
}

// CertificateArrayInput is an input type that accepts CertificateArray and CertificateArrayOutput values.
// You can construct a concrete instance of `CertificateArrayInput` via:
//
//	CertificateArray{ CertificateArgs{...} }
type CertificateArrayInput interface {
	pulumi.Input

	ToCertificateArrayOutput() CertificateArrayOutput
	ToCertificateArrayOutputWithContext(context.Context) CertificateArrayOutput
}

type CertificateArray []CertificateInput

func (CertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Certificate)(nil)).Elem()
}

func (i CertificateArray) ToCertificateArrayOutput() CertificateArrayOutput {
	return i.ToCertificateArrayOutputWithContext(context.Background())
}

func (i CertificateArray) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateArrayOutput)
}

// CertificateMapInput is an input type that accepts CertificateMap and CertificateMapOutput values.
// You can construct a concrete instance of `CertificateMapInput` via:
//
//	CertificateMap{ "key": CertificateArgs{...} }
type CertificateMapInput interface {
	pulumi.Input

	ToCertificateMapOutput() CertificateMapOutput
	ToCertificateMapOutputWithContext(context.Context) CertificateMapOutput
}

type CertificateMap map[string]CertificateInput

func (CertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Certificate)(nil)).Elem()
}

func (i CertificateMap) ToCertificateMapOutput() CertificateMapOutput {
	return i.ToCertificateMapOutputWithContext(context.Background())
}

func (i CertificateMap) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapOutput)
}

type CertificateOutput struct{ *pulumi.OutputState }

func (CertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (o CertificateOutput) ToCertificateOutput() CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return o
}

// Whether ACME ALPN verification is configured.
func (o CertificateOutput) AcmeAlpnConfigured() pulumi.BoolOutput {
	return o.ApplyT(func(v *Certificate) pulumi.BoolOutput { return v.AcmeAlpnConfigured }).(pulumi.BoolOutput)
}

// Whether ACME DNS verification is configured.
func (o CertificateOutput) AcmeDnsConfigured() pulumi.BoolOutput {
	return o.ApplyT(func(v *Certificate) pulumi.BoolOutput { return v.AcmeDnsConfigured }).(pulumi.BoolOutput)
}

// The name of the Fly app.
func (o CertificateOutput) App() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.App }).(pulumi.StringOutput)
}

// The certificate authority used.
func (o CertificateOutput) CertificateAuthority() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.CertificateAuthority }).(pulumi.StringOutput)
}

// The status of the certificate.
func (o CertificateOutput) ClientStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.ClientStatus }).(pulumi.StringOutput)
}

// Whether the certificate is fully configured.
func (o CertificateOutput) Configured() pulumi.BoolOutput {
	return o.ApplyT(func(v *Certificate) pulumi.BoolOutput { return v.Configured }).(pulumi.BoolOutput)
}

// When the certificate was created.
func (o CertificateOutput) CreatedAt() time.TimeOutput {
	return o.ApplyT(func(v *Certificate) time.TimeOutput { return v.CreatedAt }).(time.TimeOutput)
}

// The DNS provider for the hostname.
func (o CertificateOutput) DnsProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.DnsProvider }).(pulumi.StringOutput)
}

// Hostname for DNS validation.
func (o CertificateOutput) DnsValidationHostname() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.DnsValidationHostname }).(pulumi.StringOutput)
}

// Instructions for DNS validation.
func (o CertificateOutput) DnsValidationInstructions() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.DnsValidationInstructions }).(pulumi.StringOutput)
}

// Target for DNS validation.
func (o CertificateOutput) DnsValidationTarget() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.DnsValidationTarget }).(pulumi.StringOutput)
}

// The Fly.io certificate ID.
func (o CertificateOutput) FlyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.FlyId }).(pulumi.StringOutput)
}

// The hostname for the certificate.
func (o CertificateOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// The input arguments used to create the certificate.
func (o CertificateOutput) Input() CertificateArgsTypeOutput {
	return o.ApplyT(func(v *Certificate) CertificateArgsTypeOutput { return v.Input }).(CertificateArgsTypeOutput)
}

// Whether the hostname is an apex domain.
func (o CertificateOutput) IsApex() pulumi.BoolOutput {
	return o.ApplyT(func(v *Certificate) pulumi.BoolOutput { return v.IsApex }).(pulumi.BoolOutput)
}

// Whether the certificate is a wildcard certificate.
func (o CertificateOutput) IsWildcard() pulumi.BoolOutput {
	return o.ApplyT(func(v *Certificate) pulumi.BoolOutput { return v.IsWildcard }).(pulumi.BoolOutput)
}

// The source of the certificate.
func (o CertificateOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

type CertificateArrayOutput struct{ *pulumi.OutputState }

func (CertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Certificate)(nil)).Elem()
}

func (o CertificateArrayOutput) ToCertificateArrayOutput() CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) Index(i pulumi.IntInput) CertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Certificate {
		return vs[0].([]*Certificate)[vs[1].(int)]
	}).(CertificateOutput)
}

type CertificateMapOutput struct{ *pulumi.OutputState }

func (CertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Certificate)(nil)).Elem()
}

func (o CertificateMapOutput) ToCertificateMapOutput() CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) MapIndex(k pulumi.StringInput) CertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Certificate {
		return vs[0].(map[string]*Certificate)[vs[1].(string)]
	}).(CertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateInput)(nil)).Elem(), &Certificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateArrayInput)(nil)).Elem(), CertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapInput)(nil)).Elem(), CertificateMap{})
	pulumi.RegisterOutputType(CertificateOutput{})
	pulumi.RegisterOutputType(CertificateArrayOutput{})
	pulumi.RegisterOutputType(CertificateMapOutput{})
}
