// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package flyio

import (
	"context"
	"reflect"

	"github.com/lukeshay/pulumi-flyio/sdk/go/flyio/flyio"
	"github.com/lukeshay/pulumi-flyio/sdk/go/flyio/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AppArgsType struct {
	AppName          string  `pulumi:"appName"`
	EnableSubdomains *bool   `pulumi:"enableSubdomains"`
	Network          *string `pulumi:"network"`
	OrgSlug          string  `pulumi:"orgSlug"`
}

type AppArgsTypeOutput struct{ *pulumi.OutputState }

func (AppArgsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppArgsType)(nil)).Elem()
}

func (o AppArgsTypeOutput) ToAppArgsTypeOutput() AppArgsTypeOutput {
	return o
}

func (o AppArgsTypeOutput) ToAppArgsTypeOutputWithContext(ctx context.Context) AppArgsTypeOutput {
	return o
}

func (o AppArgsTypeOutput) AppName() pulumi.StringOutput {
	return o.ApplyT(func(v AppArgsType) string { return v.AppName }).(pulumi.StringOutput)
}

func (o AppArgsTypeOutput) EnableSubdomains() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AppArgsType) *bool { return v.EnableSubdomains }).(pulumi.BoolPtrOutput)
}

func (o AppArgsTypeOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppArgsType) *string { return v.Network }).(pulumi.StringPtrOutput)
}

func (o AppArgsTypeOutput) OrgSlug() pulumi.StringOutput {
	return o.ApplyT(func(v AppArgsType) string { return v.OrgSlug }).(pulumi.StringOutput)
}

type MachineArgsType struct {
	AppName                 string                 `pulumi:"appName"`
	Config                  flyio.FlyMachineConfig `pulumi:"config"`
	LeaseTtl                *int                   `pulumi:"leaseTtl"`
	Lsvd                    *bool                  `pulumi:"lsvd"`
	Name                    *string                `pulumi:"name"`
	Region                  *string                `pulumi:"region"`
	SkipLaunch              *bool                  `pulumi:"skipLaunch"`
	SkipServiceRegistration *bool                  `pulumi:"skipServiceRegistration"`
	UpdateStrategy          *string                `pulumi:"updateStrategy"`
	WaitForChecks           *int                   `pulumi:"waitForChecks"`
}

type MachineArgsTypeOutput struct{ *pulumi.OutputState }

func (MachineArgsTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineArgsType)(nil)).Elem()
}

func (o MachineArgsTypeOutput) ToMachineArgsTypeOutput() MachineArgsTypeOutput {
	return o
}

func (o MachineArgsTypeOutput) ToMachineArgsTypeOutputWithContext(ctx context.Context) MachineArgsTypeOutput {
	return o
}

func (o MachineArgsTypeOutput) AppName() pulumi.StringOutput {
	return o.ApplyT(func(v MachineArgsType) string { return v.AppName }).(pulumi.StringOutput)
}

func (o MachineArgsTypeOutput) Config() flyio.FlyMachineConfigOutput {
	return o.ApplyT(func(v MachineArgsType) flyio.FlyMachineConfig { return v.Config }).(flyio.FlyMachineConfigOutput)
}

func (o MachineArgsTypeOutput) LeaseTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineArgsType) *int { return v.LeaseTtl }).(pulumi.IntPtrOutput)
}

func (o MachineArgsTypeOutput) Lsvd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MachineArgsType) *bool { return v.Lsvd }).(pulumi.BoolPtrOutput)
}

func (o MachineArgsTypeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineArgsType) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o MachineArgsTypeOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineArgsType) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func (o MachineArgsTypeOutput) SkipLaunch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MachineArgsType) *bool { return v.SkipLaunch }).(pulumi.BoolPtrOutput)
}

func (o MachineArgsTypeOutput) SkipServiceRegistration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MachineArgsType) *bool { return v.SkipServiceRegistration }).(pulumi.BoolPtrOutput)
}

func (o MachineArgsTypeOutput) UpdateStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineArgsType) *string { return v.UpdateStrategy }).(pulumi.StringPtrOutput)
}

func (o MachineArgsTypeOutput) WaitForChecks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MachineArgsType) *int { return v.WaitForChecks }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AppArgsTypeOutput{})
	pulumi.RegisterOutputType(MachineArgsTypeOutput{})
}
