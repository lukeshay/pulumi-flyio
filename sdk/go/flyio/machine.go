// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package flyio

import (
	"context"
	"reflect"

	"errors"
	"flyio"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"internal"
)

type Machine struct {
	pulumi.CustomResourceState

	AppName    pulumi.StringOutput           `pulumi:"appName"`
	Checks     flyio.CheckStatusArrayOutput  `pulumi:"checks"`
	Config     flyio.FlyMachineConfigOutput  `pulumi:"config"`
	CreatedAt  pulumi.StringPtrOutput        `pulumi:"createdAt"`
	Events     flyio.MachineEventArrayOutput `pulumi:"events"`
	FlyId      pulumi.StringOutput           `pulumi:"flyId"`
	ImageRef   flyio.ImageRefPtrOutput       `pulumi:"imageRef"`
	Input      MachineArgsTypeOutput         `pulumi:"input"`
	InstanceId pulumi.StringPtrOutput        `pulumi:"instanceId"`
	Name       pulumi.StringOutput           `pulumi:"name"`
	Nonce      pulumi.StringPtrOutput        `pulumi:"nonce"`
	PrivateIp  pulumi.StringPtrOutput        `pulumi:"privateIp"`
	Region     pulumi.StringPtrOutput        `pulumi:"region"`
	State      pulumi.StringOutput           `pulumi:"state"`
	UpdatedAt  pulumi.StringPtrOutput        `pulumi:"updatedAt"`
}

// NewMachine registers a new resource with the given unique name, arguments, and options.
func NewMachine(ctx *pulumi.Context,
	name string, args *MachineArgs, opts ...pulumi.ResourceOption) (*Machine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppName == nil {
		return nil, errors.New("invalid value for required argument 'AppName'")
	}
	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Machine
	err := ctx.RegisterResource("flyio:index:Machine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMachine gets an existing Machine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMachine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MachineState, opts ...pulumi.ResourceOption) (*Machine, error) {
	var resource Machine
	err := ctx.ReadResource("flyio:index:Machine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Machine resources.
type machineState struct {
}

type MachineState struct {
}

func (MachineState) ElementType() reflect.Type {
	return reflect.TypeOf((*machineState)(nil)).Elem()
}

type machineArgs struct {
	AppName                 string                 `pulumi:"appName"`
	Config                  flyio.FlyMachineConfig `pulumi:"config"`
	LeaseTtl                *int                   `pulumi:"leaseTtl"`
	Lsvd                    *bool                  `pulumi:"lsvd"`
	Name                    *string                `pulumi:"name"`
	Region                  *string                `pulumi:"region"`
	SkipLaunch              *bool                  `pulumi:"skipLaunch"`
	SkipServiceRegistration *bool                  `pulumi:"skipServiceRegistration"`
	UpdateStrategy          *string                `pulumi:"updateStrategy"`
	WaitForChecks           *int                   `pulumi:"waitForChecks"`
}

// The set of arguments for constructing a Machine resource.
type MachineArgs struct {
	AppName                 pulumi.StringInput
	Config                  flyio.FlyMachineConfigInput
	LeaseTtl                pulumi.IntPtrInput
	Lsvd                    pulumi.BoolPtrInput
	Name                    pulumi.StringPtrInput
	Region                  pulumi.StringPtrInput
	SkipLaunch              pulumi.BoolPtrInput
	SkipServiceRegistration pulumi.BoolPtrInput
	UpdateStrategy          pulumi.StringPtrInput
	WaitForChecks           pulumi.IntPtrInput
}

func (MachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*machineArgs)(nil)).Elem()
}

type MachineInput interface {
	pulumi.Input

	ToMachineOutput() MachineOutput
	ToMachineOutputWithContext(ctx context.Context) MachineOutput
}

func (*Machine) ElementType() reflect.Type {
	return reflect.TypeOf((**Machine)(nil)).Elem()
}

func (i *Machine) ToMachineOutput() MachineOutput {
	return i.ToMachineOutputWithContext(context.Background())
}

func (i *Machine) ToMachineOutputWithContext(ctx context.Context) MachineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineOutput)
}

type MachineOutput struct{ *pulumi.OutputState }

func (MachineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Machine)(nil)).Elem()
}

func (o MachineOutput) ToMachineOutput() MachineOutput {
	return o
}

func (o MachineOutput) ToMachineOutputWithContext(ctx context.Context) MachineOutput {
	return o
}

func (o MachineOutput) AppName() pulumi.StringOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringOutput { return v.AppName }).(pulumi.StringOutput)
}

func (o MachineOutput) Checks() flyio.CheckStatusArrayOutput {
	return o.ApplyT(func(v *Machine) flyio.CheckStatusArrayOutput { return v.Checks }).(flyio.CheckStatusArrayOutput)
}

func (o MachineOutput) Config() flyio.FlyMachineConfigOutput {
	return o.ApplyT(func(v *Machine) flyio.FlyMachineConfigOutput { return v.Config }).(flyio.FlyMachineConfigOutput)
}

func (o MachineOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringPtrOutput { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

func (o MachineOutput) Events() flyio.MachineEventArrayOutput {
	return o.ApplyT(func(v *Machine) flyio.MachineEventArrayOutput { return v.Events }).(flyio.MachineEventArrayOutput)
}

func (o MachineOutput) FlyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringOutput { return v.FlyId }).(pulumi.StringOutput)
}

func (o MachineOutput) ImageRef() flyio.ImageRefPtrOutput {
	return o.ApplyT(func(v *Machine) flyio.ImageRefPtrOutput { return v.ImageRef }).(flyio.ImageRefPtrOutput)
}

func (o MachineOutput) Input() MachineArgsTypeOutput {
	return o.ApplyT(func(v *Machine) MachineArgsTypeOutput { return v.Input }).(MachineArgsTypeOutput)
}

func (o MachineOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringPtrOutput { return v.InstanceId }).(pulumi.StringPtrOutput)
}

func (o MachineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MachineOutput) Nonce() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringPtrOutput { return v.Nonce }).(pulumi.StringPtrOutput)
}

func (o MachineOutput) PrivateIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringPtrOutput { return v.PrivateIp }).(pulumi.StringPtrOutput)
}

func (o MachineOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

func (o MachineOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o MachineOutput) UpdatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Machine) pulumi.StringPtrOutput { return v.UpdatedAt }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MachineInput)(nil)).Elem(), &Machine{})
	pulumi.RegisterOutputType(MachineOutput{})
}
