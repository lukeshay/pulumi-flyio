// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PulumiFlyio.Flyio
{
    /// <summary>
    /// A Fly.io SSL/TLS certificate for an app's domain.
    /// </summary>
    [FlyioResourceType("flyio:index:Certificate")]
    public partial class Certificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether ACME ALPN verification is configured.
        /// </summary>
        [Output("acmeAlpnConfigured")]
        public Output<bool> AcmeAlpnConfigured { get; private set; } = null!;

        /// <summary>
        /// Whether ACME DNS verification is configured.
        /// </summary>
        [Output("acmeDnsConfigured")]
        public Output<bool> AcmeDnsConfigured { get; private set; } = null!;

        /// <summary>
        /// The name of the Fly app.
        /// </summary>
        [Output("app")]
        public Output<string> App { get; private set; } = null!;

        /// <summary>
        /// The certificate authority used.
        /// </summary>
        [Output("certificateAuthority")]
        public Output<string> CertificateAuthority { get; private set; } = null!;

        /// <summary>
        /// The status of the certificate.
        /// </summary>
        [Output("clientStatus")]
        public Output<string> ClientStatus { get; private set; } = null!;

        /// <summary>
        /// Whether the certificate is fully configured.
        /// </summary>
        [Output("configured")]
        public Output<bool> Configured { get; private set; } = null!;

        /// <summary>
        /// When the certificate was created.
        /// </summary>
        [Output("createdAt")]
        public Output<PulumiFlyio.Flyio.Time.Outputs.Time> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The DNS provider for the hostname.
        /// </summary>
        [Output("dnsProvider")]
        public Output<string> DnsProvider { get; private set; } = null!;

        /// <summary>
        /// Hostname for DNS validation.
        /// </summary>
        [Output("dnsValidationHostname")]
        public Output<string> DnsValidationHostname { get; private set; } = null!;

        /// <summary>
        /// Instructions for DNS validation.
        /// </summary>
        [Output("dnsValidationInstructions")]
        public Output<string> DnsValidationInstructions { get; private set; } = null!;

        /// <summary>
        /// Target for DNS validation.
        /// </summary>
        [Output("dnsValidationTarget")]
        public Output<string> DnsValidationTarget { get; private set; } = null!;

        /// <summary>
        /// The Fly.io certificate ID.
        /// </summary>
        [Output("flyId")]
        public Output<string> FlyId { get; private set; } = null!;

        /// <summary>
        /// The hostname for the certificate.
        /// </summary>
        [Output("hostname")]
        public Output<string> Hostname { get; private set; } = null!;

        /// <summary>
        /// The input arguments used to create the certificate.
        /// </summary>
        [Output("input")]
        public Output<Outputs.CertificateArgs> Input { get; private set; } = null!;

        /// <summary>
        /// Whether the hostname is an apex domain.
        /// </summary>
        [Output("isApex")]
        public Output<bool> IsApex { get; private set; } = null!;

        /// <summary>
        /// Whether the certificate is a wildcard certificate.
        /// </summary>
        [Output("isWildcard")]
        public Output<bool> IsWildcard { get; private set; } = null!;

        /// <summary>
        /// The source of the certificate.
        /// </summary>
        [Output("source")]
        public Output<string> Source { get; private set; } = null!;


        /// <summary>
        /// Create a Certificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Certificate(string name, CertificateArgs args, CustomResourceOptions? options = null)
            : base("flyio:index:Certificate", name, args ?? new CertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Certificate(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("flyio:index:Certificate", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lukeshay",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Certificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Certificate Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new Certificate(name, id, options);
        }
    }

    public sealed class CertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Fly app to add the certificate to.
        /// </summary>
        [Input("app", required: true)]
        public Input<string> App { get; set; } = null!;

        /// <summary>
        /// The hostname for the certificate (e.g., example.com).
        /// </summary>
        [Input("hostname", required: true)]
        public Input<string> Hostname { get; set; } = null!;

        public CertificateArgs()
        {
        }
        public static new CertificateArgs Empty => new CertificateArgs();
    }
}
