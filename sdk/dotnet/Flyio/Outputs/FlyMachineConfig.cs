// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PulumiFlyio.Flyio.Flyio.Outputs
{

    [OutputType]
    public sealed class FlyMachineConfig
    {
        public readonly bool? AutoDestroy;
        public readonly ImmutableDictionary<string, Outputs.FlyMachineCheck>? Checks;
        public readonly ImmutableArray<Outputs.FlyContainerConfig> Containers;
        public readonly Outputs.FlyDNSConfig? Dns;
        public readonly ImmutableDictionary<string, string>? Env;
        public readonly ImmutableArray<Outputs.FlyFile> Files;
        public readonly Outputs.FlyMachineGuest? Guest;
        public readonly string Image;
        public readonly Outputs.FlyMachineInit? Init;
        public readonly ImmutableDictionary<string, string>? Metadata;
        public readonly Outputs.FlyMachineMetrics? Metrics;
        public readonly ImmutableArray<Outputs.FlyMachineMount> Mounts;
        public readonly ImmutableArray<Outputs.FlyMachineProcess> Processes;
        public readonly Outputs.FlyMachineRestart? Restart;
        public readonly string? Schedule;
        public readonly ImmutableArray<Outputs.FlyMachineService> Services;
        public readonly ImmutableArray<string> Standbys;
        public readonly ImmutableArray<Outputs.FlyStatic> Statics;
        public readonly Outputs.FlyStopConfig? StopConfig;
        public readonly ImmutableArray<Outputs.FlyVolumeConfig> Volumes;

        [OutputConstructor]
        private FlyMachineConfig(
            bool? autoDestroy,

            ImmutableDictionary<string, Outputs.FlyMachineCheck>? checks,

            ImmutableArray<Outputs.FlyContainerConfig> containers,

            Outputs.FlyDNSConfig? dns,

            ImmutableDictionary<string, string>? env,

            ImmutableArray<Outputs.FlyFile> files,

            Outputs.FlyMachineGuest? guest,

            string image,

            Outputs.FlyMachineInit? init,

            ImmutableDictionary<string, string>? metadata,

            Outputs.FlyMachineMetrics? metrics,

            ImmutableArray<Outputs.FlyMachineMount> mounts,

            ImmutableArray<Outputs.FlyMachineProcess> processes,

            Outputs.FlyMachineRestart? restart,

            string? schedule,

            ImmutableArray<Outputs.FlyMachineService> services,

            ImmutableArray<string> standbys,

            ImmutableArray<Outputs.FlyStatic> statics,

            Outputs.FlyStopConfig? stopConfig,

            ImmutableArray<Outputs.FlyVolumeConfig> volumes)
        {
            AutoDestroy = autoDestroy;
            Checks = checks;
            Containers = containers;
            Dns = dns;
            Env = env;
            Files = files;
            Guest = guest;
            Image = image;
            Init = init;
            Metadata = metadata;
            Metrics = metrics;
            Mounts = mounts;
            Processes = processes;
            Restart = restart;
            Schedule = schedule;
            Services = services;
            Standbys = standbys;
            Statics = statics;
            StopConfig = stopConfig;
            Volumes = volumes;
        }
    }
}
