// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AppArgs } from "./app";
export type App = import("./app").App;
export const App: typeof import("./app").App = null as any;
utilities.lazyLoad(exports, ["App"], () => require("./app"));

export { CertificateArgs } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { GetAppArgs, GetAppResult, GetAppOutputArgs } from "./getApp";
export const getApp: typeof import("./getApp").getApp = null as any;
export const getAppOutput: typeof import("./getApp").getAppOutput = null as any;
utilities.lazyLoad(exports, ["getApp","getAppOutput"], () => require("./getApp"));

export { IPArgs } from "./ip";
export type IP = import("./ip").IP;
export const IP: typeof import("./ip").IP = null as any;
utilities.lazyLoad(exports, ["IP"], () => require("./ip"));

export { MachineArgs } from "./machine";
export type Machine = import("./machine").Machine;
export const Machine: typeof import("./machine").Machine = null as any;
utilities.lazyLoad(exports, ["Machine"], () => require("./machine"));

export { PostgresAttachmentArgs } from "./postgresAttachment";
export type PostgresAttachment = import("./postgresAttachment").PostgresAttachment;
export const PostgresAttachment: typeof import("./postgresAttachment").PostgresAttachment = null as any;
utilities.lazyLoad(exports, ["PostgresAttachment"], () => require("./postgresAttachment"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RandomArgs } from "./random";
export type Random = import("./random").Random;
export const Random: typeof import("./random").Random = null as any;
utilities.lazyLoad(exports, ["Random"], () => require("./random"));

export { SecretsArgs } from "./secrets";
export type Secrets = import("./secrets").Secrets;
export const Secrets: typeof import("./secrets").Secrets = null as any;
utilities.lazyLoad(exports, ["Secrets"], () => require("./secrets"));

export { VolumeArgs } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));

export { WireGuardPeerArgs } from "./wireGuardPeer";
export type WireGuardPeer = import("./wireGuardPeer").WireGuardPeer;
export const WireGuardPeer: typeof import("./wireGuardPeer").WireGuardPeer = null as any;
utilities.lazyLoad(exports, ["WireGuardPeer"], () => require("./wireGuardPeer"));

export { WireGuardTokenArgs } from "./wireGuardToken";
export type WireGuardToken = import("./wireGuardToken").WireGuardToken;
export const WireGuardToken: typeof import("./wireGuardToken").WireGuardToken = null as any;
utilities.lazyLoad(exports, ["WireGuardToken"], () => require("./wireGuardToken"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "flyio:index:App":
                return new App(name, <any>undefined, { urn })
            case "flyio:index:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "flyio:index:IP":
                return new IP(name, <any>undefined, { urn })
            case "flyio:index:Machine":
                return new Machine(name, <any>undefined, { urn })
            case "flyio:index:PostgresAttachment":
                return new PostgresAttachment(name, <any>undefined, { urn })
            case "flyio:index:Random":
                return new Random(name, <any>undefined, { urn })
            case "flyio:index:Secrets":
                return new Secrets(name, <any>undefined, { urn })
            case "flyio:index:Volume":
                return new Volume(name, <any>undefined, { urn })
            case "flyio:index:WireGuardPeer":
                return new WireGuardPeer(name, <any>undefined, { urn })
            case "flyio:index:WireGuardToken":
                return new WireGuardToken(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("flyio", "index", _module)
pulumi.runtime.registerResourcePackage("flyio", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:flyio") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
