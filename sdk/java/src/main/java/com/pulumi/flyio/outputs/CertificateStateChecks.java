// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.flyio.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class CertificateStateChecks {
    private List<String> aRecords;
    private List<String> aaaaRecords;
    private List<String> cnameRecords;
    private String dnsProvider;
    private String dnsVerificationRecord;
    private List<String> resolvedAddresses;
    private String soa;

    private CertificateStateChecks() {}
    public List<String> aRecords() {
        return this.aRecords;
    }
    public List<String> aaaaRecords() {
        return this.aaaaRecords;
    }
    public List<String> cnameRecords() {
        return this.cnameRecords;
    }
    public String dnsProvider() {
        return this.dnsProvider;
    }
    public String dnsVerificationRecord() {
        return this.dnsVerificationRecord;
    }
    public List<String> resolvedAddresses() {
        return this.resolvedAddresses;
    }
    public String soa() {
        return this.soa;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateStateChecks defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> aRecords;
        private List<String> aaaaRecords;
        private List<String> cnameRecords;
        private String dnsProvider;
        private String dnsVerificationRecord;
        private List<String> resolvedAddresses;
        private String soa;
        public Builder() {}
        public Builder(CertificateStateChecks defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aRecords = defaults.aRecords;
    	      this.aaaaRecords = defaults.aaaaRecords;
    	      this.cnameRecords = defaults.cnameRecords;
    	      this.dnsProvider = defaults.dnsProvider;
    	      this.dnsVerificationRecord = defaults.dnsVerificationRecord;
    	      this.resolvedAddresses = defaults.resolvedAddresses;
    	      this.soa = defaults.soa;
        }

        @CustomType.Setter
        public Builder aRecords(List<String> aRecords) {
            if (aRecords == null) {
              throw new MissingRequiredPropertyException("CertificateStateChecks", "aRecords");
            }
            this.aRecords = aRecords;
            return this;
        }
        public Builder aRecords(String... aRecords) {
            return aRecords(List.of(aRecords));
        }
        @CustomType.Setter
        public Builder aaaaRecords(List<String> aaaaRecords) {
            if (aaaaRecords == null) {
              throw new MissingRequiredPropertyException("CertificateStateChecks", "aaaaRecords");
            }
            this.aaaaRecords = aaaaRecords;
            return this;
        }
        public Builder aaaaRecords(String... aaaaRecords) {
            return aaaaRecords(List.of(aaaaRecords));
        }
        @CustomType.Setter
        public Builder cnameRecords(List<String> cnameRecords) {
            if (cnameRecords == null) {
              throw new MissingRequiredPropertyException("CertificateStateChecks", "cnameRecords");
            }
            this.cnameRecords = cnameRecords;
            return this;
        }
        public Builder cnameRecords(String... cnameRecords) {
            return cnameRecords(List.of(cnameRecords));
        }
        @CustomType.Setter
        public Builder dnsProvider(String dnsProvider) {
            if (dnsProvider == null) {
              throw new MissingRequiredPropertyException("CertificateStateChecks", "dnsProvider");
            }
            this.dnsProvider = dnsProvider;
            return this;
        }
        @CustomType.Setter
        public Builder dnsVerificationRecord(String dnsVerificationRecord) {
            if (dnsVerificationRecord == null) {
              throw new MissingRequiredPropertyException("CertificateStateChecks", "dnsVerificationRecord");
            }
            this.dnsVerificationRecord = dnsVerificationRecord;
            return this;
        }
        @CustomType.Setter
        public Builder resolvedAddresses(List<String> resolvedAddresses) {
            if (resolvedAddresses == null) {
              throw new MissingRequiredPropertyException("CertificateStateChecks", "resolvedAddresses");
            }
            this.resolvedAddresses = resolvedAddresses;
            return this;
        }
        public Builder resolvedAddresses(String... resolvedAddresses) {
            return resolvedAddresses(List.of(resolvedAddresses));
        }
        @CustomType.Setter
        public Builder soa(String soa) {
            if (soa == null) {
              throw new MissingRequiredPropertyException("CertificateStateChecks", "soa");
            }
            this.soa = soa;
            return this;
        }
        public CertificateStateChecks build() {
            final var _resultValue = new CertificateStateChecks();
            _resultValue.aRecords = aRecords;
            _resultValue.aaaaRecords = aaaaRecords;
            _resultValue.cnameRecords = cnameRecords;
            _resultValue.dnsProvider = dnsProvider;
            _resultValue.dnsVerificationRecord = dnsVerificationRecord;
            _resultValue.resolvedAddresses = resolvedAddresses;
            _resultValue.soa = soa;
            return _resultValue;
        }
    }
}
