// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.flyio.flyio.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.flyio.flyio.inputs.FlyMachineCheckArgs;
import com.pulumi.flyio.flyio.inputs.FlyMachinePortArgs;
import com.pulumi.flyio.flyio.inputs.FlyMachineServiceConcurrencyArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlyMachineServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlyMachineServiceArgs Empty = new FlyMachineServiceArgs();

    @Import(name="autostart")
    private @Nullable Output<Boolean> autostart;

    public Optional<Output<Boolean>> autostart() {
        return Optional.ofNullable(this.autostart);
    }

    @Import(name="autostop")
    private @Nullable Output<String> autostop;

    public Optional<Output<String>> autostop() {
        return Optional.ofNullable(this.autostop);
    }

    @Import(name="checks")
    private @Nullable Output<List<FlyMachineCheckArgs>> checks;

    public Optional<Output<List<FlyMachineCheckArgs>>> checks() {
        return Optional.ofNullable(this.checks);
    }

    @Import(name="concurrency")
    private @Nullable Output<FlyMachineServiceConcurrencyArgs> concurrency;

    public Optional<Output<FlyMachineServiceConcurrencyArgs>> concurrency() {
        return Optional.ofNullable(this.concurrency);
    }

    @Import(name="forceInstanceDescription")
    private @Nullable Output<String> forceInstanceDescription;

    public Optional<Output<String>> forceInstanceDescription() {
        return Optional.ofNullable(this.forceInstanceDescription);
    }

    @Import(name="forceInstanceKey")
    private @Nullable Output<String> forceInstanceKey;

    public Optional<Output<String>> forceInstanceKey() {
        return Optional.ofNullable(this.forceInstanceKey);
    }

    @Import(name="internalPort")
    private @Nullable Output<Integer> internalPort;

    public Optional<Output<Integer>> internalPort() {
        return Optional.ofNullable(this.internalPort);
    }

    @Import(name="minMachinesRunning")
    private @Nullable Output<Integer> minMachinesRunning;

    public Optional<Output<Integer>> minMachinesRunning() {
        return Optional.ofNullable(this.minMachinesRunning);
    }

    @Import(name="ports")
    private @Nullable Output<List<FlyMachinePortArgs>> ports;

    public Optional<Output<List<FlyMachinePortArgs>>> ports() {
        return Optional.ofNullable(this.ports);
    }

    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    private FlyMachineServiceArgs() {}

    private FlyMachineServiceArgs(FlyMachineServiceArgs $) {
        this.autostart = $.autostart;
        this.autostop = $.autostop;
        this.checks = $.checks;
        this.concurrency = $.concurrency;
        this.forceInstanceDescription = $.forceInstanceDescription;
        this.forceInstanceKey = $.forceInstanceKey;
        this.internalPort = $.internalPort;
        this.minMachinesRunning = $.minMachinesRunning;
        this.ports = $.ports;
        this.protocol = $.protocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlyMachineServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlyMachineServiceArgs $;

        public Builder() {
            $ = new FlyMachineServiceArgs();
        }

        public Builder(FlyMachineServiceArgs defaults) {
            $ = new FlyMachineServiceArgs(Objects.requireNonNull(defaults));
        }

        public Builder autostart(@Nullable Output<Boolean> autostart) {
            $.autostart = autostart;
            return this;
        }

        public Builder autostart(Boolean autostart) {
            return autostart(Output.of(autostart));
        }

        public Builder autostop(@Nullable Output<String> autostop) {
            $.autostop = autostop;
            return this;
        }

        public Builder autostop(String autostop) {
            return autostop(Output.of(autostop));
        }

        public Builder checks(@Nullable Output<List<FlyMachineCheckArgs>> checks) {
            $.checks = checks;
            return this;
        }

        public Builder checks(List<FlyMachineCheckArgs> checks) {
            return checks(Output.of(checks));
        }

        public Builder checks(FlyMachineCheckArgs... checks) {
            return checks(List.of(checks));
        }

        public Builder concurrency(@Nullable Output<FlyMachineServiceConcurrencyArgs> concurrency) {
            $.concurrency = concurrency;
            return this;
        }

        public Builder concurrency(FlyMachineServiceConcurrencyArgs concurrency) {
            return concurrency(Output.of(concurrency));
        }

        public Builder forceInstanceDescription(@Nullable Output<String> forceInstanceDescription) {
            $.forceInstanceDescription = forceInstanceDescription;
            return this;
        }

        public Builder forceInstanceDescription(String forceInstanceDescription) {
            return forceInstanceDescription(Output.of(forceInstanceDescription));
        }

        public Builder forceInstanceKey(@Nullable Output<String> forceInstanceKey) {
            $.forceInstanceKey = forceInstanceKey;
            return this;
        }

        public Builder forceInstanceKey(String forceInstanceKey) {
            return forceInstanceKey(Output.of(forceInstanceKey));
        }

        public Builder internalPort(@Nullable Output<Integer> internalPort) {
            $.internalPort = internalPort;
            return this;
        }

        public Builder internalPort(Integer internalPort) {
            return internalPort(Output.of(internalPort));
        }

        public Builder minMachinesRunning(@Nullable Output<Integer> minMachinesRunning) {
            $.minMachinesRunning = minMachinesRunning;
            return this;
        }

        public Builder minMachinesRunning(Integer minMachinesRunning) {
            return minMachinesRunning(Output.of(minMachinesRunning));
        }

        public Builder ports(@Nullable Output<List<FlyMachinePortArgs>> ports) {
            $.ports = ports;
            return this;
        }

        public Builder ports(List<FlyMachinePortArgs> ports) {
            return ports(Output.of(ports));
        }

        public Builder ports(FlyMachinePortArgs... ports) {
            return ports(List.of(ports));
        }

        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        public FlyMachineServiceArgs build() {
            return $;
        }
    }

}
