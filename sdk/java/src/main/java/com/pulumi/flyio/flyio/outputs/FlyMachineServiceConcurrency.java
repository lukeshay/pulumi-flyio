// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.flyio.flyio.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FlyMachineServiceConcurrency {
    private @Nullable Integer hardLimit;
    private @Nullable Integer softLimit;
    private @Nullable String type;

    private FlyMachineServiceConcurrency() {}
    public Optional<Integer> hardLimit() {
        return Optional.ofNullable(this.hardLimit);
    }
    public Optional<Integer> softLimit() {
        return Optional.ofNullable(this.softLimit);
    }
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlyMachineServiceConcurrency defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer hardLimit;
        private @Nullable Integer softLimit;
        private @Nullable String type;
        public Builder() {}
        public Builder(FlyMachineServiceConcurrency defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hardLimit = defaults.hardLimit;
    	      this.softLimit = defaults.softLimit;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder hardLimit(@Nullable Integer hardLimit) {

            this.hardLimit = hardLimit;
            return this;
        }
        @CustomType.Setter
        public Builder softLimit(@Nullable Integer softLimit) {

            this.softLimit = softLimit;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        public FlyMachineServiceConcurrency build() {
            final var _resultValue = new FlyMachineServiceConcurrency();
            _resultValue.hardLimit = hardLimit;
            _resultValue.softLimit = softLimit;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
