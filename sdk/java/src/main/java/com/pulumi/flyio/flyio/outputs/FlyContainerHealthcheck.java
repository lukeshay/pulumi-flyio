// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.flyio.flyio.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.flyio.flyio.outputs.FlyExecHealthcheck;
import com.pulumi.flyio.flyio.outputs.FlyHTTPHealthcheck;
import com.pulumi.flyio.flyio.outputs.FlyTCPHealthcheck;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FlyContainerHealthcheck {
    private @Nullable FlyExecHealthcheck exec;
    private @Nullable Integer failureThreshold;
    private @Nullable Integer gracePeriod;
    private @Nullable FlyHTTPHealthcheck http;
    private @Nullable Integer interval;
    private @Nullable String kind;
    private @Nullable String name;
    private @Nullable Integer successThreshold;
    private @Nullable FlyTCPHealthcheck tcp;
    private @Nullable Integer timeout;
    private @Nullable String unhealthy;

    private FlyContainerHealthcheck() {}
    public Optional<FlyExecHealthcheck> exec() {
        return Optional.ofNullable(this.exec);
    }
    public Optional<Integer> failureThreshold() {
        return Optional.ofNullable(this.failureThreshold);
    }
    public Optional<Integer> gracePeriod() {
        return Optional.ofNullable(this.gracePeriod);
    }
    public Optional<FlyHTTPHealthcheck> http() {
        return Optional.ofNullable(this.http);
    }
    public Optional<Integer> interval() {
        return Optional.ofNullable(this.interval);
    }
    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<Integer> successThreshold() {
        return Optional.ofNullable(this.successThreshold);
    }
    public Optional<FlyTCPHealthcheck> tcp() {
        return Optional.ofNullable(this.tcp);
    }
    public Optional<Integer> timeout() {
        return Optional.ofNullable(this.timeout);
    }
    public Optional<String> unhealthy() {
        return Optional.ofNullable(this.unhealthy);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlyContainerHealthcheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable FlyExecHealthcheck exec;
        private @Nullable Integer failureThreshold;
        private @Nullable Integer gracePeriod;
        private @Nullable FlyHTTPHealthcheck http;
        private @Nullable Integer interval;
        private @Nullable String kind;
        private @Nullable String name;
        private @Nullable Integer successThreshold;
        private @Nullable FlyTCPHealthcheck tcp;
        private @Nullable Integer timeout;
        private @Nullable String unhealthy;
        public Builder() {}
        public Builder(FlyContainerHealthcheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exec = defaults.exec;
    	      this.failureThreshold = defaults.failureThreshold;
    	      this.gracePeriod = defaults.gracePeriod;
    	      this.http = defaults.http;
    	      this.interval = defaults.interval;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.successThreshold = defaults.successThreshold;
    	      this.tcp = defaults.tcp;
    	      this.timeout = defaults.timeout;
    	      this.unhealthy = defaults.unhealthy;
        }

        @CustomType.Setter
        public Builder exec(@Nullable FlyExecHealthcheck exec) {

            this.exec = exec;
            return this;
        }
        @CustomType.Setter
        public Builder failureThreshold(@Nullable Integer failureThreshold) {

            this.failureThreshold = failureThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder gracePeriod(@Nullable Integer gracePeriod) {

            this.gracePeriod = gracePeriod;
            return this;
        }
        @CustomType.Setter
        public Builder http(@Nullable FlyHTTPHealthcheck http) {

            this.http = http;
            return this;
        }
        @CustomType.Setter
        public Builder interval(@Nullable Integer interval) {

            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder kind(@Nullable String kind) {

            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder successThreshold(@Nullable Integer successThreshold) {

            this.successThreshold = successThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder tcp(@Nullable FlyTCPHealthcheck tcp) {

            this.tcp = tcp;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(@Nullable Integer timeout) {

            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder unhealthy(@Nullable String unhealthy) {

            this.unhealthy = unhealthy;
            return this;
        }
        public FlyContainerHealthcheck build() {
            final var _resultValue = new FlyContainerHealthcheck();
            _resultValue.exec = exec;
            _resultValue.failureThreshold = failureThreshold;
            _resultValue.gracePeriod = gracePeriod;
            _resultValue.http = http;
            _resultValue.interval = interval;
            _resultValue.kind = kind;
            _resultValue.name = name;
            _resultValue.successThreshold = successThreshold;
            _resultValue.tcp = tcp;
            _resultValue.timeout = timeout;
            _resultValue.unhealthy = unhealthy;
            return _resultValue;
        }
    }
}
