// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.flyio;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PostgresAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final PostgresAttachmentArgs Empty = new PostgresAttachmentArgs();

    @Import(name="app", required=true)
    private Output<String> app;

    public Output<String> app() {
        return this.app;
    }

    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    @Import(name="databaseUser")
    private @Nullable Output<String> databaseUser;

    public Optional<Output<String>> databaseUser() {
        return Optional.ofNullable(this.databaseUser);
    }

    @Import(name="manualEntry")
    private @Nullable Output<Boolean> manualEntry;

    public Optional<Output<Boolean>> manualEntry() {
        return Optional.ofNullable(this.manualEntry);
    }

    @Import(name="postgres", required=true)
    private Output<String> postgres;

    public Output<String> postgres() {
        return this.postgres;
    }

    @Import(name="variableName")
    private @Nullable Output<String> variableName;

    public Optional<Output<String>> variableName() {
        return Optional.ofNullable(this.variableName);
    }

    private PostgresAttachmentArgs() {}

    private PostgresAttachmentArgs(PostgresAttachmentArgs $) {
        this.app = $.app;
        this.databaseName = $.databaseName;
        this.databaseUser = $.databaseUser;
        this.manualEntry = $.manualEntry;
        this.postgres = $.postgres;
        this.variableName = $.variableName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PostgresAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PostgresAttachmentArgs $;

        public Builder() {
            $ = new PostgresAttachmentArgs();
        }

        public Builder(PostgresAttachmentArgs defaults) {
            $ = new PostgresAttachmentArgs(Objects.requireNonNull(defaults));
        }

        public Builder app(Output<String> app) {
            $.app = app;
            return this;
        }

        public Builder app(String app) {
            return app(Output.of(app));
        }

        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        public Builder databaseUser(@Nullable Output<String> databaseUser) {
            $.databaseUser = databaseUser;
            return this;
        }

        public Builder databaseUser(String databaseUser) {
            return databaseUser(Output.of(databaseUser));
        }

        public Builder manualEntry(@Nullable Output<Boolean> manualEntry) {
            $.manualEntry = manualEntry;
            return this;
        }

        public Builder manualEntry(Boolean manualEntry) {
            return manualEntry(Output.of(manualEntry));
        }

        public Builder postgres(Output<String> postgres) {
            $.postgres = postgres;
            return this;
        }

        public Builder postgres(String postgres) {
            return postgres(Output.of(postgres));
        }

        public Builder variableName(@Nullable Output<String> variableName) {
            $.variableName = variableName;
            return this;
        }

        public Builder variableName(String variableName) {
            return variableName(Output.of(variableName));
        }

        public PostgresAttachmentArgs build() {
            if ($.app == null) {
                throw new MissingRequiredPropertyException("PostgresAttachmentArgs", "app");
            }
            if ($.postgres == null) {
                throw new MissingRequiredPropertyException("PostgresAttachmentArgs", "postgres");
            }
            return $;
        }
    }

}
