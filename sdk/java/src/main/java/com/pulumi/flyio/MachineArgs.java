// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.flyio;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.flyio.flyio.inputs.FlyMachineConfigArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MachineArgs extends com.pulumi.resources.ResourceArgs {

    public static final MachineArgs Empty = new MachineArgs();

    /**
     * The Fly.io application to deploy the machine to.
     * 
     */
    @Import(name="app", required=true)
    private Output<String> app;

    /**
     * @return The Fly.io application to deploy the machine to.
     * 
     */
    public Output<String> app() {
        return this.app;
    }

    @Import(name="config", required=true)
    private Output<FlyMachineConfigArgs> config;

    public Output<FlyMachineConfigArgs> config() {
        return this.config;
    }

    /**
     * The deployment strategy for the machine.
     * 
     */
    @Import(name="deploymentStrategy")
    private @Nullable Output<String> deploymentStrategy;

    /**
     * @return The deployment strategy for the machine.
     * 
     */
    public Optional<Output<String>> deploymentStrategy() {
        return Optional.ofNullable(this.deploymentStrategy);
    }

    @Import(name="leaseTtl")
    private @Nullable Output<Integer> leaseTtl;

    public Optional<Output<Integer>> leaseTtl() {
        return Optional.ofNullable(this.leaseTtl);
    }

    @Import(name="lsvd")
    private @Nullable Output<Boolean> lsvd;

    public Optional<Output<Boolean>> lsvd() {
        return Optional.ofNullable(this.lsvd);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="region")
    private @Nullable Output<String> region;

    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    @Import(name="skipLaunch")
    private @Nullable Output<Boolean> skipLaunch;

    public Optional<Output<Boolean>> skipLaunch() {
        return Optional.ofNullable(this.skipLaunch);
    }

    @Import(name="skipServiceRegistration")
    private @Nullable Output<Boolean> skipServiceRegistration;

    public Optional<Output<Boolean>> skipServiceRegistration() {
        return Optional.ofNullable(this.skipServiceRegistration);
    }

    private MachineArgs() {}

    private MachineArgs(MachineArgs $) {
        this.app = $.app;
        this.config = $.config;
        this.deploymentStrategy = $.deploymentStrategy;
        this.leaseTtl = $.leaseTtl;
        this.lsvd = $.lsvd;
        this.name = $.name;
        this.region = $.region;
        this.skipLaunch = $.skipLaunch;
        this.skipServiceRegistration = $.skipServiceRegistration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MachineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MachineArgs $;

        public Builder() {
            $ = new MachineArgs();
        }

        public Builder(MachineArgs defaults) {
            $ = new MachineArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param app The Fly.io application to deploy the machine to.
         * 
         * @return builder
         * 
         */
        public Builder app(Output<String> app) {
            $.app = app;
            return this;
        }

        /**
         * @param app The Fly.io application to deploy the machine to.
         * 
         * @return builder
         * 
         */
        public Builder app(String app) {
            return app(Output.of(app));
        }

        public Builder config(Output<FlyMachineConfigArgs> config) {
            $.config = config;
            return this;
        }

        public Builder config(FlyMachineConfigArgs config) {
            return config(Output.of(config));
        }

        /**
         * @param deploymentStrategy The deployment strategy for the machine.
         * 
         * @return builder
         * 
         */
        public Builder deploymentStrategy(@Nullable Output<String> deploymentStrategy) {
            $.deploymentStrategy = deploymentStrategy;
            return this;
        }

        /**
         * @param deploymentStrategy The deployment strategy for the machine.
         * 
         * @return builder
         * 
         */
        public Builder deploymentStrategy(String deploymentStrategy) {
            return deploymentStrategy(Output.of(deploymentStrategy));
        }

        public Builder leaseTtl(@Nullable Output<Integer> leaseTtl) {
            $.leaseTtl = leaseTtl;
            return this;
        }

        public Builder leaseTtl(Integer leaseTtl) {
            return leaseTtl(Output.of(leaseTtl));
        }

        public Builder lsvd(@Nullable Output<Boolean> lsvd) {
            $.lsvd = lsvd;
            return this;
        }

        public Builder lsvd(Boolean lsvd) {
            return lsvd(Output.of(lsvd));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder skipLaunch(@Nullable Output<Boolean> skipLaunch) {
            $.skipLaunch = skipLaunch;
            return this;
        }

        public Builder skipLaunch(Boolean skipLaunch) {
            return skipLaunch(Output.of(skipLaunch));
        }

        public Builder skipServiceRegistration(@Nullable Output<Boolean> skipServiceRegistration) {
            $.skipServiceRegistration = skipServiceRegistration;
            return this;
        }

        public Builder skipServiceRegistration(Boolean skipServiceRegistration) {
            return skipServiceRegistration(Output.of(skipServiceRegistration));
        }

        public MachineArgs build() {
            if ($.app == null) {
                throw new MissingRequiredPropertyException("MachineArgs", "app");
            }
            if ($.config == null) {
                throw new MissingRequiredPropertyException("MachineArgs", "config");
            }
            return $;
        }
    }

}
