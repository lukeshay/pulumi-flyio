// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.flyio.flyio.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.flyio.flyio.outputs.FlyHTTPResponseOptions;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FlyHTTPOptions {
    private @Nullable Boolean compress;
    private @Nullable Boolean h2Backend;
    private @Nullable Integer headersReadTimeout;
    private @Nullable Integer idleTimeout;
    private @Nullable FlyHTTPResponseOptions response;

    private FlyHTTPOptions() {}
    public Optional<Boolean> compress() {
        return Optional.ofNullable(this.compress);
    }
    public Optional<Boolean> h2Backend() {
        return Optional.ofNullable(this.h2Backend);
    }
    public Optional<Integer> headersReadTimeout() {
        return Optional.ofNullable(this.headersReadTimeout);
    }
    public Optional<Integer> idleTimeout() {
        return Optional.ofNullable(this.idleTimeout);
    }
    public Optional<FlyHTTPResponseOptions> response() {
        return Optional.ofNullable(this.response);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlyHTTPOptions defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean compress;
        private @Nullable Boolean h2Backend;
        private @Nullable Integer headersReadTimeout;
        private @Nullable Integer idleTimeout;
        private @Nullable FlyHTTPResponseOptions response;
        public Builder() {}
        public Builder(FlyHTTPOptions defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compress = defaults.compress;
    	      this.h2Backend = defaults.h2Backend;
    	      this.headersReadTimeout = defaults.headersReadTimeout;
    	      this.idleTimeout = defaults.idleTimeout;
    	      this.response = defaults.response;
        }

        @CustomType.Setter
        public Builder compress(@Nullable Boolean compress) {

            this.compress = compress;
            return this;
        }
        @CustomType.Setter
        public Builder h2Backend(@Nullable Boolean h2Backend) {

            this.h2Backend = h2Backend;
            return this;
        }
        @CustomType.Setter
        public Builder headersReadTimeout(@Nullable Integer headersReadTimeout) {

            this.headersReadTimeout = headersReadTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder idleTimeout(@Nullable Integer idleTimeout) {

            this.idleTimeout = idleTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder response(@Nullable FlyHTTPResponseOptions response) {

            this.response = response;
            return this;
        }
        public FlyHTTPOptions build() {
            final var _resultValue = new FlyHTTPOptions();
            _resultValue.compress = compress;
            _resultValue.h2Backend = h2Backend;
            _resultValue.headersReadTimeout = headersReadTimeout;
            _resultValue.idleTimeout = idleTimeout;
            _resultValue.response = response;
            return _resultValue;
        }
    }
}
