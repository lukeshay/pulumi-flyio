// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.flyio.flyio.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.flyio.flyio.inputs.FlyHTTPOptionsArgs;
import com.pulumi.flyio.flyio.inputs.FlyProxyProtoOptionsArgs;
import com.pulumi.flyio.flyio.inputs.FlyTLSOptionsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlyMachinePortArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlyMachinePortArgs Empty = new FlyMachinePortArgs();

    @Import(name="endPort")
    private @Nullable Output<Integer> endPort;

    public Optional<Output<Integer>> endPort() {
        return Optional.ofNullable(this.endPort);
    }

    @Import(name="forceHttps")
    private @Nullable Output<Boolean> forceHttps;

    public Optional<Output<Boolean>> forceHttps() {
        return Optional.ofNullable(this.forceHttps);
    }

    @Import(name="handlers")
    private @Nullable Output<List<String>> handlers;

    public Optional<Output<List<String>>> handlers() {
        return Optional.ofNullable(this.handlers);
    }

    @Import(name="httpOptions")
    private @Nullable Output<FlyHTTPOptionsArgs> httpOptions;

    public Optional<Output<FlyHTTPOptionsArgs>> httpOptions() {
        return Optional.ofNullable(this.httpOptions);
    }

    @Import(name="port")
    private @Nullable Output<Integer> port;

    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    @Import(name="proxyProtoOptions")
    private @Nullable Output<FlyProxyProtoOptionsArgs> proxyProtoOptions;

    public Optional<Output<FlyProxyProtoOptionsArgs>> proxyProtoOptions() {
        return Optional.ofNullable(this.proxyProtoOptions);
    }

    @Import(name="startPort")
    private @Nullable Output<Integer> startPort;

    public Optional<Output<Integer>> startPort() {
        return Optional.ofNullable(this.startPort);
    }

    @Import(name="tlsOptions")
    private @Nullable Output<FlyTLSOptionsArgs> tlsOptions;

    public Optional<Output<FlyTLSOptionsArgs>> tlsOptions() {
        return Optional.ofNullable(this.tlsOptions);
    }

    private FlyMachinePortArgs() {}

    private FlyMachinePortArgs(FlyMachinePortArgs $) {
        this.endPort = $.endPort;
        this.forceHttps = $.forceHttps;
        this.handlers = $.handlers;
        this.httpOptions = $.httpOptions;
        this.port = $.port;
        this.proxyProtoOptions = $.proxyProtoOptions;
        this.startPort = $.startPort;
        this.tlsOptions = $.tlsOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlyMachinePortArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlyMachinePortArgs $;

        public Builder() {
            $ = new FlyMachinePortArgs();
        }

        public Builder(FlyMachinePortArgs defaults) {
            $ = new FlyMachinePortArgs(Objects.requireNonNull(defaults));
        }

        public Builder endPort(@Nullable Output<Integer> endPort) {
            $.endPort = endPort;
            return this;
        }

        public Builder endPort(Integer endPort) {
            return endPort(Output.of(endPort));
        }

        public Builder forceHttps(@Nullable Output<Boolean> forceHttps) {
            $.forceHttps = forceHttps;
            return this;
        }

        public Builder forceHttps(Boolean forceHttps) {
            return forceHttps(Output.of(forceHttps));
        }

        public Builder handlers(@Nullable Output<List<String>> handlers) {
            $.handlers = handlers;
            return this;
        }

        public Builder handlers(List<String> handlers) {
            return handlers(Output.of(handlers));
        }

        public Builder handlers(String... handlers) {
            return handlers(List.of(handlers));
        }

        public Builder httpOptions(@Nullable Output<FlyHTTPOptionsArgs> httpOptions) {
            $.httpOptions = httpOptions;
            return this;
        }

        public Builder httpOptions(FlyHTTPOptionsArgs httpOptions) {
            return httpOptions(Output.of(httpOptions));
        }

        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public Builder proxyProtoOptions(@Nullable Output<FlyProxyProtoOptionsArgs> proxyProtoOptions) {
            $.proxyProtoOptions = proxyProtoOptions;
            return this;
        }

        public Builder proxyProtoOptions(FlyProxyProtoOptionsArgs proxyProtoOptions) {
            return proxyProtoOptions(Output.of(proxyProtoOptions));
        }

        public Builder startPort(@Nullable Output<Integer> startPort) {
            $.startPort = startPort;
            return this;
        }

        public Builder startPort(Integer startPort) {
            return startPort(Output.of(startPort));
        }

        public Builder tlsOptions(@Nullable Output<FlyTLSOptionsArgs> tlsOptions) {
            $.tlsOptions = tlsOptions;
            return this;
        }

        public Builder tlsOptions(FlyTLSOptionsArgs tlsOptions) {
            return tlsOptions(Output.of(tlsOptions));
        }

        public FlyMachinePortArgs build() {
            return $;
        }
    }

}
