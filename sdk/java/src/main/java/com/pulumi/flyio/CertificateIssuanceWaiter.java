// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.flyio;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.flyio.Utilities;
import com.pulumi.flyio.outputs.CertificateIssuanceWaiterArgs;
import com.pulumi.flyio.time.outputs.Time;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A component that waits for a Fly.io SSL/TLS certificate to be fully issued.
 * 
 */
@ResourceType(type="flyio:index:CertificateIssuanceWaiter")
public class CertificateIssuanceWaiter extends com.pulumi.resources.CustomResource {
    /**
     * The name of the Fly app.
     * 
     */
    @Export(name="app", refs={String.class}, tree="[0]")
    private Output<String> app;

    /**
     * @return The name of the Fly app.
     * 
     */
    public Output<String> app() {
        return this.app;
    }
    /**
     * The certificate authority used.
     * 
     */
    @Export(name="certificateAuthority", refs={String.class}, tree="[0]")
    private Output<String> certificateAuthority;

    /**
     * @return The certificate authority used.
     * 
     */
    public Output<String> certificateAuthority() {
        return this.certificateAuthority;
    }
    /**
     * The Fly.io certificate ID.
     * 
     */
    @Export(name="certificateId", refs={String.class}, tree="[0]")
    private Output<String> certificateId;

    /**
     * @return The Fly.io certificate ID.
     * 
     */
    public Output<String> certificateId() {
        return this.certificateId;
    }
    /**
     * The status of the certificate.
     * 
     */
    @Export(name="clientStatus", refs={String.class}, tree="[0]")
    private Output<String> clientStatus;

    /**
     * @return The status of the certificate.
     * 
     */
    public Output<String> clientStatus() {
        return this.clientStatus;
    }
    /**
     * Expiration time for the ECDSA certificate.
     * 
     */
    @Export(name="ecdsaExpiresAt", refs={Time.class}, tree="[0]")
    private Output</* @Nullable */ Time> ecdsaExpiresAt;

    /**
     * @return Expiration time for the ECDSA certificate.
     * 
     */
    public Output<Optional<Time>> ecdsaExpiresAt() {
        return Codegen.optional(this.ecdsaExpiresAt);
    }
    /**
     * The hostname for the certificate.
     * 
     */
    @Export(name="hostname", refs={String.class}, tree="[0]")
    private Output<String> hostname;

    /**
     * @return The hostname for the certificate.
     * 
     */
    public Output<String> hostname() {
        return this.hostname;
    }
    /**
     * The input arguments used for the certificate issuance waiter.
     * 
     */
    @Export(name="input", refs={CertificateIssuanceWaiterArgs.class}, tree="[0]")
    private Output<CertificateIssuanceWaiterArgs> input;

    /**
     * @return The input arguments used for the certificate issuance waiter.
     * 
     */
    public Output<CertificateIssuanceWaiterArgs> input() {
        return this.input;
    }
    /**
     * Whether the certificate is fully issued (has both ECDSA and RSA certificates).
     * 
     */
    @Export(name="isFullyIssued", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isFullyIssued;

    /**
     * @return Whether the certificate is fully issued (has both ECDSA and RSA certificates).
     * 
     */
    public Output<Boolean> isFullyIssued() {
        return this.isFullyIssued;
    }
    /**
     * When the certificate was fully issued.
     * 
     */
    @Export(name="issuedAt", refs={Time.class}, tree="[0]")
    private Output<Time> issuedAt;

    /**
     * @return When the certificate was fully issued.
     * 
     */
    public Output<Time> issuedAt() {
        return this.issuedAt;
    }
    /**
     * Expiration time for the RSA certificate.
     * 
     */
    @Export(name="rsaExpiresAt", refs={Time.class}, tree="[0]")
    private Output</* @Nullable */ Time> rsaExpiresAt;

    /**
     * @return Expiration time for the RSA certificate.
     * 
     */
    public Output<Optional<Time>> rsaExpiresAt() {
        return Codegen.optional(this.rsaExpiresAt);
    }
    /**
     * The timeout duration used for waiting.
     * 
     */
    @Export(name="timeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> timeout;

    /**
     * @return The timeout duration used for waiting.
     * 
     */
    public Output<Integer> timeout() {
        return this.timeout;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CertificateIssuanceWaiter(java.lang.String name) {
        this(name, com.pulumi.flyio.CertificateIssuanceWaiterArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CertificateIssuanceWaiter(java.lang.String name, com.pulumi.flyio.CertificateIssuanceWaiterArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CertificateIssuanceWaiter(java.lang.String name, com.pulumi.flyio.CertificateIssuanceWaiterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("flyio:index:CertificateIssuanceWaiter", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private CertificateIssuanceWaiter(java.lang.String name, Output<java.lang.String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("flyio:index:CertificateIssuanceWaiter", name, null, makeResourceOptions(options, id), false);
    }

    private static com.pulumi.flyio.CertificateIssuanceWaiterArgs makeArgs(com.pulumi.flyio.CertificateIssuanceWaiterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? com.pulumi.flyio.CertificateIssuanceWaiterArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CertificateIssuanceWaiter get(java.lang.String name, Output<java.lang.String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CertificateIssuanceWaiter(name, id, options);
    }
}
