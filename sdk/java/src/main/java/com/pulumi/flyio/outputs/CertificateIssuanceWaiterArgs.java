// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.flyio.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class CertificateIssuanceWaiterArgs {
    /**
     * @return The name of the Fly app that the certificate is associated with.
     * 
     */
    private String app;
    /**
     * @return The hostname for the certificate (e.g., example.com).
     * 
     */
    private String hostname;
    /**
     * @return The maximum time to wait for the certificate to be fully issued (in seconds).
     * 
     */
    private Integer timeout;

    private CertificateIssuanceWaiterArgs() {}
    /**
     * @return The name of the Fly app that the certificate is associated with.
     * 
     */
    public String app() {
        return this.app;
    }
    /**
     * @return The hostname for the certificate (e.g., example.com).
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The maximum time to wait for the certificate to be fully issued (in seconds).
     * 
     */
    public Integer timeout() {
        return this.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateIssuanceWaiterArgs defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String app;
        private String hostname;
        private Integer timeout;
        public Builder() {}
        public Builder(CertificateIssuanceWaiterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.app = defaults.app;
    	      this.hostname = defaults.hostname;
    	      this.timeout = defaults.timeout;
        }

        @CustomType.Setter
        public Builder app(String app) {
            if (app == null) {
              throw new MissingRequiredPropertyException("CertificateIssuanceWaiterArgs", "app");
            }
            this.app = app;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("CertificateIssuanceWaiterArgs", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(Integer timeout) {
            if (timeout == null) {
              throw new MissingRequiredPropertyException("CertificateIssuanceWaiterArgs", "timeout");
            }
            this.timeout = timeout;
            return this;
        }
        public CertificateIssuanceWaiterArgs build() {
            final var _resultValue = new CertificateIssuanceWaiterArgs();
            _resultValue.app = app;
            _resultValue.hostname = hostname;
            _resultValue.timeout = timeout;
            return _resultValue;
        }
    }
}
