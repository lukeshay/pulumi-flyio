// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.flyio.flyio.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.flyio.flyio.inputs.FlyDNSConfigArgs;
import com.pulumi.flyio.flyio.inputs.FlyFileArgs;
import com.pulumi.flyio.flyio.inputs.FlyMachineCheckArgs;
import com.pulumi.flyio.flyio.inputs.FlyMachineGuestArgs;
import com.pulumi.flyio.flyio.inputs.FlyMachineInitArgs;
import com.pulumi.flyio.flyio.inputs.FlyMachineMetricsArgs;
import com.pulumi.flyio.flyio.inputs.FlyMachineMountArgs;
import com.pulumi.flyio.flyio.inputs.FlyMachineProcessArgs;
import com.pulumi.flyio.flyio.inputs.FlyMachineRestartArgs;
import com.pulumi.flyio.flyio.inputs.FlyMachineServiceArgs;
import com.pulumi.flyio.flyio.inputs.FlyStaticArgs;
import com.pulumi.flyio.flyio.inputs.FlyStopConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlyMachineConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlyMachineConfigArgs Empty = new FlyMachineConfigArgs();

    @Import(name="autoDestroy")
    private @Nullable Output<Boolean> autoDestroy;

    public Optional<Output<Boolean>> autoDestroy() {
        return Optional.ofNullable(this.autoDestroy);
    }

    @Import(name="checks")
    private @Nullable Output<Map<String,FlyMachineCheckArgs>> checks;

    public Optional<Output<Map<String,FlyMachineCheckArgs>>> checks() {
        return Optional.ofNullable(this.checks);
    }

    @Import(name="dns")
    private @Nullable Output<FlyDNSConfigArgs> dns;

    public Optional<Output<FlyDNSConfigArgs>> dns() {
        return Optional.ofNullable(this.dns);
    }

    @Import(name="env")
    private @Nullable Output<Map<String,String>> env;

    public Optional<Output<Map<String,String>>> env() {
        return Optional.ofNullable(this.env);
    }

    @Import(name="files")
    private @Nullable Output<List<FlyFileArgs>> files;

    public Optional<Output<List<FlyFileArgs>>> files() {
        return Optional.ofNullable(this.files);
    }

    @Import(name="guest")
    private @Nullable Output<FlyMachineGuestArgs> guest;

    public Optional<Output<FlyMachineGuestArgs>> guest() {
        return Optional.ofNullable(this.guest);
    }

    @Import(name="image", required=true)
    private Output<String> image;

    public Output<String> image() {
        return this.image;
    }

    @Import(name="init")
    private @Nullable Output<FlyMachineInitArgs> init;

    public Optional<Output<FlyMachineInitArgs>> init() {
        return Optional.ofNullable(this.init);
    }

    @Import(name="metadata")
    private @Nullable Output<Map<String,String>> metadata;

    public Optional<Output<Map<String,String>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    @Import(name="metrics")
    private @Nullable Output<FlyMachineMetricsArgs> metrics;

    public Optional<Output<FlyMachineMetricsArgs>> metrics() {
        return Optional.ofNullable(this.metrics);
    }

    @Import(name="mounts")
    private @Nullable Output<List<FlyMachineMountArgs>> mounts;

    public Optional<Output<List<FlyMachineMountArgs>>> mounts() {
        return Optional.ofNullable(this.mounts);
    }

    @Import(name="processes")
    private @Nullable Output<List<FlyMachineProcessArgs>> processes;

    public Optional<Output<List<FlyMachineProcessArgs>>> processes() {
        return Optional.ofNullable(this.processes);
    }

    @Import(name="restart")
    private @Nullable Output<FlyMachineRestartArgs> restart;

    public Optional<Output<FlyMachineRestartArgs>> restart() {
        return Optional.ofNullable(this.restart);
    }

    @Import(name="schedule")
    private @Nullable Output<String> schedule;

    public Optional<Output<String>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    @Import(name="services")
    private @Nullable Output<List<FlyMachineServiceArgs>> services;

    public Optional<Output<List<FlyMachineServiceArgs>>> services() {
        return Optional.ofNullable(this.services);
    }

    @Import(name="standbys")
    private @Nullable Output<List<String>> standbys;

    public Optional<Output<List<String>>> standbys() {
        return Optional.ofNullable(this.standbys);
    }

    @Import(name="statics")
    private @Nullable Output<List<FlyStaticArgs>> statics;

    public Optional<Output<List<FlyStaticArgs>>> statics() {
        return Optional.ofNullable(this.statics);
    }

    @Import(name="stopConfig")
    private @Nullable Output<FlyStopConfigArgs> stopConfig;

    public Optional<Output<FlyStopConfigArgs>> stopConfig() {
        return Optional.ofNullable(this.stopConfig);
    }

    private FlyMachineConfigArgs() {}

    private FlyMachineConfigArgs(FlyMachineConfigArgs $) {
        this.autoDestroy = $.autoDestroy;
        this.checks = $.checks;
        this.dns = $.dns;
        this.env = $.env;
        this.files = $.files;
        this.guest = $.guest;
        this.image = $.image;
        this.init = $.init;
        this.metadata = $.metadata;
        this.metrics = $.metrics;
        this.mounts = $.mounts;
        this.processes = $.processes;
        this.restart = $.restart;
        this.schedule = $.schedule;
        this.services = $.services;
        this.standbys = $.standbys;
        this.statics = $.statics;
        this.stopConfig = $.stopConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlyMachineConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlyMachineConfigArgs $;

        public Builder() {
            $ = new FlyMachineConfigArgs();
        }

        public Builder(FlyMachineConfigArgs defaults) {
            $ = new FlyMachineConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder autoDestroy(@Nullable Output<Boolean> autoDestroy) {
            $.autoDestroy = autoDestroy;
            return this;
        }

        public Builder autoDestroy(Boolean autoDestroy) {
            return autoDestroy(Output.of(autoDestroy));
        }

        public Builder checks(@Nullable Output<Map<String,FlyMachineCheckArgs>> checks) {
            $.checks = checks;
            return this;
        }

        public Builder checks(Map<String,FlyMachineCheckArgs> checks) {
            return checks(Output.of(checks));
        }

        public Builder dns(@Nullable Output<FlyDNSConfigArgs> dns) {
            $.dns = dns;
            return this;
        }

        public Builder dns(FlyDNSConfigArgs dns) {
            return dns(Output.of(dns));
        }

        public Builder env(@Nullable Output<Map<String,String>> env) {
            $.env = env;
            return this;
        }

        public Builder env(Map<String,String> env) {
            return env(Output.of(env));
        }

        public Builder files(@Nullable Output<List<FlyFileArgs>> files) {
            $.files = files;
            return this;
        }

        public Builder files(List<FlyFileArgs> files) {
            return files(Output.of(files));
        }

        public Builder files(FlyFileArgs... files) {
            return files(List.of(files));
        }

        public Builder guest(@Nullable Output<FlyMachineGuestArgs> guest) {
            $.guest = guest;
            return this;
        }

        public Builder guest(FlyMachineGuestArgs guest) {
            return guest(Output.of(guest));
        }

        public Builder image(Output<String> image) {
            $.image = image;
            return this;
        }

        public Builder image(String image) {
            return image(Output.of(image));
        }

        public Builder init(@Nullable Output<FlyMachineInitArgs> init) {
            $.init = init;
            return this;
        }

        public Builder init(FlyMachineInitArgs init) {
            return init(Output.of(init));
        }

        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            $.metadata = metadata;
            return this;
        }

        public Builder metadata(Map<String,String> metadata) {
            return metadata(Output.of(metadata));
        }

        public Builder metrics(@Nullable Output<FlyMachineMetricsArgs> metrics) {
            $.metrics = metrics;
            return this;
        }

        public Builder metrics(FlyMachineMetricsArgs metrics) {
            return metrics(Output.of(metrics));
        }

        public Builder mounts(@Nullable Output<List<FlyMachineMountArgs>> mounts) {
            $.mounts = mounts;
            return this;
        }

        public Builder mounts(List<FlyMachineMountArgs> mounts) {
            return mounts(Output.of(mounts));
        }

        public Builder mounts(FlyMachineMountArgs... mounts) {
            return mounts(List.of(mounts));
        }

        public Builder processes(@Nullable Output<List<FlyMachineProcessArgs>> processes) {
            $.processes = processes;
            return this;
        }

        public Builder processes(List<FlyMachineProcessArgs> processes) {
            return processes(Output.of(processes));
        }

        public Builder processes(FlyMachineProcessArgs... processes) {
            return processes(List.of(processes));
        }

        public Builder restart(@Nullable Output<FlyMachineRestartArgs> restart) {
            $.restart = restart;
            return this;
        }

        public Builder restart(FlyMachineRestartArgs restart) {
            return restart(Output.of(restart));
        }

        public Builder schedule(@Nullable Output<String> schedule) {
            $.schedule = schedule;
            return this;
        }

        public Builder schedule(String schedule) {
            return schedule(Output.of(schedule));
        }

        public Builder services(@Nullable Output<List<FlyMachineServiceArgs>> services) {
            $.services = services;
            return this;
        }

        public Builder services(List<FlyMachineServiceArgs> services) {
            return services(Output.of(services));
        }

        public Builder services(FlyMachineServiceArgs... services) {
            return services(List.of(services));
        }

        public Builder standbys(@Nullable Output<List<String>> standbys) {
            $.standbys = standbys;
            return this;
        }

        public Builder standbys(List<String> standbys) {
            return standbys(Output.of(standbys));
        }

        public Builder standbys(String... standbys) {
            return standbys(List.of(standbys));
        }

        public Builder statics(@Nullable Output<List<FlyStaticArgs>> statics) {
            $.statics = statics;
            return this;
        }

        public Builder statics(List<FlyStaticArgs> statics) {
            return statics(Output.of(statics));
        }

        public Builder statics(FlyStaticArgs... statics) {
            return statics(List.of(statics));
        }

        public Builder stopConfig(@Nullable Output<FlyStopConfigArgs> stopConfig) {
            $.stopConfig = stopConfig;
            return this;
        }

        public Builder stopConfig(FlyStopConfigArgs stopConfig) {
            return stopConfig(Output.of(stopConfig));
        }

        public FlyMachineConfigArgs build() {
            if ($.image == null) {
                throw new MissingRequiredPropertyException("FlyMachineConfigArgs", "image");
            }
            return $;
        }
    }

}
