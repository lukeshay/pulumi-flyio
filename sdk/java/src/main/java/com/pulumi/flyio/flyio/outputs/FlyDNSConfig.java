// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.flyio.flyio.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.flyio.flyio.outputs.FlyDnsForwardRule;
import com.pulumi.flyio.flyio.outputs.FlyDnsOption;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FlyDNSConfig {
    private @Nullable List<FlyDnsForwardRule> dnsForwardRules;
    private @Nullable String hostname;
    private @Nullable String hostnameFqdn;
    private @Nullable List<String> nameservers;
    private @Nullable List<FlyDnsOption> options;
    private @Nullable List<String> searches;
    private @Nullable Boolean skipRegistration;

    private FlyDNSConfig() {}
    public List<FlyDnsForwardRule> dnsForwardRules() {
        return this.dnsForwardRules == null ? List.of() : this.dnsForwardRules;
    }
    public Optional<String> hostname() {
        return Optional.ofNullable(this.hostname);
    }
    public Optional<String> hostnameFqdn() {
        return Optional.ofNullable(this.hostnameFqdn);
    }
    public List<String> nameservers() {
        return this.nameservers == null ? List.of() : this.nameservers;
    }
    public List<FlyDnsOption> options() {
        return this.options == null ? List.of() : this.options;
    }
    public List<String> searches() {
        return this.searches == null ? List.of() : this.searches;
    }
    public Optional<Boolean> skipRegistration() {
        return Optional.ofNullable(this.skipRegistration);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlyDNSConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<FlyDnsForwardRule> dnsForwardRules;
        private @Nullable String hostname;
        private @Nullable String hostnameFqdn;
        private @Nullable List<String> nameservers;
        private @Nullable List<FlyDnsOption> options;
        private @Nullable List<String> searches;
        private @Nullable Boolean skipRegistration;
        public Builder() {}
        public Builder(FlyDNSConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dnsForwardRules = defaults.dnsForwardRules;
    	      this.hostname = defaults.hostname;
    	      this.hostnameFqdn = defaults.hostnameFqdn;
    	      this.nameservers = defaults.nameservers;
    	      this.options = defaults.options;
    	      this.searches = defaults.searches;
    	      this.skipRegistration = defaults.skipRegistration;
        }

        @CustomType.Setter
        public Builder dnsForwardRules(@Nullable List<FlyDnsForwardRule> dnsForwardRules) {

            this.dnsForwardRules = dnsForwardRules;
            return this;
        }
        public Builder dnsForwardRules(FlyDnsForwardRule... dnsForwardRules) {
            return dnsForwardRules(List.of(dnsForwardRules));
        }
        @CustomType.Setter
        public Builder hostname(@Nullable String hostname) {

            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder hostnameFqdn(@Nullable String hostnameFqdn) {

            this.hostnameFqdn = hostnameFqdn;
            return this;
        }
        @CustomType.Setter
        public Builder nameservers(@Nullable List<String> nameservers) {

            this.nameservers = nameservers;
            return this;
        }
        public Builder nameservers(String... nameservers) {
            return nameservers(List.of(nameservers));
        }
        @CustomType.Setter
        public Builder options(@Nullable List<FlyDnsOption> options) {

            this.options = options;
            return this;
        }
        public Builder options(FlyDnsOption... options) {
            return options(List.of(options));
        }
        @CustomType.Setter
        public Builder searches(@Nullable List<String> searches) {

            this.searches = searches;
            return this;
        }
        public Builder searches(String... searches) {
            return searches(List.of(searches));
        }
        @CustomType.Setter
        public Builder skipRegistration(@Nullable Boolean skipRegistration) {

            this.skipRegistration = skipRegistration;
            return this;
        }
        public FlyDNSConfig build() {
            final var _resultValue = new FlyDNSConfig();
            _resultValue.dnsForwardRules = dnsForwardRules;
            _resultValue.hostname = hostname;
            _resultValue.hostnameFqdn = hostnameFqdn;
            _resultValue.nameservers = nameservers;
            _resultValue.options = options;
            _resultValue.searches = searches;
            _resultValue.skipRegistration = skipRegistration;
            return _resultValue;
        }
    }
}
